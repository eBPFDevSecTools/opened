{
  "set_flags": [
    {
      "capabilities": [],
      "helperCallParams": {},
      "startLine": 79,
      "endLine": 104,
      "File": "/home/sayandes/opened_extraction/examples/netobserv-bpf-main/flows.c",
      "funcName": "set_flags",
      "developer_inline_comments": [
        {
          "start_line": 1,
          "end_line": 15,
          "text": "/*\n    Flows v2. A Flow-metric generator using TC.\n\n    This program can be hooked on to TC ingress/egress hook to monitor packets\n    to/from an interface.\n\n    Logic:\n        1) Store flow information in a per-cpu hash map.\n        2) Upon flow completion (tcp->fin event), evict the entry from map, and\n           send to userspace through ringbuffer.\n           Eviction for non-tcp flows need to done by userspace\n        3) When the map is full, we send the new flow entry to userspace via ringbuffer,\n            until an entry is available.\n        4) When hash collision is detected, we send the new entry to userpace via ringbuffer.\n*/"
        },
        {
          "start_line": 40,
          "end_line": 40,
          "text": "// according to field 61 in https://www.iana.org/assignments/ipfix/ipfix.xhtml"
        },
        {
          "start_line": 44,
          "end_line": 44,
          "text": "// Flags according to RFC 9293 & https://www.iana.org/assignments/ipfix/ipfix.xhtml"
        },
        {
          "start_line": 53,
          "end_line": 53,
          "text": "// Custom flags exported"
        },
        {
          "start_line": 58,
          "end_line": 58,
          "text": "// Common Ringbuffer as a conduit for ingress/egress flows to userspace"
        },
        {
          "start_line": 64,
          "end_line": 64,
          "text": "// Key: the flow identifier. Value: the flow metrics for that identifier."
        },
        {
          "start_line": 65,
          "end_line": 65,
          "text": "// The userspace will aggregate them into a single flow."
        },
        {
          "start_line": 72,
          "end_line": 72,
          "text": "// Constant definitions, to be overridden by the invoker"
        },
        {
          "start_line": 78,
          "end_line": 78,
          "text": "// sets the TCP header flags for connection information"
        },
        {
          "start_line": 80,
          "end_line": 80,
          "text": "//If both ACK and SYN are set, then it is server -> client communication during 3-way handshake. "
        },
        {
          "start_line": 84,
          "end_line": 84,
          "text": "// If both ACK and FIN are set, then it is graceful termination from server."
        },
        {
          "start_line": 87,
          "end_line": 87,
          "text": "// If both ACK and RST are set, then it is abrupt connection termination. "
        }
      ],
      "updateMaps": [],
      "readMaps": [],
      "input": [
        "struct tcphdr *th",
        " u16 *flags"
      ],
      "output": "staticinlinevoid",
      "helper": [],
      "compatibleHookpoints": [
        "perf_event",
        "cgroup_sock_addr",
        "cgroup_sysctl",
        "sk_skb",
        "lwt_out",
        "cgroup_sock",
        "socket_filter",
        "raw_tracepoint_writable",
        "sk_msg",
        "lwt_seg6local",
        "sched_act",
        "kprobe",
        "flow_dissector",
        "sched_cls",
        "cgroup_device",
        "sk_reuseport",
        "sock_ops",
        "cgroup_skb",
        "tracepoint",
        "lwt_xmit",
        "xdp",
        "raw_tracepoint",
        "lwt_in"
      ],
      "source": [
        "static inline void set_flags (struct tcphdr *th, u16 *flags)\n",
        "{\n",
        "    if (th->ack && th->syn) {\n",
        "        *flags |= SYN_ACK_FLAG;\n",
        "    }\n",
        "    else if (th->ack && th->fin) {\n",
        "        *flags |= FIN_ACK_FLAG;\n",
        "    }\n",
        "    else if (th->ack && th->rst) {\n",
        "        *flags |= RST_ACK_FLAG;\n",
        "    }\n",
        "    else if (th->fin) {\n",
        "        *flags |= FIN_FLAG;\n",
        "    }\n",
        "    else if (th->syn) {\n",
        "        *flags |= SYN_FLAG;\n",
        "    }\n",
        "    else if (th->rst) {\n",
        "        *flags |= RST_FLAG;\n",
        "    }\n",
        "    else if (th->psh) {\n",
        "        *flags |= PSH_FLAG;\n",
        "    }\n",
        "    else if (th->urg) {\n",
        "        *flags |= URG_FLAG;\n",
        "    }\n",
        "    else if (th->ece) {\n",
        "        *flags |= ECE_FLAG;\n",
        "    }\n",
        "    else if (th->cwr) {\n",
        "        *flags |= CWR_FLAG;\n",
        "    }\n",
        "}\n"
      ],
      "called_function_list": [],
      "call_depth": 0,
      "humanFuncDescription": [
        {}
      ],
      "AI_func_description": [
        {
          "description": "",
          "author": "",
          "authorEmail": "",
          "date": "",
          "invocationParameters": ""
        }
      ]
    }
  ],
  "fill_iphdr": [
    {
      "capabilities": [],
      "helperCallParams": {},
      "startLine": 106,
      "endLine": 138,
      "File": "/home/sayandes/opened_extraction/examples/netobserv-bpf-main/flows.c",
      "funcName": "fill_iphdr",
      "developer_inline_comments": [],
      "updateMaps": [],
      "readMaps": [],
      "input": [
        "struct iphdr *ip",
        " void *data_end",
        " flow_id *id",
        " u16 *flags"
      ],
      "output": "staticinlineint",
      "helper": [],
      "compatibleHookpoints": [
        "perf_event",
        "cgroup_sock_addr",
        "cgroup_sysctl",
        "sk_skb",
        "lwt_out",
        "cgroup_sock",
        "socket_filter",
        "raw_tracepoint_writable",
        "sk_msg",
        "lwt_seg6local",
        "sched_act",
        "kprobe",
        "flow_dissector",
        "sched_cls",
        "cgroup_device",
        "sk_reuseport",
        "sock_ops",
        "cgroup_skb",
        "tracepoint",
        "lwt_xmit",
        "xdp",
        "raw_tracepoint",
        "lwt_in"
      ],
      "source": [
        "static inline int fill_iphdr (struct iphdr *ip, void *data_end, flow_id *id, u16 *flags)\n",
        "{\n",
        "    if ((void *) ip + sizeof (*ip) > data_end) {\n",
        "        return DISCARD;\n",
        "    }\n",
        "    __builtin_memcpy (id->src_ip.s6_addr, ip4in6, sizeof (ip4in6));\n",
        "    __builtin_memcpy (id->dst_ip.s6_addr, ip4in6, sizeof (ip4in6));\n",
        "    __builtin_memcpy (id->src_ip.s6_addr + sizeof (ip4in6), &ip->saddr, sizeof (ip->saddr));\n",
        "    __builtin_memcpy (id->dst_ip.s6_addr + sizeof (ip4in6), &ip->daddr, sizeof (ip->daddr));\n",
        "    id->transport_protocol = ip->protocol;\n",
        "    id->src_port = 0;\n",
        "    id->dst_port = 0;\n",
        "    switch (ip->protocol) {\n",
        "    case IPPROTO_TCP :\n",
        "        {\n",
        "            struct tcphdr *tcp = (void *) ip + sizeof (*ip);\n",
        "            if ((void *) tcp + sizeof (*tcp) <= data_end) {\n",
        "                id->src_port = __bpf_ntohs (tcp->source);\n",
        "                id->dst_port = __bpf_ntohs (tcp->dest);\n",
        "                set_flags (tcp, flags);\n",
        "            }\n",
        "        }\n",
        "        break;\n",
        "    case IPPROTO_UDP :\n",
        "        {\n",
        "            struct udphdr *udp = (void *) ip + sizeof (*ip);\n",
        "            if ((void *) udp + sizeof (*udp) <= data_end) {\n",
        "                id->src_port = __bpf_ntohs (udp->source);\n",
        "                id->dst_port = __bpf_ntohs (udp->dest);\n",
        "            }\n",
        "        }\n",
        "        break;\n",
        "    default :\n",
        "        break;\n",
        "    }\n",
        "    return SUBMIT;\n",
        "}\n"
      ],
      "called_function_list": [
        "set_flags"
      ],
      "call_depth": 1,
      "humanFuncDescription": [
        {}
      ],
      "AI_func_description": [
        {
          "description": "",
          "author": "",
          "authorEmail": "",
          "date": "",
          "invocationParameters": ""
        }
      ]
    }
  ],
  "fill_ip6hdr": [
    {
      "capabilities": [],
      "helperCallParams": {},
      "startLine": 141,
      "endLine": 171,
      "File": "/home/sayandes/opened_extraction/examples/netobserv-bpf-main/flows.c",
      "funcName": "fill_ip6hdr",
      "developer_inline_comments": [
        {
          "start_line": 140,
          "end_line": 140,
          "text": "// sets flow fields from IPv6 header information"
        }
      ],
      "updateMaps": [],
      "readMaps": [],
      "input": [
        "struct ipv6hdr *ip",
        " void *data_end",
        " flow_id *id",
        " u16 *flags"
      ],
      "output": "staticinlineint",
      "helper": [],
      "compatibleHookpoints": [
        "perf_event",
        "cgroup_sock_addr",
        "cgroup_sysctl",
        "sk_skb",
        "lwt_out",
        "cgroup_sock",
        "socket_filter",
        "raw_tracepoint_writable",
        "sk_msg",
        "lwt_seg6local",
        "sched_act",
        "kprobe",
        "flow_dissector",
        "sched_cls",
        "cgroup_device",
        "sk_reuseport",
        "sock_ops",
        "cgroup_skb",
        "tracepoint",
        "lwt_xmit",
        "xdp",
        "raw_tracepoint",
        "lwt_in"
      ],
      "source": [
        "static inline int fill_ip6hdr (struct ipv6hdr *ip, void *data_end, flow_id *id, u16 *flags)\n",
        "{\n",
        "    if ((void *) ip + sizeof (*ip) > data_end) {\n",
        "        return DISCARD;\n",
        "    }\n",
        "    id->src_ip = ip->saddr;\n",
        "    id->dst_ip = ip->daddr;\n",
        "    id->transport_protocol = ip->nexthdr;\n",
        "    id->src_port = 0;\n",
        "    id->dst_port = 0;\n",
        "    switch (ip->nexthdr) {\n",
        "    case IPPROTO_TCP :\n",
        "        {\n",
        "            struct tcphdr *tcp = (void *) ip + sizeof (*ip);\n",
        "            if ((void *) tcp + sizeof (*tcp) <= data_end) {\n",
        "                id->src_port = __bpf_ntohs (tcp->source);\n",
        "                id->dst_port = __bpf_ntohs (tcp->dest);\n",
        "                set_flags (tcp, flags);\n",
        "            }\n",
        "        }\n",
        "        break;\n",
        "    case IPPROTO_UDP :\n",
        "        {\n",
        "            struct udphdr *udp = (void *) ip + sizeof (*ip);\n",
        "            if ((void *) udp + sizeof (*udp) <= data_end) {\n",
        "                id->src_port = __bpf_ntohs (udp->source);\n",
        "                id->dst_port = __bpf_ntohs (udp->dest);\n",
        "            }\n",
        "        }\n",
        "        break;\n",
        "    default :\n",
        "        break;\n",
        "    }\n",
        "    return SUBMIT;\n",
        "}\n"
      ],
      "called_function_list": [
        "set_flags"
      ],
      "call_depth": 1,
      "humanFuncDescription": [
        {}
      ],
      "AI_func_description": [
        {
          "description": "",
          "author": "",
          "authorEmail": "",
          "date": "",
          "invocationParameters": ""
        }
      ]
    }
  ],
  "fill_ethhdr": [
    {
      "capabilities": [],
      "helperCallParams": {},
      "startLine": 173,
      "endLine": 197,
      "File": "/home/sayandes/opened_extraction/examples/netobserv-bpf-main/flows.c",
      "funcName": "fill_ethhdr",
      "developer_inline_comments": [
        {
          "start_line": 188,
          "end_line": 188,
          "text": "// TODO : Need to implement other specific ethertypes if needed"
        },
        {
          "start_line": 189,
          "end_line": 189,
          "text": "// For now other parts of flow id remain zero"
        }
      ],
      "updateMaps": [],
      "readMaps": [],
      "input": [
        "struct ethhdr *eth",
        " void *data_end",
        " flow_id *id",
        " u16 *flags"
      ],
      "output": "staticinlineint",
      "helper": [],
      "compatibleHookpoints": [
        "perf_event",
        "cgroup_sock_addr",
        "cgroup_sysctl",
        "sk_skb",
        "lwt_out",
        "cgroup_sock",
        "socket_filter",
        "raw_tracepoint_writable",
        "sk_msg",
        "lwt_seg6local",
        "sched_act",
        "kprobe",
        "flow_dissector",
        "sched_cls",
        "cgroup_device",
        "sk_reuseport",
        "sock_ops",
        "cgroup_skb",
        "tracepoint",
        "lwt_xmit",
        "xdp",
        "raw_tracepoint",
        "lwt_in"
      ],
      "source": [
        "static inline int fill_ethhdr (struct ethhdr *eth, void *data_end, flow_id *id, u16 *flags)\n",
        "{\n",
        "    if ((void *) eth + sizeof (*eth) > data_end) {\n",
        "        return DISCARD;\n",
        "    }\n",
        "    __builtin_memcpy (id->dst_mac, eth->h_dest, ETH_ALEN);\n",
        "    __builtin_memcpy (id->src_mac, eth->h_source, ETH_ALEN);\n",
        "    id->eth_protocol = __bpf_ntohs (eth->h_proto);\n",
        "    if (id->eth_protocol == ETH_P_IP) {\n",
        "        struct iphdr *ip = (void *) eth + sizeof (*eth);\n",
        "        return fill_iphdr (ip, data_end, id, flags);\n",
        "    }\n",
        "    else if (id->eth_protocol == ETH_P_IPV6) {\n",
        "        struct ipv6hdr *ip6 = (void *) eth + sizeof (*eth);\n",
        "        return fill_ip6hdr (ip6, data_end, id, flags);\n",
        "    }\n",
        "    else {\n",
        "        memset (&(id->src_ip), 0, sizeof (struct in6_addr));\n",
        "        memset (&(id->dst_ip), 0, sizeof (struct in6_addr));\n",
        "        id->transport_protocol = 0;\n",
        "        id->src_port = 0;\n",
        "        id->dst_port = 0;\n",
        "    }\n",
        "    return SUBMIT;\n",
        "}\n"
      ],
      "called_function_list": [
        "fill_iphdr",
        "fill_ip6hdr"
      ],
      "call_depth": 2,
      "humanFuncDescription": [
        {}
      ],
      "AI_func_description": [
        {
          "description": "",
          "author": "",
          "authorEmail": "",
          "date": "",
          "invocationParameters": ""
        }
      ]
    }
  ],
  "flow_monitor": [
    {
      "capabilities": [
        {
          "capability": "read_sys_info",
          "read_sys_info": [
            {
              "Project": "bcc",
              "FunctionName": "bpf_ktime_get_ns",
              "Return Type": "u64",
              "Description": "u64 bpf_ktime_get_ns(void) Return: u64 number of nanoseconds. Starts at system boot time but stops during suspend. Examples in situ: \"https://github.com/iovisor/bcc/search?q=bpf_ktime_get_ns+path%3Aexamples&type=Code search /examples , \"https://github.com/iovisor/bcc/search?q=bpf_ktime_get_ns+path%3Atools&type=Code search /tools ",
              "Return": "u64 number of nanoseconds",
              "Input Prameters": [],
              "compatible_hookpoints": [
                "socket_filter",
                "kprobe",
                "sched_cls",
                "sched_act",
                "tracepoint",
                "xdp",
                "perf_event",
                "cgroup_skb",
                "cgroup_sock",
                "lwt_in",
                "lwt_out",
                "lwt_xmit",
                "sock_ops",
                "sk_skb",
                "sk_msg",
                "raw_tracepoint",
                "cgroup_sock_addr",
                "lwt_seg6local",
                "sk_reuseport",
                "flow_dissector",
                "raw_tracepoint_writable"
              ],
              "capabilities": [
                "read_sys_info"
              ]
            }
          ]
        },
        {
          "capability": "map_update",
          "map_update": [
            {
              "Project": "libbpf",
              "Return Type": "int",
              "Description": "Add or update the <[ value ]>(IP: 2) of the entry associated to <[ key ]>(IP: 1) in <[ map ]>(IP: 0) with value. <[ flags ]>(IP: 3) is one of: BPF_NOEXIST The entry for <[ key ]>(IP: 1) must not exist in the map. BPF_EXIST The entry for <[ key ]>(IP: 1) must already exist in the map. BPF_ANY No condition on the existence of the entry for key. Flag <[ value ]>(IP: 2) BPF_NOEXIST cannot be used for maps of types BPF_MAP_TYPE_ARRAY or BPF_MAP_TYPE_PERCPU_ARRAY (all elements always exist) , the helper would return an error. ",
              "Return": " 0 on success, or a negative error in case of failure.",
              "Function Name": "bpf_map_update_elem",
              "Input Params": [
                "{Type: struct bpf_map ,Var: *map}",
                "{Type:  const void ,Var: *key}",
                "{Type:  const void ,Var: *value}",
                "{Type:  u64 ,Var: flags}"
              ],
              "compatible_hookpoints": [
                "socket_filter",
                "kprobe",
                "sched_cls",
                "sched_act",
                "tracepoint",
                "xdp",
                "perf_event",
                "cgroup_skb",
                "cgroup_sock",
                "lwt_in",
                "lwt_out",
                "lwt_xmit",
                "sock_ops",
                "sk_skb",
                "cgroup_device",
                "sk_msg",
                "raw_tracepoint",
                "cgroup_sock_addr",
                "lwt_seg6local",
                "sk_reuseport",
                "flow_dissector",
                "cgroup_sysctl",
                "raw_tracepoint_writable"
              ],
              "capabilities": [
                "map_update"
              ]
            }
          ]
        },
        {
          "capability": "pkt_go_to_next_module",
          "pkt_go_to_next_module": [
            {
              "Project": "libbpf",
              "Return Type": "int",
              "Input Params": [],
              "Function Name": "TC_ACT_OK",
              "Return": 0,
              "Description": "will terminate the packet processing pipeline and allows the packet to proceed. Pass the skb onwards either to upper layers of the stack on ingress or down to the networking device driver for transmission on egress, respectively. TC_ACT_OK sets skb->tc_index based on the classid the tc BPF program set. The latter is set out of the tc BPF program itself through skb->tc_classid from the BPF context.",
              "compatible_hookpoints": [
                "sched_cls",
                "sched_act"
              ],
              "capabilities": [
                "pkt_go_to_next_module"
              ]
            }
          ]
        },
        {
          "capability": "map_read",
          "map_read": [
            {
              "Project": "libbpf",
              "Return Type": "void*",
              "Description": "Perform a lookup in <[ map ]>(IP: 0) for an entry associated to key. ",
              "Return": " Map value associated to key, or NULL if no entry was found.",
              "Function Name": "bpf_map_lookup_elem",
              "Input Params": [
                "{Type: struct bpf_map ,Var: *map}",
                "{Type:  const void ,Var: *key}"
              ],
              "compatible_hookpoints": [
                "socket_filter",
                "kprobe",
                "sched_cls",
                "sched_act",
                "tracepoint",
                "xdp",
                "perf_event",
                "cgroup_skb",
                "cgroup_sock",
                "lwt_in",
                "lwt_out",
                "lwt_xmit",
                "sock_ops",
                "sk_skb",
                "cgroup_device",
                "sk_msg",
                "raw_tracepoint",
                "cgroup_sock_addr",
                "lwt_seg6local",
                "sk_reuseport",
                "flow_dissector",
                "cgroup_sysctl",
                "raw_tracepoint_writable"
              ],
              "capabilities": [
                "map_read"
              ]
            }
          ]
        }
      ],
      "helperCallParams": {},
      "startLine": 199,
      "endLine": 276,
      "File": "/home/sayandes/opened_extraction/examples/netobserv-bpf-main/flows.c",
      "funcName": "flow_monitor",
      "developer_inline_comments": [
        {
          "start_line": 200,
          "end_line": 200,
          "text": "// If sampling is defined, will only parse 1 out of \"sampling\" flows"
        },
        {
          "start_line": 217,
          "end_line": 217,
          "text": "// TODO: we need to add spinlock here when we deprecate versions prior to 5.1, or provide"
        },
        {
          "start_line": 218,
          "end_line": 218,
          "text": "// a spinlocked alternative version and use it selectively https://lwn.net/Articles/779120/"
        },
        {
          "start_line": 224,
          "end_line": 224,
          "text": "// it might happen that start_mono_time hasn't been set due to"
        },
        {
          "start_line": 225,
          "end_line": 225,
          "text": "// the way percpu hashmap deal with concurrent map entries"
        },
        {
          "start_line": 232,
          "end_line": 232,
          "text": "// usually error -16 (-EBUSY) is printed here."
        },
        {
          "start_line": 233,
          "end_line": 233,
          "text": "// In this case, the flow is dropped, as submitting it to the ringbuffer would cause"
        },
        {
          "start_line": 234,
          "end_line": 234,
          "text": "// a duplicated UNION of flows (two different flows with partial aggregation of the same packets),"
        },
        {
          "start_line": 235,
          "end_line": 235,
          "text": "// which can't be deduplicated."
        },
        {
          "start_line": 236,
          "end_line": 236,
          "text": "// other possible values https://chromium.googlesource.com/chromiumos/docs/+/master/constants/errnos.md"
        },
        {
          "start_line": 240,
          "end_line": 240,
          "text": "// Key does not exist in the map, and will need to create a new entry."
        },
        {
          "start_line": 249,
          "end_line": 249,
          "text": "// even if we know that the entry is new, another CPU might be concurrently inserting a flow"
        },
        {
          "start_line": 250,
          "end_line": 250,
          "text": "// so we need to specify BPF_ANY"
        },
        {
          "start_line": 253,
          "end_line": 253,
          "text": "// usually error -16 (-EBUSY) or -7 (E2BIG) is printed here."
        },
        {
          "start_line": 254,
          "end_line": 254,
          "text": "// In this case, we send the single-packet flow via ringbuffer as in the worst case we can have"
        },
        {
          "start_line": 255,
          "end_line": 255,
          "text": "// a repeated INTERSECTION of flows (different flows aggregating different packets),"
        },
        {
          "start_line": 256,
          "end_line": 256,
          "text": "// which can be re-aggregated at userpace."
        },
        {
          "start_line": 257,
          "end_line": 257,
          "text": "// other possible values https://chromium.googlesource.com/chromiumos/docs/+/master/constants/errnos.md"
        }
      ],
      "updateMaps": [
        "  aggregated_flows"
      ],
      "readMaps": [
        " aggregated_flows"
      ],
      "input": [
        "struct  __sk_buff *skb",
        " u8 direction"
      ],
      "output": "staticinlineint",
      "helper": [
        "bpf_ktime_get_ns",
        "bpf_map_update_elem",
        "TC_ACT_OK",
        "bpf_map_lookup_elem"
      ],
      "compatibleHookpoints": [
        "sched_cls",
        "sched_act"
      ],
      "source": [
        "static inline int flow_monitor (struct  __sk_buff *skb, u8 direction)\n",
        "{\n",
        "    if (sampling != 0 && (bpf_get_prandom_u32 () % sampling) != 0) {\n",
        "        return TC_ACT_OK;\n",
        "    }\n",
        "    void *data_end = (void *) (long) skb->data_end;\n",
        "    void *data = (void *) (long) skb->data;\n",
        "    flow_id id;\n",
        "    u64 current_time = bpf_ktime_get_ns ();\n",
        "    struct ethhdr *eth = data;\n",
        "    u16 flags = 0;\n",
        "    if (fill_ethhdr (eth, data_end, &id, &flags) == DISCARD) {\n",
        "        return TC_ACT_OK;\n",
        "    }\n",
        "    id.if_index = skb->ifindex;\n",
        "    id.direction = direction;\n",
        "    flow_metrics *aggregate_flow = bpf_map_lookup_elem (&aggregated_flows, &id);\n",
        "    if (aggregate_flow != NULL) {\n",
        "        aggregate_flow->packets += 1;\n",
        "        aggregate_flow->bytes += skb->len;\n",
        "        aggregate_flow->end_mono_time_ts = current_time;\n",
        "        if (aggregate_flow->start_mono_time_ts == 0) {\n",
        "            aggregate_flow->start_mono_time_ts = current_time;\n",
        "        }\n",
        "        aggregate_flow->flags |= flags;\n",
        "        long ret = bpf_map_update_elem (& aggregated_flows, & id, aggregate_flow, BPF_ANY);\n",
        "        if (trace_messages && ret != 0) {\n",
        "            bpf_printk (\"error updating flow %d\\n\", ret);\n",
        "        }\n",
        "    }\n",
        "    else {\n",
        "        flow_metrics new_flow = {\n",
        "            .packets = 1,\n",
        "            .bytes = skb->len,\n",
        "            .start_mono_time_ts = current_time,\n",
        "            .end_mono_time_ts = current_time,\n",
        "            .flags = flags,}\n",
        "        ;\n",
        "        long ret = bpf_map_update_elem (& aggregated_flows, & id, & new_flow, BPF_ANY);\n",
        "        if (ret != 0) {\n",
        "            if (trace_messages) {\n",
        "                bpf_printk (\"error adding flow %d\\n\", ret);\n",
        "            }\n",
        "            new_flow.errno = -ret;\n",
        "            flow_record *record = bpf_ringbuf_reserve (&direct_flows, sizeof (flow_record), 0);\n",
        "            if (!record) {\n",
        "                if (trace_messages) {\n",
        "                    bpf_printk (\"couldn't reserve space in the ringbuf. Dropping flow\");\n",
        "                }\n",
        "                return TC_ACT_OK;\n",
        "            }\n",
        "            record->id = id;\n",
        "            record->metrics = new_flow;\n",
        "            bpf_ringbuf_submit (record, 0);\n",
        "        }\n",
        "    }\n",
        "    return TC_ACT_OK;\n",
        "}\n"
      ],
      "called_function_list": [
        "fill_ethhdr"
      ],
      "call_depth": 3,
      "humanFuncDescription": [
        {}
      ],
      "AI_func_description": [
        {
          "description": "",
          "author": "",
          "authorEmail": "",
          "date": "",
          "invocationParameters": ""
        }
      ]
    }
  ],
  "ingress_flow_parse": [
    {
      "capabilities": [],
      "helperCallParams": {},
      "startLine": 278,
      "endLine": 280,
      "File": "/home/sayandes/opened_extraction/examples/netobserv-bpf-main/flows.c",
      "funcName": "ingress_flow_parse",
      "developer_inline_comments": [],
      "updateMaps": [],
      "readMaps": [],
      "input": [
        "struct  __sk_buff *skb"
      ],
      "output": "int",
      "helper": [],
      "compatibleHookpoints": [
        "perf_event",
        "cgroup_sock_addr",
        "cgroup_sysctl",
        "sk_skb",
        "lwt_out",
        "cgroup_sock",
        "socket_filter",
        "raw_tracepoint_writable",
        "sk_msg",
        "lwt_seg6local",
        "sched_act",
        "kprobe",
        "flow_dissector",
        "sched_cls",
        "cgroup_device",
        "sk_reuseport",
        "sock_ops",
        "cgroup_skb",
        "tracepoint",
        "lwt_xmit",
        "xdp",
        "raw_tracepoint",
        "lwt_in"
      ],
      "source": [
        "int ingress_flow_parse (struct  __sk_buff *skb)\n",
        "{\n",
        "    return flow_monitor (skb, INGRESS);\n",
        "}\n"
      ],
      "called_function_list": [
        "flow_monitor"
      ],
      "call_depth": 4,
      "humanFuncDescription": [
        {}
      ],
      "AI_func_description": [
        {
          "description": "",
          "author": "",
          "authorEmail": "",
          "date": "",
          "invocationParameters": ""
        }
      ]
    }
  ],
  "egress_flow_parse": [
    {
      "capabilities": [],
      "helperCallParams": {},
      "startLine": 283,
      "endLine": 285,
      "File": "/home/sayandes/opened_extraction/examples/netobserv-bpf-main/flows.c",
      "funcName": "egress_flow_parse",
      "developer_inline_comments": [],
      "updateMaps": [],
      "readMaps": [],
      "input": [
        "struct  __sk_buff *skb"
      ],
      "output": "int",
      "helper": [],
      "compatibleHookpoints": [
        "perf_event",
        "cgroup_sock_addr",
        "cgroup_sysctl",
        "sk_skb",
        "lwt_out",
        "cgroup_sock",
        "socket_filter",
        "raw_tracepoint_writable",
        "sk_msg",
        "lwt_seg6local",
        "sched_act",
        "kprobe",
        "flow_dissector",
        "sched_cls",
        "cgroup_device",
        "sk_reuseport",
        "sock_ops",
        "cgroup_skb",
        "tracepoint",
        "lwt_xmit",
        "xdp",
        "raw_tracepoint",
        "lwt_in"
      ],
      "source": [
        "int egress_flow_parse (struct  __sk_buff *skb)\n",
        "{\n",
        "    return flow_monitor (skb, EGRESS);\n",
        "}\n"
      ],
      "called_function_list": [
        "flow_monitor"
      ],
      "call_depth": 4,
      "humanFuncDescription": [
        {}
      ],
      "AI_func_description": [
        {
          "description": "",
          "author": "",
          "authorEmail": "",
          "date": "",
          "invocationParameters": ""
        }
      ]
    }
  ],
  "bpf_tail_call_static": [
    {
      "capabilities": [],
      "helperCallParams": {},
      "startLine": 98,
      "endLine": 123,
      "File": "/home/sayandes/opened_extraction/examples/netobserv-bpf-main/headers/bpf_helpers.h",
      "funcName": "bpf_tail_call_static",
      "developer_inline_comments": [
        {
          "start_line": 1,
          "end_line": 1,
          "text": "/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */"
        },
        {
          "start_line": 5,
          "end_line": 10,
          "text": "/*\n * Note that bpf programs need to include either\n * vmlinux.h (auto-generated from BTF) or linux/types.h\n * in advance since bpf_helper_defs.h uses such types\n * as __u64.\n */"
        },
        {
          "start_line": 17,
          "end_line": 24,
          "text": "/*\n * Helper macro to place programs, maps, license in\n * different sections in elf_bpf file. Section names\n * are interpreted by libbpf depending on the context (BPF programs, BPF maps,\n * extern variables, etc).\n * To allow use of SEC() with externs (e.g., for extern .maps declarations),\n * make sure __attribute__((unused)) doesn't trigger compilation warning.\n */"
        },
        {
          "start_line": 31,
          "end_line": 31,
          "text": "/* Avoid 'linux/stddef.h' definition of '__always_inline'. */"
        },
        {
          "start_line": 42,
          "end_line": 47,
          "text": "/*\n * Use __hidden attribute to mark a non-static BPF subprogram effectively\n * static for BPF verifier's verification algorithm purposes, allowing more\n * extensive and permissive BPF verification process, taking into account\n * subprogram's caller context.\n */"
        },
        {
          "start_line": 50,
          "end_line": 55,
          "text": "/* When utilizing vmlinux.h with BPF CO-RE, user BPF programs can't include\n * any system-level headers (such as stddef.h, linux/version.h, etc), and\n * commonly-used macros like NULL and KERNEL_VERSION aren't available through\n * vmlinux.h. This just adds unnecessary hurdles and forces users to re-define\n * them on their own. So as a convenience, provide such definitions here.\n */"
        },
        {
          "start_line": 64,
          "end_line": 66,
          "text": "/*\n * Helper macros to manipulate data structures\n */"
        },
        {
          "start_line": 78,
          "end_line": 89,
          "text": "/*\n * Helper macro to throw a compilation error if __bpf_unreachable() gets\n * built into the resulting code. This works given BPF back end does not\n * implement __builtin_trap(). This is useful to assert that certain paths\n * of the program code are never used and hence eliminated by the compiler.\n *\n * For example, consider a switch statement that covers known cases used by\n * the program. __bpf_unreachable() can then reside in the default case. If\n * the program gets extended such that a case is not covered in the switch\n * statement, then it will throw a build error due to the default case not\n * being compiled out.\n */"
        },
        {
          "start_line": 94,
          "end_line": 96,
          "text": "/*\n * Helper function to perform a tail call with a constant/immediate map slot.\n */"
        },
        {
          "start_line": 104,
          "end_line": 116,
          "text": "/*\n\t * Provide a hard guarantee that LLVM won't optimize setting r2 (map\n\t * pointer) and r3 (constant map index) from _different paths_ ending\n\t * up at the _same_ call insn as otherwise we won't be able to use the\n\t * jmpq/nopl retpoline-free patching by the x86-64 JIT in the kernel\n\t * given they mismatch. See also d2e4c1e6c294 (\"bpf: Constant map key\n\t * tracking for prog array pokes\") for details on verifier tracking.\n\t *\n\t * Note on clobber list: we need to stay in-line with BPF calling\n\t * convention, so even if we don't end up using r0, r4, r5, we need\n\t * to mark them as clobber so that LLVM doesn't end up using them\n\t * before / after the call.\n\t */"
        }
      ],
      "updateMaps": [],
      "readMaps": [],
      "input": [
        "void *ctx",
        " const void *map",
        " const __u32 slot"
      ],
      "output": "static__always_inlinevoid",
      "helper": [
        "bpf_tail_call"
      ],
      "compatibleHookpoints": [
        "perf_event",
        "cgroup_sock_addr",
        "sk_skb",
        "lwt_out",
        "cgroup_sock",
        "socket_filter",
        "raw_tracepoint_writable",
        "sk_msg",
        "lwt_seg6local",
        "sched_act",
        "kprobe",
        "flow_dissector",
        "sched_cls",
        "sk_reuseport",
        "sock_ops",
        "cgroup_skb",
        "tracepoint",
        "lwt_xmit",
        "xdp",
        "raw_tracepoint",
        "lwt_in"
      ],
      "source": [
        "static __always_inline void bpf_tail_call_static (void *ctx, const void *map, const __u32 slot)\n",
        "{\n",
        "    if (!__builtin_constant_p (slot))\n",
        "        __bpf_unreachable ();\n",
        "    asm volatile (\"r1 = %[ctx]\\n\\t\"\n",
        "        \"r2 = %[map]\\n\\t\"\n",
        "        \"r3 = %[slot]\\n\\t\"\n",
        "        \"call 12\"\n",
        "        : : [ctx] \"r\"\n",
        "        (ctx), [map] \"r\"\n",
        "        (map), [slot] \"i\"\n",
        "        (slot) : \"r0\",\n",
        "        \"r1\",\n",
        "        \"r2\",\n",
        "        \"r3\",\n",
        "        \"r4\",\n",
        "        \"r5\"\n",
        "        );\n",
        "}\n"
      ],
      "called_function_list": [],
      "call_depth": 0,
      "humanFuncDescription": [
        {}
      ],
      "AI_func_description": [
        {
          "description": "",
          "author": "",
          "authorEmail": "",
          "date": "",
          "invocationParameters": ""
        }
      ]
    }
  ]
}