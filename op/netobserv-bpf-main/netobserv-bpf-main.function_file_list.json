{
    "set_flags": [
        {
            "fileName": "/home/sayandes/opened_extraction/examples/netobserv-bpf-main/flows.c",
            "startLine": "79",
            "endLine": "104",
            "capability": {
                "capabilities": [],
                "helperCallParams": {}
            },
            "called_function_list": [],
            "call_depth": 0
        }
    ],
    "fill_iphdr": [
        {
            "fileName": "/home/sayandes/opened_extraction/examples/netobserv-bpf-main/flows.c",
            "startLine": "106",
            "endLine": "138",
            "capability": {
                "capabilities": [],
                "helperCallParams": {}
            },
            "called_function_list": [
                "__builtin_memcpy",
                "__builtin_memcpy",
                "__builtin_memcpy",
                "__builtin_memcpy",
                "__bpf_ntohs",
                "__bpf_ntohs",
                "set_flags",
                "__bpf_ntohs",
                "__bpf_ntohs"
            ],
            "call_depth": -1
        }
    ],
    "fill_ip6hdr": [
        {
            "fileName": "/home/sayandes/opened_extraction/examples/netobserv-bpf-main/flows.c",
            "startLine": "141",
            "endLine": "171",
            "capability": {
                "capabilities": [],
                "helperCallParams": {}
            },
            "called_function_list": [
                "__bpf_ntohs",
                "__bpf_ntohs",
                "set_flags",
                "__bpf_ntohs",
                "__bpf_ntohs"
            ],
            "call_depth": -1
        }
    ],
    "fill_ethhdr": [
        {
            "fileName": "/home/sayandes/opened_extraction/examples/netobserv-bpf-main/flows.c",
            "startLine": "173",
            "endLine": "197",
            "capability": {
                "capabilities": [],
                "helperCallParams": {}
            },
            "called_function_list": [
                "__builtin_memcpy",
                "__builtin_memcpy",
                "__bpf_ntohs",
                "fill_iphdr",
                "fill_ip6hdr",
                "memset",
                "memset"
            ],
            "call_depth": -1
        }
    ],
    "flow_monitor": [
        {
            "fileName": "/home/sayandes/opened_extraction/examples/netobserv-bpf-main/flows.c",
            "startLine": "199",
            "endLine": "276",
            "capability": {
                "capabilities": [
                    {
                        "capability": "map_read",
                        "map_read": [
                            {
                                "Project": "libbpf",
                                "Return Type": "void*",
                                "Description": "Perform a lookup in <[ map ]>(IP: 0) for an entry associated to key. ",
                                "Return": " Map value associated to key, or NULL if no entry was found.",
                                "Function Name": "bpf_map_lookup_elem",
                                "Input Params": [
                                    "{Type: struct bpf_map ,Var: *map}",
                                    "{Type:  const void ,Var: *key}"
                                ]
                            }
                        ]
                    },
                    {
                        "capability": "map_update",
                        "map_update": [
                            {
                                "Project": "libbpf",
                                "Return Type": "int",
                                "Description": "Add or update the <[ value ]>(IP: 2) of the entry associated to <[ key ]>(IP: 1) in <[ map ]>(IP: 0) with value. <[ flags ]>(IP: 3) is one of: BPF_NOEXIST The entry for <[ key ]>(IP: 1) must not exist in the map. BPF_EXIST The entry for <[ key ]>(IP: 1) must already exist in the map. BPF_ANY No condition on the existence of the entry for key. Flag <[ value ]>(IP: 2) BPF_NOEXIST cannot be used for maps of types BPF_MAP_TYPE_ARRAY or BPF_MAP_TYPE_PERCPU_ARRAY (all elements always exist) , the helper would return an error. ",
                                "Return": " 0 on success, or a negative error in case of failure.",
                                "Function Name": "bpf_map_update_elem",
                                "Input Params": [
                                    "{Type: struct bpf_map ,Var: *map}",
                                    "{Type:  const void ,Var: *key}",
                                    "{Type:  const void ,Var: *value}",
                                    "{Type:  u64 ,Var: flags}"
                                ]
                            }
                        ]
                    },
                    {
                        "capability": "read_sys_info",
                        "read_sys_info": [
                            {
                                "Project": "libbpf",
                                "Return Type": "u64",
                                "Description": "Return the time elapsed since system boot , in nanoseconds. ",
                                "Return": " Current ktime.",
                                "Function Name": "bpf_ktime_get_ns",
                                "Input Params": [
                                    "{Type: voi ,Var: void}"
                                ]
                            },
                            {
                                "Project": "libbpf",
                                "Return Type": "u32",
                                "Description": "Get a pseudo-random number. From a security point of view , this helper uses its own pseudo-random internal state , and cannot be used to infer the seed of other random functions in the kernel. However , it is essential to note that the generator used by the helper is not cryptographically secure. ",
                                "Return": " A random 32-bit unsigned value.",
                                "Function Name": "bpf_get_prandom_u32",
                                "Input Params": [
                                    "{Type: voi ,Var: void}"
                                ]
                            }
                        ]
                    }
                ],
                "helperCallParams": {
                    "bpf_get_prandom_u32": [
                        {
                            "opVar": "        if (sampling !",
                            "inpVar": [
                                " 0 &&  % sampling !"
                            ]
                        }
                    ],
                    "bpf_ktime_get_ns": [
                        {
                            "opVar": "    u64 current_time ",
                            "inpVar": [
                                " "
                            ]
                        }
                    ],
                    "bpf_map_lookup_elem": [
                        {
                            "opVar": "            flow_metrics *aggregate_flow ",
                            "inpVar": [
                                " &aggregated_flows",
                                " &id"
                            ]
                        }
                    ],
                    "bpf_map_update_elem": [
                        {
                            "opVar": "        long ret ",
                            "inpVar": [
                                " &aggregated_flows",
                                " &id",
                                " aggregate_flow",
                                " BPF_ANY"
                            ]
                        },
                        {
                            "opVar": "                        long ret ",
                            "inpVar": [
                                " &aggregated_flows",
                                " &id",
                                " &new_flow",
                                " BPF_ANY"
                            ]
                        }
                    ]
                }
            },
            "called_function_list": [
                "fill_ethhdr",
                "bpf_printk",
                "bpf_printk",
                "bpf_ringbuf_reserve",
                "bpf_printk",
                "bpf_ringbuf_submit"
            ],
            "call_depth": -1
        }
    ],
    "ingress_flow_parse": [
        {
            "fileName": "/home/sayandes/opened_extraction/examples/netobserv-bpf-main/flows.c",
            "startLine": "278",
            "endLine": "280",
            "capability": {
                "capabilities": [],
                "helperCallParams": {}
            },
            "called_function_list": [
                "flow_monitor"
            ],
            "call_depth": -1
        }
    ],
    "egress_flow_parse": [
        {
            "fileName": "/home/sayandes/opened_extraction/examples/netobserv-bpf-main/flows.c",
            "startLine": "283",
            "endLine": "285",
            "capability": {
                "capabilities": [],
                "helperCallParams": {}
            },
            "called_function_list": [
                "flow_monitor"
            ],
            "call_depth": -1
        }
    ],
    "bpf_tail_call_static": [
        {
            "fileName": "/home/sayandes/opened_extraction/examples/netobserv-bpf-main/headers/bpf_helpers.h",
            "startLine": "98",
            "endLine": "123",
            "capability": {
                "capabilities": [],
                "helperCallParams": {
                    "bpf_tail_call": [
                        {
                            "opVar": "NA",
                            "inpVar": [
                                "_staticvoid *ctx",
                                " const void *map",
                                " const __u32 slot"
                            ]
                        }
                    ]
                }
            },
            "called_function_list": [
                "__builtin_constant_p",
                "__bpf_unreachable"
            ],
            "call_depth": -1
        }
    ]
}