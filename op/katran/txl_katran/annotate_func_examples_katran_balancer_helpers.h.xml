<?xml version="1.0"?>
<doc>
<source file="/home/palani/github/opened_extraction/examples/katran/balancer_helpers.h" funcheader="static inline void submit_event (struct xdp_md *ctx, void *map, __u32 event_id, void *data, __u32 size, bool metadata_only)" startline="46" endline="70">
static inline void submit_event (struct xdp_md *ctx, void *map, __u32 event_id, void *data, __u32 size, bool metadata_only)
{
    struct ctl_value *gk;
    __u32 introspection_gk_pos = 5;
    gk = bpf_map_lookup_elem (& ctl_array, & introspection_gk_pos);
    if (!gk || gk->value == 0) {
        return;
    }
    struct event_metadata md = {}
    ;
    __u64 flags = BPF_F_CURRENT_CPU;
    md.event = event_id;
    md.pkt_size = size;
    if (metadata_only) {
        md.data_len = 0;
    }
    else {
        md.data_len = min_helper (size, MAX_EVENT_SIZE);
        flags |= (__u64) md.data_len << 32;
    }
    bpf_perf_event_output (ctx, map, flags, &md, sizeof (struct event_metadata));
}
</source>
<source file="/home/palani/github/opened_extraction/examples/katran/balancer_helpers.h" funcheader="static inline int recirculate (struct xdp_md *ctx)" startline="74" endline="80">
static inline int recirculate (struct xdp_md *ctx)
{
    int i = RECIRCULATION_INDEX;
    bpf_tail_call (ctx, &subprograms, i);
    return XDP_PASS;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/katran/balancer_helpers.h" funcheader="static inline int decrement_ttl (void *data, void *data_end, int offset, bool is_ipv6)" startline="83" endline="111">
static inline int decrement_ttl (void *data, void *data_end, int offset, bool is_ipv6)
{
    struct iphdr *iph;
    struct ipv6hdr *ip6h;
    if (is_ipv6) {
        if ((data + offset + sizeof (struct ipv6hdr)) > data_end) {
            return XDP_DROP;
        }
        ip6h = (struct ipv6hdr *) (data + offset);
        if (!--ip6h->hop_limit) {
            return XDP_DROP;
        }
    }
    else {
        if ((data + offset + sizeof (struct iphdr)) > data_end) {
            return XDP_DROP;
        }
        iph = (struct iphdr *) (data + offset);
        __u32 csum;
        if (!--iph->ttl) {
            return XDP_DROP;
        }
        csum = iph->check + 0x0001;
        iph->check = (csum & 0xffff) + (csum >> 16);
    }
    return FURTHER_PROCESSING;
}
</source>
</doc>
