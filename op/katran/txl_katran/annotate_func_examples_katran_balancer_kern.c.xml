<?xml version="1.0"?>
<doc>
<source file="/home/palani/github/opened_extraction/examples/katran/balancer_kern.c" funcheader="static inline bool is_under_flood (__u64 *cur_time)" startline="25" endline="50">
static inline bool is_under_flood (__u64 *cur_time)
{
    __u32 conn_rate_key = MAX_VIPS + NEW_CONN_RATE_CNTR;
    struct lb_stats *conn_rate_stats = bpf_map_lookup_elem (&stats, &conn_rate_key);
    if (!conn_rate_stats) {
        return true;
    }
    *cur_time = bpf_ktime_get_ns ();
    if ((*cur_time - conn_rate_stats->v2) > ONE_SEC) {
        conn_rate_stats->v1 = 1;
        conn_rate_stats->v2 = *cur_time;
    }
    else {
        conn_rate_stats->v1 += 1;
        if (conn_rate_stats->v1 > MAX_CONN_RATE) {
            return true;
        }
    }
    return false;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/katran/balancer_kern.c" funcheader="static inline bool get_packet_dst (struct real_definition **real, struct packet_description *pckt, struct vip_meta *vip_info, bool is_ipv6, void *lru_map)" startline="53" endline="131">
static inline bool get_packet_dst (struct real_definition **real, struct packet_description *pckt, struct vip_meta *vip_info, bool is_ipv6, void *lru_map)
{
    struct real_pos_lru new_dst_lru = {}
    ;
    bool under_flood = false;
    bool src_found = false;
    __u32 *real_pos;
    __u64 cur_time = 0;
    __u32 hash;
    __u32 key;
    under_flood = is_under_flood (& cur_time);

#ifdef LPM_SRC_LOOKUP
    if ((vip_info->flags & F_SRC_ROUTING) && !under_flood) {
        __u32 *lpm_val;
        if (is_ipv6) {
            struct v6_lpm_key lpm_key_v6 = {}
            ;
            lpm_key_v6.prefixlen = 128;
            memcpy (lpm_key_v6.addr, pckt->flow.srcv6, 16);
            lpm_val = bpf_map_lookup_elem (& lpm_src_v6, & lpm_key_v6);
        }
        else {
            struct v4_lpm_key lpm_key_v4 = {}
            ;
            lpm_key_v4.addr = pckt->flow.src;
            lpm_key_v4.prefixlen = 32;
            lpm_val = bpf_map_lookup_elem (& lpm_src_v4, & lpm_key_v4);
        }
        if (lpm_val) {
            src_found = true;
            key = *lpm_val;
        }
        __u32 stats_key = MAX_VIPS + LPM_SRC_CNTRS;
        struct lb_stats *data_stats = bpf_map_lookup_elem (&stats, &stats_key);
        if (data_stats) {
            if (src_found) {
                data_stats->v2 += 1;
            }
            else {
                data_stats->v1 += 1;
            }
        }
    }

#endif
    if (!src_found) {
        bool hash_16bytes = is_ipv6;
        if (vip_info->flags & F_HASH_DPORT_ONLY) {
            pckt->flow.port16[0] = pckt->flow.port16[1];
            memset (pckt->flow.srcv6, 0, 16);
        }
        hash = get_packet_hash (pckt, hash_16bytes) % RING_SIZE;
        key = RING_SIZE * (vip_info->vip_num) + hash;
        real_pos = bpf_map_lookup_elem (& ch_rings, & key);
        if (!real_pos) {
            return false;
        }
        key = *real_pos;
    }
    pckt->real_index = key;
    *real = bpf_map_lookup_elem (&reals, &key);
    if (!(*real)) {
        return false;
    }
    if (lru_map && !(vip_info->flags & F_LRU_BYPASS) && !under_flood) {
        if (pckt->flow.proto == IPPROTO_UDP) {
            new_dst_lru.atime = cur_time;
        }
        new_dst_lru.pos = key;
        bpf_map_update_elem (lru_map, &pckt->flow, &new_dst_lru, BPF_ANY);
    }
    return true;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/katran/balancer_kern.c" funcheader="static inline void connection_table_lookup (struct real_definition **real, struct packet_description *pckt, void *lru_map, bool isGlobalLru)" startline="133" endline="156">
static inline void connection_table_lookup (struct real_definition **real, struct packet_description *pckt, void *lru_map, bool isGlobalLru)
{
    struct real_pos_lru *dst_lru;
    __u64 cur_time;
    __u32 key;
    dst_lru = bpf_map_lookup_elem (lru_map, & pckt -> flow);
    if (!dst_lru) {
        return;
    }
    if (!isGlobalLru && pckt->flow.proto == IPPROTO_UDP) {
        cur_time = bpf_ktime_get_ns ();
        if (cur_time - dst_lru->atime > LRU_UDP_TIMEOUT) {
            return;
        }
        dst_lru->atime = cur_time;
    }
    key = dst_lru->pos;
    pckt->real_index = key;
    *real = bpf_map_lookup_elem (&reals, &key);
    return;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/katran/balancer_kern.c" funcheader="static inline int process_l3_headers (struct packet_description *pckt, __u8 *protocol, __u64 off, __u16 *pkt_bytes, void *data, void *data_end, bool is_ipv6)" startline="158" endline="230">
static inline int process_l3_headers (struct packet_description *pckt, __u8 *protocol, __u64 off, __u16 *pkt_bytes, void *data, void *data_end, bool is_ipv6)
{
    __u64 iph_len;
    int action;
    struct iphdr *iph;
    struct ipv6hdr *ip6h;
    if (is_ipv6) {
        ip6h = data + off;
        if (ip6h + 1 > data_end) {
            return XDP_DROP;
        }
        iph_len = sizeof (struct ipv6hdr);
        *protocol = ip6h->nexthdr;
        pckt->flow.proto = *protocol;
        pckt->tos = (ip6h->priority << 4) & 0xF0;
        pckt->tos = pckt->tos | ((ip6h->flow_lbl[0] >> 4) & 0x0F);
        *pkt_bytes = bpf_ntohs (ip6h->payload_len);
        off += iph_len;
        if (*protocol == IPPROTO_FRAGMENT) {
            return XDP_DROP;
        }
        else if (*protocol == IPPROTO_ICMPV6) {
            action = parse_icmpv6 (data, data_end, off, pckt);
            if (action >= 0) {
                return action;
            }
        }
        else {
            memcpy (pckt->flow.srcv6, ip6h->saddr.s6_addr32, 16);
            memcpy (pckt->flow.dstv6, ip6h->daddr.s6_addr32, 16);
        }
    }
    else {
        iph = data + off;
        if (iph + 1 > data_end) {
            return XDP_DROP;
        }
        if (iph->ihl != 5) {
            return XDP_DROP;
        }
        pckt->tos = iph->tos;
        *protocol = iph->protocol;
        pckt->flow.proto = *protocol;
        *pkt_bytes = bpf_ntohs (iph->tot_len);
        off += IPV4_HDR_LEN_NO_OPT;
        if (iph->frag_off & PCKT_FRAGMENTED) {
            return XDP_DROP;
        }
        if (*protocol == IPPROTO_ICMP) {
            action = parse_icmp (data, data_end, off, pckt);
            if (action >= 0) {
                return action;
            }
        }
        else {
            pckt->flow.src = iph->saddr;
            pckt->flow.dst = iph->daddr;
        }
    }
    return FURTHER_PROCESSING;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/katran/balancer_kern.c" funcheader="static inline int check_decap_dst (struct packet_description *pckt, bool is_ipv6, bool *pass)" startline="233" endline="255">
static inline int check_decap_dst (struct packet_description *pckt, bool is_ipv6, bool *pass)
{
    struct address dst_addr = {}
    ;
    struct lb_stats *data_stats;
    if (is_ipv6) {
        memcpy (dst_addr.addrv6, pckt->flow.dstv6, 16);
    }
    else {
        dst_addr.addr = pckt->flow.dst;
    }
    __u32 *decap_dst_flags = bpf_map_lookup_elem (&decap_dst, &dst_addr);
    if (decap_dst_flags) {
        *pass = false;
        __u32 stats_key = MAX_VIPS + REMOTE_ENCAP_CNTRS;
        data_stats = bpf_map_lookup_elem (& stats, & stats_key);
        if (!data_stats) {
            return XDP_DROP;
        }
        data_stats->v1 += 1;
    }
    return FURTHER_PROCESSING;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/katran/balancer_kern.c" funcheader="static inline bool reals_have_same_addr (struct real_definition *a, struct real_definition *b)" startline="261" endline="277">
static inline bool reals_have_same_addr (struct real_definition *a, struct real_definition *b)
{
    if (a->flags != b->flags) {
        return false;
    }
    if (a->flags & F_IPV6) {
        for (int i = 0; i < 4; i++) {
            if (a->dstv6[i] != b->dstv6[i]) {
                return false;
            }
            return true;
        }
    }
    else {
        return a->dst == b->dst;
    }
}
</source>
<source file="/home/palani/github/opened_extraction/examples/katran/balancer_kern.c" funcheader="static inline int perform_global_lru_lookup (struct real_definition **dst, struct packet_description *pckt, __u32 cpu_num, struct vip_meta *vip_info, bool is_ipv6)" startline="279" endline="335">
static inline int perform_global_lru_lookup (struct real_definition **dst, struct packet_description *pckt, __u32 cpu_num, struct vip_meta *vip_info, bool is_ipv6)
{
    void *g_lru_map = bpf_map_lookup_elem (&global_lru_maps, &cpu_num);
    __u32 global_lru_stats_key = MAX_VIPS + GLOBAL_LRU_CNTR;
    struct lb_stats *global_lru_stats = bpf_map_lookup_elem (&stats, &global_lru_stats_key);
    if (!global_lru_stats) {
        return XDP_DROP;
    }
    if (!g_lru_map) {
        global_lru_stats->v1 += 1;
        g_lru_map = &fallback_glru;
    }
    connection_table_lookup (dst, pckt, g_lru_map, true);
    if (*dst) {
        global_lru_stats->v2 += 1;
        struct real_definition *dst_consistent_hash = NULL;
        if (get_packet_dst (&dst_consistent_hash, pckt, vip_info, is_ipv6, NULL)) {
            __u32 global_lru_mismatch_stats_key = MAX_VIPS + GLOBAL_LRU_MISMATCH_CNTR;
            struct lb_stats *global_lru_mismatch_stats = bpf_map_lookup_elem (&stats, &global_lru_mismatch_stats_key);
            if (dst_consistent_hash && global_lru_mismatch_stats) {
                if (reals_have_same_addr (dst_consistent_hash, *dst)) {
                    global_lru_mismatch_stats->v1++;
                }
                else {
                    global_lru_mismatch_stats->v2++;
                }
            }
        }
    }
    return FURTHER_PROCESSING;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/katran/balancer_kern.c" funcheader="static inline int process_encaped_ipip_pckt (void **data, void **data_end, struct xdp_md *xdp, bool *is_ipv6, __u8 *protocol, bool pass)" startline="340" endline="387">
static inline int process_encaped_ipip_pckt (void **data, void **data_end, struct xdp_md *xdp, bool *is_ipv6, __u8 *protocol, bool pass)
{
    int action;
    if (*protocol == IPPROTO_IPIP) {
        if (*is_ipv6) {
            int offset = sizeof (struct ipv6hdr) + sizeof (struct ethhdr);
            if ((*data + offset) > *data_end) {
                return XDP_DROP;
            }
            action = decrement_ttl (* data, * data_end, offset, false);
            if (!decap_v6 (xdp, data, data_end, true)) {
                return XDP_DROP;
            }
            *is_ipv6 = false;
        }
        else {
            int offset = sizeof (struct iphdr) + sizeof (struct ethhdr);
            if ((*data + offset) > *data_end) {
                return XDP_DROP;
            }
            action = decrement_ttl (* data, * data_end, offset, false);
            if (!decap_v4 (xdp, data, data_end)) {
                return XDP_DROP;
            }
        }
    }
    else if (*protocol == IPPROTO_IPV6) {
        int offset = sizeof (struct ipv6hdr) + sizeof (struct ethhdr);
        if ((*data + offset) > *data_end) {
            return XDP_DROP;
        }
        action = decrement_ttl (* data, * data_end, offset, true);
        if (!decap_v6 (xdp, data, data_end, false)) {
            return XDP_DROP;
        }
    }
    if (action >= 0) {
        return action;
    }
    if (pass) {
        return XDP_PASS;
    }
    return recirculate (xdp);
}
</source>
<source file="/home/palani/github/opened_extraction/examples/katran/balancer_kern.c" funcheader="static inline int process_encaped_gue_pckt (void **data, void **data_end, struct xdp_md *xdp, bool is_ipv6, bool pass)" startline="391" endline="441">
static inline int process_encaped_gue_pckt (void **data, void **data_end, struct xdp_md *xdp, bool is_ipv6, bool pass)
{
    int offset = 0;
    int action;
    if (is_ipv6) {
        __u8 v6 = 0;
        offset = sizeof (struct ipv6hdr) + sizeof (struct ethhdr) + sizeof (struct udphdr);
        if ((*data + offset + 1) > *data_end) {
            return XDP_DROP;
        }
        v6 = ((__u8 *) (*data))[offset];
        v6 &= GUEV1_IPV6MASK;
        if (v6) {
            action = decrement_ttl (* data, * data_end, offset, true);
            if (!gue_decap_v6 (xdp, data, data_end, false)) {
                return XDP_DROP;
            }
        }
        else {
            action = decrement_ttl (* data, * data_end, offset, false);
            if (!gue_decap_v6 (xdp, data, data_end, true)) {
                return XDP_DROP;
            }
        }
    }
    else {
        offset = sizeof (struct iphdr) + sizeof (struct ethhdr) + sizeof (struct udphdr);
        if ((*data + offset) > *data_end) {
            return XDP_DROP;
        }
        action = decrement_ttl (* data, * data_end, offset, false);
        if (!gue_decap_v4 (xdp, data, data_end)) {
            return XDP_DROP;
        }
    }
    if (action >= 0) {
        return action;
    }
    if (pass) {
        return XDP_PASS;
    }
    return recirculate (xdp);
}
</source>
<source file="/home/palani/github/opened_extraction/examples/katran/balancer_kern.c" funcheader="static inline void increment_quic_cid_version_stats (int host_id)" startline="444" endline="457">
static inline void increment_quic_cid_version_stats (int host_id)
{
    __u32 quic_version_stats_key = MAX_VIPS + QUIC_CID_VERSION_STATS;
    struct lb_stats *quic_version = bpf_map_lookup_elem (&stats, &quic_version_stats_key);
    if (!quic_version) {
        return;
    }
    if (host_id > QUIC_CONNID_VERSION_V1_MAX_VAL) {
        quic_version->v2 += 1;
    }
    else {
        quic_version->v1 += 1;
    }
}
</source>
<source file="/home/palani/github/opened_extraction/examples/katran/balancer_kern.c" funcheader="static inline void increment_quic_cid_drop_no_real ()" startline="459" endline="468">
static inline void increment_quic_cid_drop_no_real ()
{
    __u32 quic_drop_stats_key = MAX_VIPS + QUIC_CID_DROP_STATS;
    struct lb_stats *quic_drop = bpf_map_lookup_elem (&stats, &quic_drop_stats_key);
    if (!quic_drop) {
        return;
    }
    quic_drop->v1 += 1;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/katran/balancer_kern.c" funcheader="static inline void increment_quic_cid_drop_real_0 ()" startline="470" endline="478">
static inline void increment_quic_cid_drop_real_0 ()
{
    __u32 quic_drop_stats_key = MAX_VIPS + QUIC_CID_DROP_STATS;
    struct lb_stats *quic_drop = bpf_map_lookup_elem (&stats, &quic_drop_stats_key);
    if (!quic_drop) {
        return;
    }
    quic_drop->v2 += 1;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/katran/balancer_kern.c" funcheader="static inline int process_packet (struct xdp_md *xdp, __u64 off, bool is_ipv6)" startline="480" endline="791">
static inline int process_packet (struct xdp_md *xdp, __u64 off, bool is_ipv6)
{
    void *data = (void *) (long) xdp->data;
    void *data_end = (void *) (long) xdp->data_end;
    struct ctl_value *cval;
    struct real_definition *dst = NULL;
    struct packet_description pckt = {}
    ;
    struct vip_definition vip = {}
    ;
    struct vip_meta *vip_info;
    struct lb_stats *data_stats;
    __u64 iph_len;
    __u8 protocol;
    __u16 original_sport;
    int action;
    __u32 vip_num;
    __u32 mac_addr_pos = 0;
    __u16 pkt_bytes;
    action = process_l3_headers (& pckt, & protocol, off, & pkt_bytes, data, data_end, is_ipv6);
    if (action >= 0) {
        return action;
    }
    protocol = pckt.flow.proto;

#ifdef INLINE_DECAP_IPIP
    if (protocol == IPPROTO_IPIP) {
        bool pass = true;
        action = check_decap_dst (& pckt, is_ipv6, & pass);
        if (action >= 0) {
            return action;
        }
        return process_encaped_ipip_pckt (&data, &data_end, xdp, &is_ipv6, &protocol, pass);
    }
    else if (protocol == IPPROTO_IPV6) {
        bool pass = true;
        action = check_decap_dst (& pckt, is_ipv6, & pass);
        if (action >= 0) {
            return action;
        }
        return process_encaped_ipip_pckt (&data, &data_end, xdp, &is_ipv6, &protocol, pass);
    }

#endif // INLINE_DECAP_IPIP
    if (protocol == IPPROTO_TCP) {
        if (!parse_tcp (data, data_end, is_ipv6, &pckt)) {
            return XDP_DROP;
        }
    }
    else if (protocol == IPPROTO_UDP) {
        if (!parse_udp (data, data_end, is_ipv6, &pckt)) {
            return XDP_DROP;
        }

#ifdef INLINE_DECAP_GUE
        if (pckt.flow.port16[1] == bpf_htons (GUE_DPORT)) {
            bool pass = true;
            action = check_decap_dst (& pckt, is_ipv6, & pass);
            if (action >= 0) {
                return action;
            }
            return process_encaped_gue_pckt (&data, &data_end, xdp, is_ipv6, pass);
        }

#endif // of INLINE_DECAP_GUE
    }
    else {
        return XDP_PASS;
    }
    if (is_ipv6) {
        memcpy (vip.vipv6, pckt.flow.dstv6, 16);
    }
    else {
        vip.vip = pckt.flow.dst;
    }
    vip.port = pckt.flow.port16[1];
    vip.proto = pckt.flow.proto;
    vip_info = bpf_map_lookup_elem (& vip_map, & vip);
    if (!vip_info) {
        vip.port = 0;
        vip_info = bpf_map_lookup_elem (& vip_map, & vip);
        if (!vip_info) {
            return XDP_PASS;
        }
        if (!(vip_info->flags & F_HASH_DPORT_ONLY)) {
            pckt.flow.port16[1] = 0;
        }
    }
    if (data_end - data > MAX_PCKT_SIZE) {
        REPORT_PACKET_TOOBIG (xdp, data, data_end - data, false);

#ifdef ICMP_TOOBIG_GENERATION
        __u32 stats_key = MAX_VIPS + ICMP_TOOBIG_CNTRS;
        data_stats = bpf_map_lookup_elem (& stats, & stats_key);
        if (!data_stats) {
            return XDP_DROP;
        }
        if (is_ipv6) {
            data_stats->v2 += 1;
        }
        else {
            data_stats->v1 += 1;
        }
        return send_icmp_too_big (xdp, is_ipv6, data_end - data);

#else
        return XDP_DROP;

#endif
    }
    __u32 stats_key = MAX_VIPS + LRU_CNTRS;
    data_stats = bpf_map_lookup_elem (& stats, & stats_key);
    if (!data_stats) {
        return XDP_DROP;
    }
    data_stats->v1 += 1;
    if ((vip_info->flags & F_QUIC_VIP)) {
        __u32 quic_stats_key = MAX_VIPS + QUIC_ROUTE_STATS;
        struct lb_stats *quic_stats = bpf_map_lookup_elem (&stats, &quic_stats_key);
        if (!quic_stats) {
            return XDP_DROP;
        }
        int real_index;
        real_index = parse_quic (data, data_end, is_ipv6, & pckt);
        if (real_index > 0) {
            increment_quic_cid_version_stats (real_index);
            __u32 key = real_index;
            __u32 *real_pos = bpf_map_lookup_elem (&server_id_map, &key);
            if (real_pos) {
                key = *real_pos;
                if (key == 0) {
                    increment_quic_cid_drop_real_0 ();
                    quic_stats->v1 += 1;
                }
                else {
                    pckt.real_index = key;
                    dst = bpf_map_lookup_elem (& reals, & key);
                    if (!dst) {
                        increment_quic_cid_drop_no_real ();
                        REPORT_QUIC_PACKET_DROP_NO_REAL (xdp, data, data_end - data, false);
                        return XDP_DROP;
                    }
                    quic_stats->v2 += 1;
                }
            }
            else {
                quic_stats->v1 += 1;
            }
        }
        else {
            quic_stats->v1 += 1;
        }
    }
    original_sport = pckt.flow.port16[0];
    if (!dst) {
        if ((vip_info->flags & F_HASH_NO_SRC_PORT)) {
            pckt.flow.port16[0] = 0;
        }
        __u32 cpu_num = bpf_get_smp_processor_id ();
        void *lru_map = bpf_map_lookup_elem (&lru_mapping, &cpu_num);
        if (!lru_map) {
            lru_map = &fallback_cache;
            __u32 lru_stats_key = MAX_VIPS + FALLBACK_LRU_CNTR;
            struct lb_stats *lru_stats = bpf_map_lookup_elem (&stats, &lru_stats_key);
            if (!lru_stats) {
                return XDP_DROP;
            }
            lru_stats->v1 += 1;
        }

#ifdef TCP_SERVER_ID_ROUTING
        if (pckt.flow.proto == IPPROTO_TCP && !(pckt.flags & F_SYN_SET)) {
            __u32 routing_stats_key = MAX_VIPS + TCP_SERVER_ID_ROUTE_STATS;
            struct lb_stats *routing_stats = bpf_map_lookup_elem (&stats, &routing_stats_key);
            if (!routing_stats) {
                return XDP_DROP;
            }
            if (tcp_hdr_opt_lookup (xdp, is_ipv6, &dst, &pckt, vip_info->flags & F_LRU_BYPASS, lru_map) == FURTHER_PROCESSING) {
                routing_stats->v1 += 1;
            }
            else {
                routing_stats->v2 += 1;
            }
        }

#endif // TCP_SERVER_ID_ROUTING
        if (!dst && !(pckt.flags & F_SYN_SET) && !(vip_info->flags & F_LRU_BYPASS)) {
            connection_table_lookup (&dst, &pckt, lru_map, false);
        }

#ifdef GLOBAL_LRU_LOOKUP
        if (!dst && !(pckt.flags & F_SYN_SET) && vip_info->flags & F_GLOBAL_LRU) {
            int global_lru_lookup_result = perform_global_lru_lookup (& dst, & pckt, cpu_num, vip_info, is_ipv6);
            if (global_lru_lookup_result >= 0) {
                return global_lru_lookup_result;
            }
        }

#endif // GLOBAL_LRU_LOOKUP
        if (!dst) {
            if (pckt.flow.proto == IPPROTO_TCP) {
                __u32 lru_stats_key = MAX_VIPS + LRU_MISS_CNTR;
                struct lb_stats *lru_stats = bpf_map_lookup_elem (&stats, &lru_stats_key);
                if (!lru_stats) {
                    return XDP_DROP;
                }
                if (pckt.flags & F_SYN_SET) {
                    lru_stats->v1 += 1;
                }
                else {
                    REPORT_TCP_NONSYN_LRUMISS (xdp, data, data_end - data, false);
                    lru_stats->v2 += 1;
                }
            }
            if (!get_packet_dst (&dst, &pckt, vip_info, is_ipv6, lru_map)) {
                return XDP_DROP;
            }
            data_stats->v2 += 1;
        }
    }
    cval = bpf_map_lookup_elem (& ctl_array, & mac_addr_pos);
    if (!cval) {
        return XDP_DROP;
    }
    vip_num = vip_info->vip_num;
    data_stats = bpf_map_lookup_elem (& stats, & vip_num);
    if (!data_stats) {
        return XDP_DROP;
    }
    data_stats->v1 += 1;
    data_stats->v2 += pkt_bytes;
    data_stats = bpf_map_lookup_elem (& reals_stats, & pckt.real_index);
    if (!data_stats) {
        return XDP_DROP;
    }
    data_stats->v1 += 1;
    data_stats->v2 += pkt_bytes;

#ifdef LOCAL_DELIVERY_OPTIMIZATION
    if ((vip_info->flags & F_LOCAL_VIP) && (dst->flags & F_LOCAL_REAL)) {
        return XDP_PASS;
    }

#endif
    pckt.flow.port16[0] = original_sport;
    if (dst->flags & F_IPV6) {
        if (!PCKT_ENCAP_V6(xdp, cval, is_ipv6, &pckt, dst, pkt_bytes)) {
            return XDP_DROP;
        }
    }
    else {
        if (!PCKT_ENCAP_V4(xdp, cval, &pckt, dst, pkt_bytes)) {
            return XDP_DROP;
        }
    }
    return XDP_TX;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/katran/balancer_kern.c" funcheader="int balancer_ingress (struct xdp_md *ctx)" startline="794" endline="817">
int balancer_ingress (struct xdp_md *ctx)
{
    void *data = (void *) (long) ctx->data;
    void *data_end = (void *) (long) ctx->data_end;
    struct ethhdr *eth = data;
    __u32 eth_proto;
    __u32 nh_off;
    nh_off = sizeof (struct ethhdr);
    if (data + nh_off > data_end) {
        return XDP_DROP;
    }
    eth_proto = eth->h_proto;
    if (eth_proto == BE_ETH_P_IP) {
        return process_packet (ctx, nh_off, false);
    }
    else if (eth_proto == BE_ETH_P_IPV6) {
        return process_packet (ctx, nh_off, true);
    }
    else {
        return XDP_PASS;
    }
}
</source>
<source file="/home/palani/github/opened_extraction/examples/katran/balancer_kern.c" funcheader="static inline __u32 get_packet_hash (struct packet_description *pckt, bool hash_16bytes)" startline="818" endline="827">
static inline __u32 get_packet_hash (struct packet_description *pckt, bool hash_16bytes)
{
    if (hash_16bytes) {
        return jhash_2words (jhash (pckt->flow.srcv6, 16, INIT_JHASH_SEED_V6), pckt->flow.ports, INIT_JHASH_SEED);
    }
    else {
        return jhash_2words (pckt->flow.src, pckt->flow.ports, INIT_JHASH_SEED);
    }
}
</source>
</doc>
