<?xml version="1.0"?>
<doc>
<source file="/home/sayandes/opened_extraction/examples/katran/pckt_parsing.h" funcheader="static inline __u64 calc_offset (bool is_ipv6, bool is_icmp)" startline="58" endline="74">
static inline __u64 calc_offset (bool is_ipv6, bool is_icmp)
{
    __u64 off = sizeof (struct ethhdr);
    if (is_ipv6) {
        off += sizeof (struct ipv6hdr);
        if (is_icmp) {
            off += (sizeof (struct icmp6hdr) + sizeof (struct ipv6hdr));
        }
    }
    else {
        off += sizeof (struct iphdr);
        if (is_icmp) {
            off += (sizeof (struct icmphdr) + sizeof (struct iphdr));
        }
    }
    return off;
}
</source>
<source file="/home/sayandes/opened_extraction/examples/katran/pckt_parsing.h" funcheader="static inline bool parse_udp (void *data, void *data_end, bool is_ipv6, struct packet_description *pckt)" startline="76" endline="100">
static inline bool parse_udp (void *data, void *data_end, bool is_ipv6, struct packet_description *pckt)
{
    bool is_icmp = !((pckt->flags & F_ICMP) == 0);
    __u64 off = calc_offset (is_ipv6, is_icmp);
    struct udphdr *udp;
    udp = data + off;
    if (udp + 1 > data_end) {
        return false;
    }
    if (!is_icmp) {
        pckt->flow.port16[0] = udp->source;
        pckt->flow.port16[1] = udp->dest;
    }
    else {
        pckt->flow.port16[0] = udp->dest;
        pckt->flow.port16[1] = udp->source;
    }
    return true;
}
</source>
<source file="/home/sayandes/opened_extraction/examples/katran/pckt_parsing.h" funcheader="static inline bool parse_tcp (void *data, void *data_end, bool is_ipv6, struct packet_description *pckt)" startline="102" endline="130">
static inline bool parse_tcp (void *data, void *data_end, bool is_ipv6, struct packet_description *pckt)
{
    bool is_icmp = !((pckt->flags & F_ICMP) == 0);
    __u64 off = calc_offset (is_ipv6, is_icmp);
    struct tcphdr *tcp;
    tcp = data + off;
    if (tcp + 1 > data_end) {
        return false;
    }
    if (tcp->syn) {
        pckt->flags |= F_SYN_SET;
    }
    if (!is_icmp) {
        pckt->flow.port16[0] = tcp->source;
        pckt->flow.port16[1] = tcp->dest;
    }
    else {
        pckt->flow.port16[0] = tcp->dest;
        pckt->flow.port16[1] = tcp->source;
    }
    return true;
}
</source>
<source file="/home/sayandes/opened_extraction/examples/katran/pckt_parsing.h" funcheader="int parse_hdr_opt (const struct xdp_md *xdp, struct hdr_opt_state *state)" startline="144" endline="197">
int parse_hdr_opt (const struct xdp_md *xdp, struct hdr_opt_state *state)
{
    const void *data = (void *) (long) xdp->data;
    const void *data_end = (void *) (long) xdp->data_end;
    __u8 *tcp_opt, kind, hdr_len;
    if (!state) {
        return -1;
    }
    tcp_opt = (__u8 *) (data + state->byte_offset);
    if (tcp_opt + 1 > data_end) {
        return -1;
    }
    kind = tcp_opt[0];
    if (kind == TCP_OPT_EOL) {
        return -1;
    }
    if (kind == TCP_OPT_NOP) {
        state->hdr_bytes_remaining--;
        state->byte_offset++;
        return 0;
    }
    if (state->hdr_bytes_remaining < 2 || tcp_opt + sizeof (__u8) + sizeof (__u8) > data_end) {
        return -1;
    }
    hdr_len = tcp_opt[1];
    if (hdr_len > state->hdr_bytes_remaining) {
        return -1;
    }
    if (kind == TCP_HDR_OPT_KIND_TPR) {
        if (hdr_len != TCP_HDR_OPT_LEN_TPR) {
            return -1;
        }
        if (tcp_opt + TCP_HDR_OPT_LEN_TPR > data_end) {
            return -1;
        }
        state->server_id = *(__u32*) &tcp_opt[2];
        return 1;
    }
    state->hdr_bytes_remaining -= hdr_len;
    state->byte_offset += hdr_len;
    return 0;
}
</source>
<source file="/home/sayandes/opened_extraction/examples/katran/pckt_parsing.h" funcheader="static inline int tcp_hdr_opt_lookup (const struct xdp_md *xdp, bool is_ipv6, struct real_definition **real, struct packet_description *pckt, bool bypass_lru, void *lru_map)" startline="199" endline="273">
static inline int tcp_hdr_opt_lookup (const struct xdp_md *xdp, bool is_ipv6, struct real_definition **real, struct packet_description *pckt, bool bypass_lru, void *lru_map)
{
    const void *data = (void *) (long) xdp->data;
    const void *data_end = (void *) (long) xdp->data_end;
    struct real_pos_lru *dst_lru;
    struct tcphdr *tcp_hdr;
    __u8 tcp_hdr_opt_len = 0;
    __u64 tcp_offset = 0;
    struct hdr_opt_state opt_state = {}
    ;
    int err = 0;
    tcp_offset = calc_offset (is_ipv6, false);
    tcp_hdr = (struct tcphdr *) (data + tcp_offset);
    if (tcp_hdr + 1 > data_end) {
        return FURTHER_PROCESSING;
    }
    tcp_hdr_opt_len = (tcp_hdr->doff * 4) - sizeof (struct tcphdr);
    if (tcp_hdr_opt_len < TCP_HDR_OPT_LEN_TPR) {
        return FURTHER_PROCESSING;
    }
    opt_state.hdr_bytes_remaining = tcp_hdr_opt_len;
    opt_state.byte_offset = sizeof (struct tcphdr) + tcp_offset;

#if LINUX_VERSION_CODE < KERNEL_VERSION(5, 3, 0) || \
    !defined TCP_HDR_OPT_SKIP_UNROLL_LOOP

#pragma clang loop unroll(full)

#endif
    for (int i = 0; i < TCP_HDR_OPT_MAX_OPT_CHECKS; i++) {
        err = parse_hdr_opt (xdp, & opt_state);
        if (err || !opt_state.hdr_bytes_remaining) {
            break;
        }
    }
    if (!opt_state.server_id) {
        return FURTHER_PROCESSING;
    }
    __u32 key = opt_state.server_id;
    __u32 *real_pos = bpf_map_lookup_elem (&server_id_map, &key);
    if (!real_pos) {
        return FURTHER_PROCESSING;
    }
    key = *real_pos;
    if (key == 0) {
        return FURTHER_PROCESSING;
    }
    pckt->real_index = key;
    *real = bpf_map_lookup_elem (&reals, &key);
    if (!(*real)) {
        return FURTHER_PROCESSING;
    }
    if (!bypass_lru) {
        struct real_pos_lru *dst_lru = bpf_map_lookup_elem (lru_map, &pckt->flow);
        if (dst_lru) {
            dst_lru->pos = key;
            return 0;
        }
        struct real_pos_lru new_dst_lru = {}
        ;
        new_dst_lru.pos = key;
        bpf_map_update_elem (lru_map, &pckt->flow, &new_dst_lru, BPF_ANY);
    }
    return 0;
}
</source>
<source file="/home/sayandes/opened_extraction/examples/katran/pckt_parsing.h" funcheader="static inline int parse_quic (void *data, void *data_end, bool is_ipv6, struct packet_description *pckt)" startline="276" endline="335">
static inline int parse_quic (void *data, void *data_end, bool is_ipv6, struct packet_description *pckt)
{
    bool is_icmp = (pckt->flags & F_ICMP);
    __u64 off = calc_offset (is_ipv6, is_icmp);
    if ((data + off + sizeof (struct udphdr) + sizeof (__u8)) > data_end) {
        return FURTHER_PROCESSING;
    }
    __u8 *quic_data = data + off + sizeof (struct udphdr);
    __u8 *pkt_type = quic_data;
    __u8 *connId = NULL;
    if ((*pkt_type & QUIC_LONG_HEADER) == QUIC_LONG_HEADER) {
        if (quic_data + sizeof (struct quic_long_header) > data_end) {
            return FURTHER_PROCESSING;
        }
        if ((*pkt_type & QUIC_PACKET_TYPE_MASK) < QUIC_HANDSHAKE) {
            return FURTHER_PROCESSING;
        }
        struct quic_long_header *long_header = (struct quic_long_header *) quic_data;
        if (long_header->conn_id_lens < QUIC_MIN_CONNID_LEN) {
            return FURTHER_PROCESSING;
        }
        connId = long_header->dst_connection_id;
    }
    else {
        if (quic_data + sizeof (struct quic_short_header) > data_end) {
            return FURTHER_PROCESSING;
        }
        connId = ((struct quic_short_header *) quic_data)->connection_id;
    }
    if (!connId) {
        return FURTHER_PROCESSING;
    }
    __u8 connIdVersion = (connId[0] >> 6);
    if (connIdVersion == QUIC_CONNID_VERSION_V1) {
        return ((connId[0] & 0x3F) << 10) | (connId[1] << 2) | (connId[2] >> 6);
    }
    else if (connIdVersion == QUIC_CONNID_VERSION_V2) {
        __u32 cid = (connId[1] << 16) | (connId[2] << 8) | (connId[3]);
        return cid;
    }
    return FURTHER_PROCESSING;
}
</source>
</doc>
