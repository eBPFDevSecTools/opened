{"struct {\n    __uint (type, BPF_MAP_TYPE_PROG_ARRAY);\n    __type (key, __u32);\n    __type (value, __u32);\n    __uint (max_entries, ROOT_ARRAY_SIZE);\n} root_array SEC (\".maps\");\n\n": [{"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_xdp_root.c.out", "startLine": "8", "endLine": "14"}], "struct hc_real_definition {\n    union {\n        __be32 daddr;\n        __be32 v6daddr [4];\n    }\n    ;\n    __u8 flags;\n}\n": [{"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_healthchecking_ipip.c.out", "startLine": "40", "endLine": "47"}, {"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_healthchecking_structs.h.out", "startLine": "6", "endLine": "13"}], "struct hc_stats {\n    __u64 pckts_processed;\n    __u64 pckts_dropped;\n    __u64 pckts_skipped;\n    __u64 pckts_too_big;\n}\n": [{"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_healthchecking_ipip.c.out", "startLine": "52", "endLine": "57"}, {"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_healthchecking_structs.h.out", "startLine": "18", "endLine": "23"}], "struct {\n    __uint (type, BPF_MAP_TYPE_ARRAY);\n    __type (key, __u32);\n    __type (value, __u32);\n    __uint (max_entries, CTRL_MAP_SIZE);\n} hc_ctrl_map SEC (\".maps\");\n\n": [{"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_healthchecking_ipip.c.out", "startLine": "62", "endLine": "68"}, {"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_healthchecking_maps.h.out", "startLine": "16", "endLine": "22"}], "struct {\n    __uint (type, BPF_MAP_TYPE_HASH);\n    __type (key, __u32);\n    __type (value, struct hc_real_definition);\n    __uint (max_entries, REALS_MAP_SIZE);\n} hc_reals_map SEC (\".maps\");\n\n": [{"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_healthchecking_ipip.c.out", "startLine": "72", "endLine": "78"}], "struct {\n    __uint (type, BPF_MAP_TYPE_ARRAY);\n    __type (key, __u32);\n    __type (value, __u32);\n    __uint (max_entries, CTRL_ARRAY_SIZE);\n} ctl_array SEC (\".maps\");\n\n": [{"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_xdp_pktcntr.c.out", "startLine": "24", "endLine": "30"}], "struct quic_long_header {\n    __u8 flags;\n    __u32 version;\n    __u8 conn_id_lens;\n    __u8 dst_connection_id [QUIC_MIN_CONNID_LEN];\n}  __attribute__ ((__packed__))\n": [{"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_pckt_parsing.h.out", "startLine": "34", "endLine": "39"}], "struct quic_short_header {\n    __u8 flags;\n    __u8 connection_id [QUIC_MIN_CONNID_LEN];\n}  __attribute__ ((__packed__))\n": [{"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_pckt_parsing.h.out", "startLine": "44", "endLine": "47"}], "struct hdr_opt_state {\n    __u32 server_id;\n    __u8 byte_offset;\n    __u8 hdr_bytes_remaining;\n}\n": [{"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_pckt_parsing.h.out", "startLine": "118", "endLine": "122"}], "struct {\n    __uint (type, BPF_MAP_TYPE_ARRAY);\n    __type (key, __u32);\n    __type (value, struct ctl_value);\n    __uint (max_entries, CTL_MAP_SIZE);\n    __uint (map_flags, NO_FLAGS);\n} ctl_array SEC (\".maps\");\n\n": [{"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_control_data_maps.h.out", "startLine": "14", "endLine": "21"}], "struct {\n    __uint (type, BPF_MAP_TYPE_PERF_EVENT_ARRAY);\n    __type (key, int);\n    __type (value, __u32);\n    __uint (max_entries, MAX_SUPPORTED_CPUS);\n    __uint (map_flags, NO_FLAGS);\n} event_pipe SEC (\".maps\");\n\n": [{"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_control_data_maps.h.out", "startLine": "27", "endLine": "34"}], "struct {\n    __uint (type, BPF_MAP_TYPE_HASH);\n    __type (key, struct address);\n    __type (value, __u32);\n    __uint (max_entries, MAX_VIPS);\n    __uint (map_flags, NO_FLAGS);\n} decap_dst SEC (\".maps\");\n\n": [{"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_control_data_maps.h.out", "startLine": "42", "endLine": "49"}], "struct {\n    __uint (type, BPF_MAP_TYPE_PROG_ARRAY);\n    __type (key, __u32);\n    __type (value, __u32);\n    __uint (max_entries, SUBPROGRAMS_ARRAY_SIZE);\n} subprograms SEC (\".maps\");\n\n": [{"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_control_data_maps.h.out", "startLine": "53", "endLine": "59"}], "struct {\n    __uint (type, BPF_MAP_TYPE_ARRAY);\n    __type (key, __u32);\n    __type (value, struct real_definition);\n    __uint (max_entries, 2);\n    __uint (map_flags, NO_FLAGS);\n} pckt_srcs SEC (\".maps\");\n\n": [{"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_control_data_maps.h.out", "startLine": "67", "endLine": "74"}], "struct {\n    __uint (type, BPF_MAP_TYPE_HASH);\n    __type (key, struct vip_definition);\n    __type (value, struct vip_meta);\n    __uint (max_entries, MAX_VIPS);\n    __uint (map_flags, NO_FLAGS);\n} vip_map SEC (\".maps\");\n\n": [{"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_balancer_maps.h.out", "startLine": "14", "endLine": "21"}], "struct {\n    __uint (type, BPF_MAP_TYPE_LRU_HASH);\n    __type (key, struct flow_key);\n    __type (value, struct real_pos_lru);\n    __uint (max_entries, DEFAULT_LRU_SIZE);\n    __uint (map_flags, NO_FLAGS);\n} fallback_cache SEC (\".maps\");\n\n": [{"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_balancer_maps.h.out", "startLine": "25", "endLine": "32"}], "struct {\n    __uint (type, BPF_MAP_TYPE_ARRAY);\n    __type (key, __u32);\n    __type (value, __u32);\n    __uint (max_entries, CH_RINGS_SIZE);\n    __uint (map_flags, NO_FLAGS);\n} ch_rings SEC (\".maps\");\n\n": [{"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_balancer_maps.h.out", "startLine": "36", "endLine": "43"}], "struct {\n    __uint (type, BPF_MAP_TYPE_ARRAY);\n    __type (key, __u32);\n    __type (value, struct real_definition);\n    __uint (max_entries, MAX_REALS);\n    __uint (map_flags, NO_FLAGS);\n} reals SEC (\".maps\");\n\n": [{"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_balancer_maps.h.out", "startLine": "47", "endLine": "54"}], "struct {\n    __uint (type, BPF_MAP_TYPE_PERCPU_ARRAY);\n    __type (key, __u32);\n    __type (value, struct lb_stats);\n    __uint (max_entries, MAX_REALS);\n    __uint (map_flags, NO_FLAGS);\n} reals_stats SEC (\".maps\");\n\n": [{"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_balancer_maps.h.out", "startLine": "58", "endLine": "65"}], "struct {\n    __uint (type, BPF_MAP_TYPE_PERCPU_ARRAY);\n    __type (key, __u32);\n    __type (value, struct lb_stats);\n    __uint (max_entries, STATS_MAP_SIZE);\n    __uint (map_flags, NO_FLAGS);\n} stats SEC (\".maps\");\n\n": [{"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_balancer_maps.h.out", "startLine": "69", "endLine": "76"}], "struct {\n    __uint (type, BPF_MAP_TYPE_ARRAY);\n    __type (key, __u32);\n    __type (value, __u32);\n    __uint (max_entries, MAX_QUIC_REALS);\n    __uint (map_flags, NO_FLAGS);\n} server_id_map SEC (\".maps\");\n\n": [{"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_balancer_maps.h.out", "startLine": "80", "endLine": "87"}], "struct {\n    __uint (type, BPF_MAP_TYPE_LPM_TRIE);\n    __type (key, struct v4_lpm_key);\n    __type (value, __u32);\n    __uint (max_entries, MAX_LPM_SRC);\n    __uint (map_flags, BPF_F_NO_PREALLOC);\n} lpm_src_v4 SEC (\".maps\");\n\n": [{"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_balancer_maps.h.out", "startLine": "93", "endLine": "100"}], "struct {\n    __uint (type, BPF_MAP_TYPE_LPM_TRIE);\n    __type (key, struct v6_lpm_key);\n    __type (value, __u32);\n    __uint (max_entries, MAX_LPM_SRC);\n    __uint (map_flags, BPF_F_NO_PREALLOC);\n} lpm_src_v6 SEC (\".maps\");\n\n": [{"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_balancer_maps.h.out", "startLine": "104", "endLine": "111"}], "struct {\n    __uint (type, BPF_MAP_TYPE_ARRAY_OF_MAPS);\n    __uint (key_size, sizeof (__u32));\n    __uint (value_size, sizeof (__u32));\n    __uint (max_entries, MAX_SUPPORTED_CPUS);\n    __uint (map_flags, NO_FLAGS);\n} global_lru_maps SEC (\".maps\");\n\n": [{"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_balancer_maps.h.out", "startLine": "119", "endLine": "126"}], "struct {\n    __uint (type, BPF_MAP_TYPE_LRU_HASH);\n    __type (key, struct flow_key);\n    __type (value, __u32);\n    __uint (max_entries, DEFAULT_GLOBAL_LRU_SIZE);\n    __uint (map_flags, NO_FLAGS);\n} fallback_glru SEC (\".maps\");\n\n": [{"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_balancer_maps.h.out", "startLine": "130", "endLine": "137"}], "struct bpf_insn {\n    __u8 code;\n    __u8 dst_reg : 4;\n    __u8 src_reg : 4;\n    __s16 off;\n    __s32 imm;\n}\n": [{"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_bpf.h.out", "startLine": "54", "endLine": "60"}], "struct bpf_lpm_trie_key {\n    __u32 prefixlen;\n    __u8 data [0];\n}\n": [{"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_bpf.h.out", "startLine": "65", "endLine": "68"}], "struct bpf_cgroup_storage_key {\n    __u64 cgroup_inode_id;\n    __u32 attach_type;\n}\n": [{"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_bpf.h.out", "startLine": "73", "endLine": "76"}], "struct bpf_stack_build_id {\n    __s32 status;\n    unsigned char build_id [BPF_BUILD_ID_SIZE];\n    union {\n        __u64 offset;\n        __u64 ip;\n    }\n    ;\n}\n": [{"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_bpf.h.out", "startLine": "145", "endLine": "153"}], "union bpf_attr {\n    struct {\n        __u32 map_type;\n        __u32 key_size;\n        __u32 value_size;\n        __u32 max_entries;\n        __u32 map_flags;\n        __u32 inner_map_fd;\n        __u32 numa_node;\n        char map_name [BPF_OBJ_NAME_LEN];\n        __u32 map_ifindex;\n        __u32 btf_fd;\n        __u32 btf_key_type_id;\n        __u32 btf_value_type_id;\n    }\n    ;\n    struct {\n        __u32 map_fd;\n        __aligned_u64 key;\n        union {\n            __aligned_u64 value;\n            __aligned_u64 next_key;\n        }\n        ;\n        __u64 flags;\n    }\n    ;\n    struct {\n        __u32 prog_type;\n        __u32 insn_cnt;\n        __aligned_u64 insns;\n        __aligned_u64 license;\n        __u32 log_level;\n        __u32 log_size;\n        __aligned_u64 log_buf;\n        __u32 kern_version;\n        __u32 prog_flags;\n        char prog_name [BPF_OBJ_NAME_LEN];\n        __u32 prog_ifindex;\n        __u32 expected_attach_type;\n        __u32 prog_btf_fd;\n        __u32 func_info_rec_size;\n        __aligned_u64 func_info;\n        __u32 func_info_cnt;\n        __u32 line_info_rec_size;\n        __aligned_u64 line_info;\n        __u32 line_info_cnt;\n        __u32 attach_btf_id;\n        __u32 attach_prog_fd;\n    }\n    ;\n    struct {\n        __aligned_u64 pathname;\n        __u32 bpf_fd;\n        __u32 file_flags;\n    }\n    ;\n    struct {\n        __u32 target_fd;\n        __u32 attach_bpf_fd;\n        __u32 attach_type;\n        __u32 attach_flags;\n    }\n    ;\n    struct {\n        __u32 prog_fd;\n        __u32 retval;\n        __u32 data_size_in;\n        __u32 data_size_out;\n        __aligned_u64 data_in;\n        __aligned_u64 data_out;\n        __u32 repeat;\n        __u32 duration;\n        __u32 ctx_size_in;\n        __u32 ctx_size_out;\n        __aligned_u64 ctx_in;\n        __aligned_u64 ctx_out;\n    } test;\n\n    struct {\n        union {\n            __u32 start_id;\n            __u32 prog_id;\n            __u32 map_id;\n            __u32 btf_id;\n        }\n        ;\n        __u32 next_id;\n        __u32 open_flags;\n    }\n    ;\n    struct {\n        __u32 bpf_fd;\n        __u32 info_len;\n        __aligned_u64 info;\n    } info;\n\n    struct {\n        __u32 target_fd;\n        __u32 attach_type;\n        __u32 query_flags;\n        __u32 attach_flags;\n        __aligned_u64 prog_ids;\n        __u32 prog_cnt;\n    } query;\n\n    struct {\n        __u64 name;\n        __u32 prog_fd;\n    } raw_tracepoint;\n\n    struct {\n        __aligned_u64 btf;\n        __aligned_u64 btf_log_buf;\n        __u32 btf_size;\n        __u32 btf_log_size;\n        __u32 btf_log_level;\n    }\n    ;\n    struct {\n        __u32 pid;\n        __u32 fd;\n        __u32 flags;\n        __u32 buf_len;\n        __aligned_u64 buf;\n        __u32 prog_id;\n        __u32 fd_type;\n        __u64 probe_offset;\n        __u64 probe_addr;\n    } task_fd_query;\n\n}  __attribute__ ((aligned (8)))\n": [{"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_bpf.h.out", "startLine": "158", "endLine": "289"}], "struct  __sk_buff {\n    __u32 len;\n    __u32 pkt_type;\n    __u32 mark;\n    __u32 queue_mapping;\n    __u32 protocol;\n    __u32 vlan_present;\n    __u32 vlan_tci;\n    __u32 vlan_proto;\n    __u32 priority;\n    __u32 ingress_ifindex;\n    __u32 ifindex;\n    __u32 tc_index;\n    __u32 cb [5];\n    __u32 hash;\n    __u32 tc_classid;\n    __u32 data;\n    __u32 data_end;\n    __u32 napi_id;\n    __u32 family;\n    __u32 remote_ip4;\n    __u32 local_ip4;\n    __u32 remote_ip6 [4];\n    __u32 local_ip6 [4];\n    __u32 remote_port;\n    __u32 local_port;\n    __u32 data_meta;\n    __bpf_md_ptr (struct bpf_flow_keys *, flow_keys);\n    __u64 tstamp;\n    __u32 wire_len;\n    __u32 gso_segs;\n    __bpf_md_ptr (struct bpf_sock *, sk);\n}\n": [{"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_bpf.h.out", "startLine": "411", "endLine": "443"}], "struct bpf_tunnel_key {\n    __u32 tunnel_id;\n    union {\n        __u32 remote_ipv4;\n        __u32 remote_ipv6 [4];\n    }\n    ;\n    __u8 tunnel_tos;\n    __u8 tunnel_ttl;\n    __u16 tunnel_ext;\n    __u32 tunnel_label;\n}\n": [{"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_bpf.h.out", "startLine": "448", "endLine": "459"}], "struct bpf_xfrm_state {\n    __u32 reqid;\n    __u32 spi;\n    __u16 family;\n    __u16 ext;\n    union {\n        __u32 remote_ipv4;\n        __u32 remote_ipv6 [4];\n    }\n    ;\n}\n": [{"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_bpf.h.out", "startLine": "464", "endLine": "474"}], "struct bpf_sock {\n    __u32 bound_dev_if;\n    __u32 family;\n    __u32 type;\n    __u32 protocol;\n    __u32 mark;\n    __u32 priority;\n    __u32 src_ip4;\n    __u32 src_ip6 [4];\n    __u32 src_port;\n    __u32 dst_port;\n    __u32 dst_ip4;\n    __u32 dst_ip6 [4];\n    __u32 state;\n}\n": [{"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_bpf.h.out", "startLine": "484", "endLine": "498"}], "struct bpf_tcp_sock {\n    __u32 snd_cwnd;\n    __u32 srtt_us;\n    __u32 rtt_min;\n    __u32 snd_ssthresh;\n    __u32 rcv_nxt;\n    __u32 snd_nxt;\n    __u32 snd_una;\n    __u32 mss_cache;\n    __u32 ecn_flags;\n    __u32 rate_delivered;\n    __u32 rate_interval_us;\n    __u32 packets_out;\n    __u32 retrans_out;\n    __u32 total_retrans;\n    __u32 segs_in;\n    __u32 data_segs_in;\n    __u32 segs_out;\n    __u32 data_segs_out;\n    __u32 lost_out;\n    __u32 sacked_out;\n    __u64 bytes_received;\n    __u64 bytes_acked;\n    __u32 dsack_dups;\n    __u32 delivered;\n    __u32 delivered_ce;\n    __u32 icsk_retransmits;\n}\n": [{"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_bpf.h.out", "startLine": "503", "endLine": "530"}], "struct bpf_sock_tuple {\n    union {\n        struct {\n            __be32 saddr;\n            __be32 daddr;\n            __be16 sport;\n            __be16 dport;\n        } ipv4;\n\n        struct {\n            __be32 saddr [4];\n            __be32 daddr [4];\n            __be16 sport;\n            __be16 dport;\n        } ipv6;\n\n    }\n    ;\n}\n": [{"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_bpf.h.out", "startLine": "535", "endLine": "553"}], "struct bpf_xdp_sock {\n    __u32 queue_id;\n}\n": [{"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_bpf.h.out", "startLine": "558", "endLine": "560"}], "struct xdp_md {\n    __u32 data;\n    __u32 data_end;\n    __u32 data_meta;\n    __u32 ingress_ifindex;\n    __u32 rx_queue_index;\n}\n": [{"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_bpf.h.out", "startLine": "569", "endLine": "575"}], "struct sk_msg_md {\n    __bpf_md_ptr (void *, data);\n    __bpf_md_ptr (void *, data_end);\n    __u32 family;\n    __u32 remote_ip4;\n    __u32 local_ip4;\n    __u32 remote_ip6 [4];\n    __u32 local_ip6 [4];\n    __u32 remote_port;\n    __u32 local_port;\n    __u32 size;\n}\n": [{"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_bpf.h.out", "startLine": "582", "endLine": "593"}], "struct sk_reuseport_md {\n    __bpf_md_ptr (void *, data);\n    __bpf_md_ptr (void *, data_end);\n    __u32 len;\n    __u32 eth_protocol;\n    __u32 ip_protocol;\n    __u32 bind_inany;\n    __u32 hash;\n}\n": [{"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_bpf.h.out", "startLine": "598", "endLine": "606"}], "struct bpf_prog_info {\n    __u32 type;\n    __u32 id;\n    __u8 tag [BPF_TAG_SIZE];\n    __u32 jited_prog_len;\n    __u32 xlated_prog_len;\n    __aligned_u64 jited_prog_insns;\n    __aligned_u64 xlated_prog_insns;\n    __u64 load_time;\n    __u32 created_by_uid;\n    __u32 nr_map_ids;\n    __aligned_u64 map_ids;\n    char name [BPF_OBJ_NAME_LEN];\n    __u32 ifindex;\n    __u32 gpl_compatible : 1;\n    __u32 : 31;\n    __u64 netns_dev;\n    __u64 netns_ino;\n    __u32 nr_jited_ksyms;\n    __u32 nr_jited_func_lens;\n    __aligned_u64 jited_ksyms;\n    __aligned_u64 jited_func_lens;\n    __u32 btf_id;\n    __u32 func_info_rec_size;\n    __aligned_u64 func_info;\n    __u32 nr_func_info;\n    __u32 nr_line_info;\n    __aligned_u64 line_info;\n    __aligned_u64 jited_line_info;\n    __u32 nr_jited_line_info;\n    __u32 line_info_rec_size;\n    __u32 jited_line_info_rec_size;\n    __u32 nr_prog_tags;\n    __aligned_u64 prog_tags;\n    __u64 run_time_ns;\n    __u64 run_cnt;\n}  __attribute__ ((aligned (8)))\n": [{"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_bpf.h.out", "startLine": "613", "endLine": "649"}], "struct bpf_map_info {\n    __u32 type;\n    __u32 id;\n    __u32 key_size;\n    __u32 value_size;\n    __u32 max_entries;\n    __u32 map_flags;\n    char name [BPF_OBJ_NAME_LEN];\n    __u32 ifindex;\n    __u32 : 32;\n    __u64 netns_dev;\n    __u64 netns_ino;\n    __u32 btf_id;\n    __u32 btf_key_type_id;\n    __u32 btf_value_type_id;\n}  __attribute__ ((aligned (8)))\n": [{"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_bpf.h.out", "startLine": "654", "endLine": "669"}], "struct bpf_btf_info {\n    __aligned_u64 btf;\n    __u32 btf_size;\n    __u32 id;\n}  __attribute__ ((aligned (8)))\n": [{"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_bpf.h.out", "startLine": "674", "endLine": "678"}], "struct bpf_sock_addr {\n    __u32 user_family;\n    __u32 user_ip4;\n    __u32 user_ip6 [4];\n    __u32 user_port;\n    __u32 family;\n    __u32 type;\n    __u32 protocol;\n    __u32 msg_src_ip4;\n    __u32 msg_src_ip6 [4];\n    __bpf_md_ptr (struct bpf_sock *, sk);\n}\n": [{"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_bpf.h.out", "startLine": "683", "endLine": "694"}], "struct bpf_sock_ops {\n    __u32 op;\n    union {\n        __u32 args [4];\n        __u32 reply;\n        __u32 replylong [4];\n    }\n    ;\n    __u32 family;\n    __u32 remote_ip4;\n    __u32 local_ip4;\n    __u32 remote_ip6 [4];\n    __u32 local_ip6 [4];\n    __u32 remote_port;\n    __u32 local_port;\n    __u32 is_fullsock;\n    __u32 snd_cwnd;\n    __u32 srtt_us;\n    __u32 bpf_sock_ops_cb_flags;\n    __u32 state;\n    __u32 rtt_min;\n    __u32 snd_ssthresh;\n    __u32 rcv_nxt;\n    __u32 snd_nxt;\n    __u32 snd_una;\n    __u32 mss_cache;\n    __u32 ecn_flags;\n    __u32 rate_delivered;\n    __u32 rate_interval_us;\n    __u32 packets_out;\n    __u32 retrans_out;\n    __u32 total_retrans;\n    __u32 segs_in;\n    __u32 data_segs_in;\n    __u32 segs_out;\n    __u32 data_segs_out;\n    __u32 lost_out;\n    __u32 sacked_out;\n    __u32 sk_txhash;\n    __u64 bytes_received;\n    __u64 bytes_acked;\n    __bpf_md_ptr (struct bpf_sock *, sk);\n}\n": [{"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_bpf.h.out", "startLine": "699", "endLine": "741"}], "struct bpf_perf_event_value {\n    __u64 counter;\n    __u64 enabled;\n    __u64 running;\n}\n": [{"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_bpf.h.out", "startLine": "766", "endLine": "770"}], "struct bpf_cgroup_dev_ctx {\n    __u32 access_type;\n    __u32 major;\n    __u32 minor;\n}\n": [{"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_bpf.h.out", "startLine": "785", "endLine": "789"}], "struct bpf_raw_tracepoint_args {\n    __u64 args [0];\n}\n": [{"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_bpf.h.out", "startLine": "794", "endLine": "796"}], "struct bpf_fib_lookup {\n    __u8 family;\n    __u8 l4_protocol;\n    __be16 sport;\n    __be16 dport;\n    __u16 tot_len;\n    __u32 ifindex;\n    union {\n        __u8 tos;\n        __be32 flowinfo;\n        __u32 rt_metric;\n    }\n    ;\n    union {\n        __be32 ipv4_src;\n        __u32 ipv6_src [4];\n    }\n    ;\n    union {\n        __be32 ipv4_dst;\n        __u32 ipv6_dst [4];\n    }\n    ;\n    __be16 h_vlan_proto;\n    __be16 h_vlan_TCI;\n    __u8 smac [6];\n    __u8 dmac [6];\n}\n": [{"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_bpf.h.out", "startLine": "806", "endLine": "833"}], "struct bpf_flow_keys {\n    __u16 nhoff;\n    __u16 thoff;\n    __u16 addr_proto;\n    __u8 is_frag;\n    __u8 is_first_frag;\n    __u8 is_encap;\n    __u8 ip_proto;\n    __be16 n_proto;\n    __be16 sport;\n    __be16 dport;\n    union {\n        struct {\n            __be32 ipv4_src;\n            __be32 ipv4_dst;\n        }\n        ;\n        struct {\n            __u32 ipv6_src [4];\n            __u32 ipv6_dst [4];\n        }\n        ;\n    }\n    ;\n    __u32 flags;\n    __be32 flow_label;\n}\n": [{"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_bpf.h.out", "startLine": "845", "endLine": "871"}], "struct bpf_func_info {\n    __u32 insn_off;\n    __u32 type_id;\n}\n": [{"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_bpf.h.out", "startLine": "876", "endLine": "879"}], "struct bpf_line_info {\n    __u32 insn_off;\n    __u32 file_name_off;\n    __u32 line_off;\n    __u32 line_col;\n}\n": [{"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_bpf.h.out", "startLine": "888", "endLine": "893"}], "struct bpf_spin_lock {\n    __u32 val;\n}\n": [{"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_bpf.h.out", "startLine": "898", "endLine": "900"}], "struct bpf_sysctl {\n    __u32 write;\n    __u32 file_pos;\n}\n": [{"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_bpf.h.out", "startLine": "905", "endLine": "908"}], "struct bpf_sockopt {\n    __bpf_md_ptr (struct bpf_sock *, sk);\n    __bpf_md_ptr (void *, optval);\n    __bpf_md_ptr (void *, optval_end);\n    __s32 level;\n    __s32 optname;\n    __s32 optlen;\n    __s32 retval;\n}\n": [{"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_bpf.h.out", "startLine": "913", "endLine": "921"}], "struct decap_stats {\n    __u64 decap_v4;\n    __u64 decap_v6;\n    __u64 total;\n}\n": [{"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_decap_maps.h.out", "startLine": "16", "endLine": "20"}], "struct {\n    __uint (type, BPF_MAP_TYPE_PERCPU_ARRAY);\n    __type (key, __u32);\n    __type (value, struct decap_stats);\n    __uint (max_entries, STATS_MAP_SIZE);\n    __uint (map_flags, NO_FLAGS);\n} decap_counters SEC (\".maps\");\n\n": [{"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_decap_maps.h.out", "startLine": "25", "endLine": "32"}], "struct bpf_map_def {\n    unsigned int type;\n    unsigned int key_size;\n    unsigned int value_size;\n    unsigned int max_entries;\n    unsigned int map_flags;\n    unsigned int inner_map_idx;\n    unsigned int numa_node;\n}\n": [{"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_bpf_helpers.h.out", "startLine": "108", "endLine": "116"}], "struct flow_key {\n    union {\n        __be32 src;\n        __be32 srcv6 [4];\n    }\n    ;\n    union {\n        __be32 dst;\n        __be32 dstv6 [4];\n    }\n    ;\n    union {\n        __u32 ports;\n        __u16 port16 [2];\n    }\n    ;\n    __u8 proto;\n}\n": [{"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_balancer_structs.h.out", "startLine": "6", "endLine": "23"}], "struct packet_description {\n    struct flow_key flow;\n    __u32 real_index;\n    __u8 flags;\n    __u8 tos;\n}\n": [{"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_balancer_structs.h.out", "startLine": "28", "endLine": "33"}], "struct ctl_value {\n    union {\n        __u64 value;\n        __u32 ifindex;\n        __u8 mac [6];\n    }\n    ;\n}\n": [{"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_balancer_structs.h.out", "startLine": "38", "endLine": "45"}], "struct vip_definition {\n    union {\n        __be32 vip;\n        __be32 vipv6 [4];\n    }\n    ;\n    __u16 port;\n    __u8 proto;\n}\n": [{"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_balancer_structs.h.out", "startLine": "50", "endLine": "58"}], "struct vip_meta {\n    __u32 flags;\n    __u32 vip_num;\n}\n": [{"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_balancer_structs.h.out", "startLine": "63", "endLine": "66"}], "struct real_pos_lru {\n    __u32 pos;\n    __u64 atime;\n}\n": [{"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_balancer_structs.h.out", "startLine": "71", "endLine": "74"}], "struct real_definition {\n    union {\n        __be32 dst;\n        __be32 dstv6 [4];\n    }\n    ;\n    __u8 flags;\n}\n": [{"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_balancer_structs.h.out", "startLine": "79", "endLine": "86"}], "struct lb_stats {\n    __u64 v1;\n    __u64 v2;\n}\n": [{"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_balancer_structs.h.out", "startLine": "91", "endLine": "94"}], "struct v4_lpm_key {\n    __u32 prefixlen;\n    __be32 addr;\n}\n": [{"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_balancer_structs.h.out", "startLine": "99", "endLine": "102"}], "struct v6_lpm_key {\n    __u32 prefixlen;\n    __be32 addr [4];\n}\n": [{"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_balancer_structs.h.out", "startLine": "107", "endLine": "110"}], "struct address {\n    union {\n        __be32 addr;\n        __be32 addrv6 [4];\n    }\n    ;\n}\n": [{"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_balancer_structs.h.out", "startLine": "115", "endLine": "121"}], "struct event_metadata {\n    __u32 event;\n    __u32 pkt_size;\n    __u32 data_len;\n}  __attribute__ ((__packed__))\n": [{"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_balancer_structs.h.out", "startLine": "128", "endLine": "132"}], "struct flow_debug_info {\n    union {\n        __be32 l4_hop;\n        __be32 l4_hopv6 [4];\n    }\n    ;\n    union {\n        __be32 this_hop;\n        __be32 this_hopv6 [4];\n    }\n    ;\n}\n": [{"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_balancer_structs.h.out", "startLine": "141", "endLine": "152"}], "struct {\n    __uint (type, BPF_MAP_TYPE_HASH);\n    __type (key, __u32);\n    __type (value, struct hc_real_definition);\n    __uint (max_entries, MAX_REALS);\n} hc_reals_map SEC (\".maps\");\n\n": [{"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_healthchecking_maps.h.out", "startLine": "26", "endLine": "32"}], "struct {\n    __uint (type, BPF_MAP_TYPE_ARRAY);\n    __type (key, __u32);\n    __type (value, struct hc_real_definition);\n    __uint (max_entries, 2);\n    __uint (map_flags, NO_FLAGS);\n} hc_pckt_srcs_map SEC (\".maps\");\n\n": [{"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_healthchecking_maps.h.out", "startLine": "36", "endLine": "43"}], "struct {\n    __uint (type, BPF_MAP_TYPE_ARRAY);\n    __type (key, __u32);\n    __type (value, struct hc_mac);\n    __uint (max_entries, 2);\n    __uint (map_flags, NO_FLAGS);\n} hc_pckt_macs SEC (\".maps\");\n\n": [{"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_healthchecking_maps.h.out", "startLine": "47", "endLine": "54"}], "struct {\n    __uint (type, BPF_MAP_TYPE_PERCPU_ARRAY);\n    __type (key, __u32);\n    __type (value, struct hc_stats);\n    __uint (max_entries, STATS_SIZE);\n    __uint (map_flags, NO_FLAGS);\n} hc_stats_map SEC (\".maps\");\n\n": [{"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_healthchecking_maps.h.out", "startLine": "58", "endLine": "65"}], "struct {\n    __uint (type, BPF_MAP_TYPE_PERCPU_ARRAY);\n    __type (key, __u32);\n    __type (value, __u64);\n    __uint (max_entries, MAX_VIPS);\n    __uint (map_flags, NO_FLAGS);\n} per_hckey_stats SEC (\".maps\");\n\n": [{"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_healthchecking_maps.h.out", "startLine": "69", "endLine": "76"}], "struct {\n    __uint (type, BPF_MAP_TYPE_HASH);\n    __type (key, struct hc_key);\n    __type (value, __u32);\n    __uint (max_entries, MAX_VIPS);\n    __uint (map_flags, NO_FLAGS);\n} hc_key_map SEC (\".maps\");\n\n": [{"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_healthchecking_maps.h.out", "startLine": "80", "endLine": "87"}], "struct hc_key {\n    union {\n        __be32 addr;\n        __be32 addrv6 [4];\n    }\n    ;\n    __u16 port;\n    __u8 proto;\n}\n": [{"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_healthchecking_structs.h.out", "startLine": "28", "endLine": "36"}], "struct hc_mac {\n    __u8 mac [6];\n}\n": [{"fileName": "/root/op/katran/txl_katran/annotate_struct_examples_katran_healthchecking_structs.h.out", "startLine": "41", "endLine": "43"}]}