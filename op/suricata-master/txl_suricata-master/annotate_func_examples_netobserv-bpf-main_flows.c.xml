<?xml version="1.0"?>
<doc>
<source file="/home/sayandes/opened_extraction/examples/netobserv-bpf-main/flows.c" funcheader="static inline void set_flags (struct tcphdr *th, u16 *flags)" startline="79" endline="104">
static inline void set_flags (struct tcphdr *th, u16 *flags)
{
    if (th->ack && th->syn) {
        *flags |= SYN_ACK_FLAG;
    }
    else if (th->ack && th->fin) {
        *flags |= FIN_ACK_FLAG;
    }
    else if (th->ack && th->rst) {
        *flags |= RST_ACK_FLAG;
    }
    else if (th->fin) {
        *flags |= FIN_FLAG;
    }
    else if (th->syn) {
        *flags |= SYN_FLAG;
    }
    else if (th->rst) {
        *flags |= RST_FLAG;
    }
    else if (th->psh) {
        *flags |= PSH_FLAG;
    }
    else if (th->urg) {
        *flags |= URG_FLAG;
    }
    else if (th->ece) {
        *flags |= ECE_FLAG;
    }
    else if (th->cwr) {
        *flags |= CWR_FLAG;
    }
}
</source>
<source file="/home/sayandes/opened_extraction/examples/netobserv-bpf-main/flows.c" funcheader="static inline int fill_iphdr (struct iphdr *ip, void *data_end, flow_id *id, u16 *flags)" startline="106" endline="138">
static inline int fill_iphdr (struct iphdr *ip, void *data_end, flow_id *id, u16 *flags)
{
    if ((void *) ip + sizeof (*ip) > data_end) {
        return DISCARD;
    }
    __builtin_memcpy (id->src_ip.s6_addr, ip4in6, sizeof (ip4in6));
    __builtin_memcpy (id->dst_ip.s6_addr, ip4in6, sizeof (ip4in6));
    __builtin_memcpy (id->src_ip.s6_addr + sizeof (ip4in6), &ip->saddr, sizeof (ip->saddr));
    __builtin_memcpy (id->dst_ip.s6_addr + sizeof (ip4in6), &ip->daddr, sizeof (ip->daddr));
    id->transport_protocol = ip->protocol;
    id->src_port = 0;
    id->dst_port = 0;
    switch (ip->protocol) {
    case IPPROTO_TCP :
        {
            struct tcphdr *tcp = (void *) ip + sizeof (*ip);
            if ((void *) tcp + sizeof (*tcp) <= data_end) {
                id->src_port = __bpf_ntohs (tcp->source);
                id->dst_port = __bpf_ntohs (tcp->dest);
                set_flags (tcp, flags);
            }
        }
        break;
    case IPPROTO_UDP :
        {
            struct udphdr *udp = (void *) ip + sizeof (*ip);
            if ((void *) udp + sizeof (*udp) <= data_end) {
                id->src_port = __bpf_ntohs (udp->source);
                id->dst_port = __bpf_ntohs (udp->dest);
            }
        }
        break;
    default :
        break;
    }
    return SUBMIT;
}
</source>
<source file="/home/sayandes/opened_extraction/examples/netobserv-bpf-main/flows.c" funcheader="static inline int fill_ip6hdr (struct ipv6hdr *ip, void *data_end, flow_id *id, u16 *flags)" startline="141" endline="171">
static inline int fill_ip6hdr (struct ipv6hdr *ip, void *data_end, flow_id *id, u16 *flags)
{
    if ((void *) ip + sizeof (*ip) > data_end) {
        return DISCARD;
    }
    id->src_ip = ip->saddr;
    id->dst_ip = ip->daddr;
    id->transport_protocol = ip->nexthdr;
    id->src_port = 0;
    id->dst_port = 0;
    switch (ip->nexthdr) {
    case IPPROTO_TCP :
        {
            struct tcphdr *tcp = (void *) ip + sizeof (*ip);
            if ((void *) tcp + sizeof (*tcp) <= data_end) {
                id->src_port = __bpf_ntohs (tcp->source);
                id->dst_port = __bpf_ntohs (tcp->dest);
                set_flags (tcp, flags);
            }
        }
        break;
    case IPPROTO_UDP :
        {
            struct udphdr *udp = (void *) ip + sizeof (*ip);
            if ((void *) udp + sizeof (*udp) <= data_end) {
                id->src_port = __bpf_ntohs (udp->source);
                id->dst_port = __bpf_ntohs (udp->dest);
            }
        }
        break;
    default :
        break;
    }
    return SUBMIT;
}
</source>
<source file="/home/sayandes/opened_extraction/examples/netobserv-bpf-main/flows.c" funcheader="static inline int fill_ethhdr (struct ethhdr *eth, void *data_end, flow_id *id, u16 *flags)" startline="173" endline="197">
static inline int fill_ethhdr (struct ethhdr *eth, void *data_end, flow_id *id, u16 *flags)
{
    if ((void *) eth + sizeof (*eth) > data_end) {
        return DISCARD;
    }
    __builtin_memcpy (id->dst_mac, eth->h_dest, ETH_ALEN);
    __builtin_memcpy (id->src_mac, eth->h_source, ETH_ALEN);
    id->eth_protocol = __bpf_ntohs (eth->h_proto);
    if (id->eth_protocol == ETH_P_IP) {
        struct iphdr *ip = (void *) eth + sizeof (*eth);
        return fill_iphdr (ip, data_end, id, flags);
    }
    else if (id->eth_protocol == ETH_P_IPV6) {
        struct ipv6hdr *ip6 = (void *) eth + sizeof (*eth);
        return fill_ip6hdr (ip6, data_end, id, flags);
    }
    else {
        memset (&(id->src_ip), 0, sizeof (struct in6_addr));
        memset (&(id->dst_ip), 0, sizeof (struct in6_addr));
        id->transport_protocol = 0;
        id->src_port = 0;
        id->dst_port = 0;
    }
    return SUBMIT;
}
</source>
<source file="/home/sayandes/opened_extraction/examples/netobserv-bpf-main/flows.c" funcheader="static inline int flow_monitor (struct  __sk_buff *skb, u8 direction)" startline="199" endline="276">
static inline int flow_monitor (struct  __sk_buff *skb, u8 direction)
{
    if (sampling != 0 && (bpf_get_prandom_u32 () % sampling) != 0) {
        return TC_ACT_OK;
    }
    void *data_end = (void *) (long) skb->data_end;
    void *data = (void *) (long) skb->data;
    flow_id id;
    u64 current_time = bpf_ktime_get_ns ();
    struct ethhdr *eth = data;
    u16 flags = 0;
    if (fill_ethhdr (eth, data_end, &id, &flags) == DISCARD) {
        return TC_ACT_OK;
    }
    id.if_index = skb->ifindex;
    id.direction = direction;
    flow_metrics *aggregate_flow = bpf_map_lookup_elem (&aggregated_flows, &id);
    if (aggregate_flow != NULL) {
        aggregate_flow->packets += 1;
        aggregate_flow->bytes += skb->len;
        aggregate_flow->end_mono_time_ts = current_time;
        if (aggregate_flow->start_mono_time_ts == 0) {
            aggregate_flow->start_mono_time_ts = current_time;
        }
        aggregate_flow->flags |= flags;
        long ret = bpf_map_update_elem (& aggregated_flows, & id, aggregate_flow, BPF_ANY);
        if (trace_messages && ret != 0) {
            bpf_printk ("error updating flow %d\n", ret);
        }
    }
    else {
        flow_metrics new_flow = {
            .packets = 1,
            .bytes = skb->len,
            .start_mono_time_ts = current_time,
            .end_mono_time_ts = current_time,
            .flags = flags,}
        ;
        long ret = bpf_map_update_elem (& aggregated_flows, & id, & new_flow, BPF_ANY);
        if (ret != 0) {
            if (trace_messages) {
                bpf_printk ("error adding flow %d\n", ret);
            }
            new_flow.errno = -ret;
            flow_record *record = bpf_ringbuf_reserve (&direct_flows, sizeof (flow_record), 0);
            if (!record) {
                if (trace_messages) {
                    bpf_printk ("couldn't reserve space in the ringbuf. Dropping flow");
                }
                return TC_ACT_OK;
            }
            record->id = id;
            record->metrics = new_flow;
            bpf_ringbuf_submit (record, 0);
        }
    }
    return TC_ACT_OK;
}
</source>
<source file="/home/sayandes/opened_extraction/examples/netobserv-bpf-main/flows.c" funcheader="int ingress_flow_parse (struct  __sk_buff *skb)" startline="278" endline="280">
int ingress_flow_parse (struct  __sk_buff *skb)
{
    return flow_monitor (skb, INGRESS);
}
</source>
<source file="/home/sayandes/opened_extraction/examples/netobserv-bpf-main/flows.c" funcheader="int egress_flow_parse (struct  __sk_buff *skb)" startline="283" endline="285">
int egress_flow_parse (struct  __sk_buff *skb)
{
    return flow_monitor (skb, EGRESS);
}
</source>
</doc>
