<?xml version="1.0"?>
<doc>
<source file="/home/sayandes/opened_extraction/examples/bcc-libbpf-tools-main/sigsnoop.c" funcheader="static error_t parse_arg (int key, char *arg, struct argp_state *state)" startline="94" endline="136">
static error_t parse_arg (int key, char *arg, struct argp_state *state)
{
    long pid, sig;
    switch (key) {
    case 'p' :
        errno = 0;
        pid = strtol (arg, NULL, 10);
        if (errno || pid <= 0) {
            warn ("Invalid PID: %s\n", arg);
            argp_usage (state);
        }
        target_pid = pid;
        break;
    case 's' :
        errno = 0;
        sig = strtol (arg, NULL, 10);
        if (errno || sig <= 0) {
            warn ("Invalid SIGNAL: %s\n", arg);
            argp_usage (state);
        }
        target_signal = sig;
        break;
    case 'n' :
        signal_name = true;
        break;
    case 'x' :
        failed_only = true;
        break;
    case 'k' :
        kill_only = true;
        break;
    case 'v' :
        verbose = true;
        break;
    case 'h' :
        argp_state_help (state, stderr, ARGP_HELP_STD_HELP);
        break;
    default :
        return ARGP_ERR_UNKNOWN;
    }
    return 0;
}
</source>
<source file="/home/sayandes/opened_extraction/examples/bcc-libbpf-tools-main/sigsnoop.c" funcheader="static int libbpf_print_fn (enum libbpf_print_level level, const char *format, va_list args)" startline="138" endline="143">
static int libbpf_print_fn (enum libbpf_print_level level, const char *format, va_list args)
{
    if (level == LIBBPF_DEBUG && !verbose)
        return 0;
    return vfprintf (stderr, format, args);
}
</source>
<source file="/home/sayandes/opened_extraction/examples/bcc-libbpf-tools-main/sigsnoop.c" funcheader="static void alias_parse (char *prog)" startline="145" endline="152">
static void alias_parse (char *prog)
{
    char *name = basename (prog);
    if (!strcmp (name, "killsnoop")) {
        kill_only = true;
    }
}
</source>
<source file="/home/sayandes/opened_extraction/examples/bcc-libbpf-tools-main/sigsnoop.c" funcheader="static void sig_int (int signo)" startline="154" endline="157">
static void sig_int (int signo)
{
    exiting = 1;
}
</source>
<source file="/home/sayandes/opened_extraction/examples/bcc-libbpf-tools-main/sigsnoop.c" funcheader="static void handle_event (void *ctx, int cpu, void *data, __u32 data_sz)" startline="159" endline="175">
static void handle_event (void *ctx, int cpu, void *data, __u32 data_sz)
{
    struct event *e = data;
    struct tm *tm;
    char ts [32];
    time_t t;
    time (&t);
    tm = localtime (& t);
    strftime (ts, sizeof (ts), "%H:%M:%S", tm);
    if (signal_name && e->sig < ARRAY_SIZE (sig_name))
        printf ("%-8s %-7d %-16s %-9s %-7d %-6d\n", ts, e->pid, e->comm, sig_name[e->sig], e->tpid, e->ret);
    else
        printf ("%-8s %-7d %-16s %-9d %-7d %-6d\n", ts, e->pid, e->comm, e->sig, e->tpid, e->ret);
}
</source>
<source file="/home/sayandes/opened_extraction/examples/bcc-libbpf-tools-main/sigsnoop.c" funcheader="static void handle_lost_events (void *ctx, int cpu, __u64 lost_cnt)" startline="177" endline="180">
static void handle_lost_events (void *ctx, int cpu, __u64 lost_cnt)
{
    warn ("lost %llu events on CPU #%d\n", lost_cnt, cpu);
}
</source>
<source file="/home/sayandes/opened_extraction/examples/bcc-libbpf-tools-main/sigsnoop.c" funcheader="int main (int argc, char **argv)" startline="182" endline="265">
int main (int argc, char **argv)
{
    static const struct argp argp = {
        .options = opts,
        .parser = parse_arg,
        .doc = argp_program_doc,}
    ;
    struct perf_buffer *pb = NULL;
    struct sigsnoop_bpf *obj;
    int err;
    alias_parse (argv[0]);
    err = argp_parse (& argp, argc, argv, 0, NULL, NULL);
    if (err)
        return err;
    libbpf_set_strict_mode (LIBBPF_STRICT_ALL);
    libbpf_set_print (libbpf_print_fn);
    obj = sigsnoop_bpf__open ();
    if (!obj) {
        warn ("failed to open BPF object\n");
        return 1;
    }
    obj->rodata->filtered_pid = target_pid;
    obj->rodata->target_signal = target_signal;
    obj->rodata->failed_only = failed_only;
    if (kill_only) {
        bpf_program__set_autoload (obj->progs.sig_trace, false);
    }
    else {
        bpf_program__set_autoload (obj->progs.kill_entry, false);
        bpf_program__set_autoload (obj->progs.kill_exit, false);
        bpf_program__set_autoload (obj->progs.tkill_entry, false);
        bpf_program__set_autoload (obj->progs.tkill_exit, false);
        bpf_program__set_autoload (obj->progs.tgkill_entry, false);
        bpf_program__set_autoload (obj->progs.tgkill_exit, false);
    }
    err = sigsnoop_bpf__load (obj);
    if (err) {
        warn ("failed to load BPF object: %d\n", err);
        goto cleanup;
    }
    err = sigsnoop_bpf__attach (obj);
    if (err) {
        warn ("failed to attach BPF programs: %d\n", err);
        goto cleanup;
    }
    pb = perf_buffer__new (bpf_map__fd (obj -> maps.events), PERF_BUFFER_PAGES, handle_event, handle_lost_events, NULL, NULL);
    if (!pb) {
        err = -errno;
        warn ("failed to open perf buffer: %d\n", err);
        goto cleanup;
    }
    if (signal (SIGINT, sig_int) == SIG_ERR) {
        warn ("can't set signal handler: %s\n", strerror (errno));
        goto cleanup;
    }
    printf ("%-8s %-7s %-16s %-9s %-7s %-6s\n", "TIME", "PID", "COMM", "SIG", "TPID", "RESULT");
    while (!exiting) {
        err = perf_buffer__poll (pb, PERF_POLL_TIMEOUT_MS);
        if (err < 0 && err != -EINTR) {
            warn ("error polling perf buffer: %s\n", strerror (-err));
            goto cleanup;
        }
        err = 0;
    }
cleanup :
    perf_buffer__free (pb);
    sigsnoop_bpf__destroy (obj);
    return err != 0;
}
</source>
</doc>
