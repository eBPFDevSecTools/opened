<?xml version="1.0"?>
<doc>
<source file="/home/sayandes/opened_extraction/examples/bcc-libbpf-tools-main/numamove.c" funcheader="static error_t parse_arg (int key, char *arg, struct argp_state *state)" startline="40" endline="53">
static error_t parse_arg (int key, char *arg, struct argp_state *state)
{
    switch (key) {
    case 'h' :
        argp_state_help (state, stderr, ARGP_HELP_STD_HELP);
        break;
    case 'v' :
        env.verbose = true;
        break;
    default :
        return ARGP_ERR_UNKNOWN;
    }
    return 0;
}
</source>
<source file="/home/sayandes/opened_extraction/examples/bcc-libbpf-tools-main/numamove.c" funcheader="static int libbpf_print_fn (enum libbpf_print_level level, const char *format, va_list args)" startline="55" endline="60">
static int libbpf_print_fn (enum libbpf_print_level level, const char *format, va_list args)
{
    if (level == LIBBPF_DEBUG && !env.verbose)
        return 0;
    return vfprintf (stderr, format, args);
}
</source>
<source file="/home/sayandes/opened_extraction/examples/bcc-libbpf-tools-main/numamove.c" funcheader="static void sig_handler (int sig)" startline="62" endline="65">
static void sig_handler (int sig)
{
    exiting = true;
}
</source>
<source file="/home/sayandes/opened_extraction/examples/bcc-libbpf-tools-main/numamove.c" funcheader="int main (int argc, char **argv)" startline="67" endline="135">
int main (int argc, char **argv)
{
    static const struct argp argp = {
        .options = opts,
        .parser = parse_arg,
        .doc = argp_program_doc,}
    ;
    struct numamove_bpf *obj;
    struct tm *tm;
    char ts [32];
    time_t t;
    int err;
    err = argp_parse (& argp, argc, argv, 0, NULL, NULL);
    if (err)
        return err;
    libbpf_set_strict_mode (LIBBPF_STRICT_ALL);
    libbpf_set_print (libbpf_print_fn);
    obj = numamove_bpf__open ();
    if (!obj) {
        fprintf (stderr, "failed to open and/or load BPF object\n");
        return 1;
    }
    if (!obj->bss) {
        fprintf (stderr, "Memory-mapping BPF maps is supported starting from Linux 5.7, please upgrade.\n");
        goto cleanup;
    }
    if (fentry_can_attach ("migrate_misplaced_page", NULL)) {
        bpf_program__set_autoload (obj->progs.kprobe_migrate_misplaced_page, false);
        bpf_program__set_autoload (obj->progs.kretprobe_migrate_misplaced_page_exit, false);
    }
    else {
        bpf_program__set_autoload (obj->progs.fentry_migrate_misplaced_page, false);
        bpf_program__set_autoload (obj->progs.fexit_migrate_misplaced_page_exit, false);
    }
    err = numamove_bpf__load (obj);
    if (err) {
        fprintf (stderr, "failed to load BPF skelect: %d\n", err);
        goto cleanup;
    }
    err = numamove_bpf__attach (obj);
    if (err) {
        fprintf (stderr, "failed to attach BPF programs\n");
        goto cleanup;
    }
    signal (SIGINT, sig_handler);
    printf ("%-10s %18s %18s\n", "TIME", "NUMA_migrations", "NUMA_migrations_ms");
    while (!exiting) {
        sleep (1);
        time (&t);
        tm = localtime (& t);
        strftime (ts, sizeof (ts), "%H:%M:%S", tm);
        printf ("%-10s %18lld %18lld\n", ts, __atomic_exchange_n (&obj->bss->num, 0, __ATOMIC_RELAXED), __atomic_exchange_n (&obj->bss->latency, 0, __ATOMIC_RELAXED));
    }
cleanup :
    numamove_bpf__destroy (obj);
    return err != 0;
}
</source>
</doc>
