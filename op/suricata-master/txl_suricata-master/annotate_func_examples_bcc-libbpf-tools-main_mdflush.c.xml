<?xml version="1.0"?>
<doc>
<source file="/home/sayandes/opened_extraction/examples/bcc-libbpf-tools-main/mdflush.c" funcheader="static error_t parse_arg (int key, char *arg, struct argp_state *state)" startline="44" endline="57">
static error_t parse_arg (int key, char *arg, struct argp_state *state)
{
    switch (key) {
    case 'h' :
        argp_state_help (state, stderr, ARGP_HELP_STD_HELP);
        break;
    case 'v' :
        verbose = true;
        break;
    default :
        return ARGP_ERR_UNKNOWN;
    }
    return 0;
}
</source>
<source file="/home/sayandes/opened_extraction/examples/bcc-libbpf-tools-main/mdflush.c" funcheader="static void sig_int (int signo)" startline="59" endline="62">
static void sig_int (int signo)
{
    exiting = 1;
}
</source>
<source file="/home/sayandes/opened_extraction/examples/bcc-libbpf-tools-main/mdflush.c" funcheader="static int libbpf_print_fn (enum libbpf_print_level level, const char *format, va_list args)" startline="64" endline="69">
static int libbpf_print_fn (enum libbpf_print_level level, const char *format, va_list args)
{
    if (level == LIBBPF_DEBUG && !verbose)
        return 0;
    return vfprintf (stderr, format, args);
}
</source>
<source file="/home/sayandes/opened_extraction/examples/bcc-libbpf-tools-main/mdflush.c" funcheader="static void handle_event (void *ctx, int cpu, void *data, __u32 data_sz)" startline="71" endline="83">
static void handle_event (void *ctx, int cpu, void *data, __u32 data_sz)
{
    struct event *e = data;
    time_t t;
    struct tm *tm;
    char ts [32];
    time (&t);
    tm = localtime (& t);
    strftime (ts, sizeof (ts), "%H:%M:%S", tm);
    printf ("%-8s %-7d %-16s %-s\n", ts, e->pid, e->comm, e->disk);
}
</source>
<source file="/home/sayandes/opened_extraction/examples/bcc-libbpf-tools-main/mdflush.c" funcheader="static void handle_lost_events (void *ctx, int cpu, __u64 lost_cnt)" startline="85" endline="88">
static void handle_lost_events (void *ctx, int cpu, __u64 lost_cnt)
{
    warn ("lost %llu events on CPU #%d\n", lost_cnt, cpu);
}
</source>
<source file="/home/sayandes/opened_extraction/examples/bcc-libbpf-tools-main/mdflush.c" funcheader="int main (int argc, char **argv)" startline="90" endline="163">
int main (int argc, char **argv)
{
    static const struct argp argp = {
        .options = opts,
        .parser = parse_arg,
        .doc = argp_program_doc,}
    ;
    struct perf_buffer *pb = NULL;
    struct mdflush_bpf *obj;
    int err;
    err = argp_parse (& argp, argc, argv, 0, NULL, NULL);
    if (err)
        return err;
    libbpf_set_strict_mode (LIBBPF_STRICT_ALL);
    libbpf_set_print (libbpf_print_fn);
    obj = mdflush_bpf__open ();
    if (!obj) {
        warn ("failed to open BPF object\n");
        return 1;
    }
    if (fentry_can_attach ("md_flush_request", NULL))
        bpf_program__set_autoload (obj->progs.kprobe_md_flush_request, false);
    else
        bpf_program__set_autoload (obj->progs.md_flush_request, false);
    err = mdflush_bpf__load (obj);
    if (err) {
        warn ("failed to load BPF object: %d\n", err);
        goto cleanup;
    }
    err = mdflush_bpf__attach (obj);
    if (err) {
        warn ("failed to attach BPF programs: %d\n", err);
        goto cleanup;
    }
    pb = perf_buffer__new (bpf_map__fd (obj -> maps.events), PERF_BUFFER_PAGES, handle_event, handle_lost_events, NULL, NULL);
    if (!pb) {
        warn ("failed to open perf buffer: %d\n", err);
        goto cleanup;
    }
    if (signal (SIGINT, sig_int) == SIG_ERR) {
        warn ("can't set signal handler: %s\n", strerror (errno));
        err = 1;
        goto cleanup;
    }
    printf ("Tracing md flush requests... Hit Ctrl-C to end.\n");
    printf ("%-8s %-7s %-16s %-s\n", "TIME", "PID", "COMM", "DEVICE");
    while (!exiting) {
        err = perf_buffer__poll (pb, PERF_POLL_TIMEOUT_MS);
        if (err < 0 && err != -EINTR) {
            warn ("error polling perf buffer: %s\n", strerror (-err));
            goto cleanup;
        }
        err = 0;
    }
cleanup :
    perf_buffer__free (pb);
    mdflush_bpf__destroy (obj);
    return err != 0;
}
</source>
</doc>
