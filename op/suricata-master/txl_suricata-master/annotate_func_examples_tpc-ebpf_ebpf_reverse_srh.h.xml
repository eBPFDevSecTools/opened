<?xml version="1.0"?>
<doc>
<source file="/home/sayandes/opened_extraction/examples/tpc-ebpf/ebpf_reverse_srh.h" funcheader="static void take_snapshot (struct bpf_elf_map *st_map, struct ip6_srh_t *srh)" startline="30" endline="71">
static void take_snapshot (struct bpf_elf_map *st_map, struct ip6_srh_t *srh)
{
    struct flow_snapshot *curr_snapshot = NULL;
    struct snapshot_arg arg = {
        .new_snapshot = NULL,
        .oldest_seq = 0,
        .best_idx = 0,
        .max_seq = 0}
    ;
    curr_snapshot = (void *) bpf_map_lookup_elem (st_map, &arg.best_idx);
    if (curr_snapshot) {
        arg.new_snapshot = curr_snapshot;
        arg.oldest_seq = curr_snapshot->sequence;
        arg.max_seq = curr_snapshot->sequence;
    }
    for (int i = 0; i <= MAX_SNAPSHOTS - 1; i++) {
        int xxx = i;
        curr_snapshot = (void *) bpf_map_lookup_elem (st_map, &xxx);
        if (curr_snapshot) {
            if (arg.max_seq < curr_snapshot->sequence) {
                arg.max_seq = curr_snapshot->sequence;
            }
            if (arg.oldest_seq > curr_snapshot->sequence) {
                arg.oldest_seq = curr_snapshot->sequence;
                arg.new_snapshot = curr_snapshot;
                arg.best_idx = xxx;
            }
        }
    }
    if (arg.new_snapshot) {
        if (srh)
            memcpy (&(arg.new_snapshot->srh), srh, sizeof (*srh));
        arg.new_snapshot->sequence = arg.max_seq + 1;
        arg.new_snapshot->time = bpf_ktime_get_ns ();
        bpf_map_update_elem (st_map, &arg.best_idx, arg.new_snapshot, BPF_ANY);
    }
    else {
        bpf_debug ("HERE STAT FAIL\n");
    }
}
</source>
</doc>
