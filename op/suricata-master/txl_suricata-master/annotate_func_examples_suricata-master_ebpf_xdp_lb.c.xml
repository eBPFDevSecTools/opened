<?xml version="1.0"?>
<doc>
<source file="/home/sayandes/opened_extraction/examples/suricata-master/ebpf/xdp_lb.c" funcheader="static int __always_inline hash_ipv4 (void *data, void *data_end)" startline="73" endline="99">
static int __always_inline hash_ipv4 (void *data, void *data_end)
{
    struct iphdr *iph = data;
    if ((void *) (iph + 1) > data_end)
        return XDP_PASS;
    __u32 key0 = 0;
    __u32 cpu_dest;
    __u32 *cpu_max = bpf_map_lookup_elem (&cpus_count, &key0);
    __u32 *cpu_selected;
    __u32 cpu_hash;
    cpu_hash = iph->saddr + iph->daddr;
    cpu_hash = SuperFastHash ((char *) & cpu_hash, 4, INITVAL);
    if (cpu_max && *cpu_max) {
        cpu_dest = cpu_hash % *cpu_max;
        cpu_selected = bpf_map_lookup_elem (& cpus_available, & cpu_dest);
        if (!cpu_selected)
            return XDP_ABORTED;
        cpu_dest = *cpu_selected;
        return bpf_redirect_map (&cpu_map, cpu_dest, 0);
    }
    else {
        return XDP_PASS;
    }
}
</source>
<source file="/home/sayandes/opened_extraction/examples/suricata-master/ebpf/xdp_lb.c" funcheader="static int __always_inline hash_ipv6 (void *data, void *data_end)" startline="101" endline="132">
static int __always_inline hash_ipv6 (void *data, void *data_end)
{
    struct ipv6hdr *ip6h = data;
    if ((void *) (ip6h + 1) > data_end)
        return XDP_PASS;
    __u32 key0 = 0;
    __u32 cpu_dest;
    __u32 *cpu_max = bpf_map_lookup_elem (&cpus_count, &key0);
    __u32 *cpu_selected;
    __u32 cpu_hash;
    cpu_hash = ip6h->saddr.s6_addr32[0] + ip6h->daddr.s6_addr32[0];
    cpu_hash += ip6h->saddr.s6_addr32[1] + ip6h->daddr.s6_addr32[1];
    cpu_hash += ip6h->saddr.s6_addr32[2] + ip6h->daddr.s6_addr32[2];
    cpu_hash += ip6h->saddr.s6_addr32[3] + ip6h->daddr.s6_addr32[3];
    cpu_hash = SuperFastHash ((char *) & cpu_hash, 4, INITVAL);
    if (cpu_max && *cpu_max) {
        cpu_dest = cpu_hash % *cpu_max;
        cpu_selected = bpf_map_lookup_elem (& cpus_available, & cpu_dest);
        if (!cpu_selected)
            return XDP_ABORTED;
        cpu_dest = *cpu_selected;
        return bpf_redirect_map (&cpu_map, cpu_dest, 0);
    }
    else {
        return XDP_PASS;
    }
    return XDP_PASS;
}
</source>
<source file="/home/sayandes/opened_extraction/examples/suricata-master/ebpf/xdp_lb.c" funcheader="static int __always_inline filter_gre (struct xdp_md *ctx, void *data, __u64 nh_off, void *data_end)" startline="134" endline="202">
static int __always_inline filter_gre (struct xdp_md *ctx, void *data, __u64 nh_off, void *data_end)
{
    struct iphdr *iph = data + nh_off;
    __u16 proto;
    struct gre_hdr {
        __be16 flags;
        __be16 proto;
    }
    ;
    nh_off += sizeof (struct iphdr);
    struct gre_hdr *grhdr = (struct gre_hdr *) (iph + 1);
    if ((void *) (grhdr + 1) > data_end)
        return XDP_PASS;
    if (grhdr->flags & (GRE_VERSION | GRE_ROUTING))
        return XDP_PASS;
    nh_off += 4;
    proto = grhdr->proto;
    if (grhdr->flags & GRE_CSUM)
        nh_off += 4;
    if (grhdr->flags & GRE_KEY)
        nh_off += 4;
    if (grhdr->flags & GRE_SEQ)
        nh_off += 4;
    if (proto == __constant_htons (ETH_P_ERSPAN)) {
        nh_off += 8;
    }
    if (data + nh_off > data_end)
        return XDP_PASS;
    if (bpf_xdp_adjust_head (ctx, 0 + nh_off))
        return XDP_PASS;
    data = (void *) (long) ctx->data;
    data_end = (void *) (long) ctx->data_end;
    struct ethhdr *eth = data;
    proto = eth->h_proto;
    nh_off = sizeof (*eth);
    if (data + nh_off > data_end)
        return XDP_PASS;
    if (proto == __constant_htons (ETH_P_8021Q)) {
        struct vlan_hdr *vhdr = (struct vlan_hdr *) (data + nh_off);
        if ((void *) (vhdr + 1) > data_end)
            return XDP_PASS;
        proto = vhdr->h_vlan_encapsulated_proto;
        nh_off += sizeof (struct vlan_hdr);
    }
    if (data + nh_off > data_end)
        return XDP_PASS;
    if (proto == __constant_htons (ETH_P_IP)) {
        return hash_ipv4 (data + nh_off, data_end);
    }
    else if (proto == __constant_htons (ETH_P_IPV6)) {
        return hash_ipv6 (data + nh_off, data_end);
    }
    else
        return XDP_PASS;
}
</source>
<source file="/home/sayandes/opened_extraction/examples/suricata-master/ebpf/xdp_lb.c" funcheader="static int __always_inline filter_ipv4 (struct xdp_md *ctx, void *data, __u64 nh_off, void *data_end)" startline="204" endline="214">
static int __always_inline filter_ipv4 (struct xdp_md *ctx, void *data, __u64 nh_off, void *data_end)
{
    struct iphdr *iph = data + nh_off;
    if ((void *) (iph + 1) > data_end)
        return XDP_PASS;
    if (iph->protocol == IPPROTO_GRE) {
        return filter_gre (ctx, data, nh_off, data_end);
    }
    return hash_ipv4 (data + nh_off, data_end);
}
</source>
<source file="/home/sayandes/opened_extraction/examples/suricata-master/ebpf/xdp_lb.c" funcheader="static int __always_inline filter_ipv6 (struct xdp_md *ctx, void *data, __u64 nh_off, void *data_end)" startline="216" endline="220">
static int __always_inline filter_ipv6 (struct xdp_md *ctx, void *data, __u64 nh_off, void *data_end)
{
    struct ipv6hdr *ip6h = data + nh_off;
    return hash_ipv6 ((void *) ip6h, data_end);
}
</source>
<source file="/home/sayandes/opened_extraction/examples/suricata-master/ebpf/xdp_lb.c" funcheader="int SEC (\"xdp\") xdp_loadfilter (struct xdp_md *ctx)" startline="222" endline="267">
int SEC ("xdp") xdp_loadfilter (struct xdp_md *ctx)
{
    void *data_end = (void *) (long) ctx->data_end;
    void *data = (void *) (long) ctx->data;
    struct ethhdr *eth = data;
    __u16 h_proto;
    __u64 nh_off;
    nh_off = sizeof (*eth);
    if (data + nh_off > data_end)
        return XDP_PASS;
    h_proto = eth->h_proto;

#if 0
    if (h_proto != __constant_htons (ETH_P_IP)) {
        char fmt [] = "Current proto: %u\n";
        bpf_trace_printk (fmt, sizeof (fmt), h_proto);
    }

#endif
    if (h_proto == __constant_htons (ETH_P_8021Q) || h_proto == __constant_htons (ETH_P_8021AD)) {
        struct vlan_hdr *vhdr;
        vhdr = data + nh_off;
        nh_off += sizeof (struct vlan_hdr);
        if (data + nh_off > data_end)
            return XDP_PASS;
        h_proto = vhdr->h_vlan_encapsulated_proto;
    }
    if (h_proto == __constant_htons (ETH_P_8021Q) || h_proto == __constant_htons (ETH_P_8021AD)) {
        struct vlan_hdr *vhdr;
        vhdr = data + nh_off;
        nh_off += sizeof (struct vlan_hdr);
        if (data + nh_off > data_end)
            return XDP_PASS;
        h_proto = vhdr->h_vlan_encapsulated_proto;
    }
    if (h_proto == __constant_htons (ETH_P_IP))
        return filter_ipv4 (ctx, data, nh_off, data_end);
    else if (h_proto == __constant_htons (ETH_P_IPV6))
        return filter_ipv6 (ctx, data, nh_off, data_end);
    return XDP_PASS;
}
</source>
</doc>
