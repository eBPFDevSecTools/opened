<?xml version="1.0"?>
<doc>
<source file="/home/sayandes/opened_extraction/examples/bcc-libbpf-tools-main/bashreadline.c" funcheader="static error_t parse_arg (int key, char *arg, struct argp_state *state)" startline="47" endline="65">
static error_t parse_arg (int key, char *arg, struct argp_state *state)
{
    switch (key) {
    case 's' :
        libreadline_path = strdup (arg);
        if (libreadline_path == NULL)
            return ARGP_ERR_UNKNOWN;
        break;
    case 'v' :
        verbose = true;
        break;
    case 'h' :
        argp_state_help (state, stderr, ARGP_HELP_STD_HELP);
        break;
    default :
        return ARGP_ERR_UNKNOWN;
    }
    return 0;
}
</source>
<source file="/home/sayandes/opened_extraction/examples/bcc-libbpf-tools-main/bashreadline.c" funcheader="static int libbpf_print_fn (enum libbpf_print_level level, const char *format, va_list args)" startline="67" endline="72">
static int libbpf_print_fn (enum libbpf_print_level level, const char *format, va_list args)
{
    if (level == LIBBPF_DEBUG && !verbose)
        return 0;
    return vfprintf (stderr, format, args);
}
</source>
<source file="/home/sayandes/opened_extraction/examples/bcc-libbpf-tools-main/bashreadline.c" funcheader="static void handle_event (void *ctx, int cpu, void *data, __u32 data_size)" startline="74" endline="86">
static void handle_event (void *ctx, int cpu, void *data, __u32 data_size)
{
    struct str_t *e = data;
    struct tm *tm;
    char ts [16];
    time_t t;
    time (&t);
    tm = localtime (& t);
    strftime (ts, sizeof (ts), "%H:%m:%S", tm);
    printf ("%-9s %-7d %s\n", ts, e->pid, e->str);
}
</source>
<source file="/home/sayandes/opened_extraction/examples/bcc-libbpf-tools-main/bashreadline.c" funcheader="static void handle_lost_events (void *ctx, int cpu, __u64 lost_cnt)" startline="88" endline="91">
static void handle_lost_events (void *ctx, int cpu, __u64 lost_cnt)
{
    warn ("lost %llu events on CPU #%d\n", lost_cnt, cpu);
}
</source>
<source file="/home/sayandes/opened_extraction/examples/bcc-libbpf-tools-main/bashreadline.c" funcheader="static char *find_readline_so ()" startline="93" endline="138">
static char *find_readline_so ()
{
    const char *bash_path = "/bin/bash";
    FILE *fp;
    off_t func_off;
    char *line = NULL;
    size_t line_sz = 0;
    char path [128];
    char *result = NULL;
    func_off = get_elf_func_offset (bash_path, "readline");
    if (func_off >= 0)
        return strdup (bash_path);
    fp = popen ("ldd /bin/bash", "r");
    if (fp == NULL)
        goto cleanup;
    while (getline (&line, &line_sz, fp) >= 0) {
        if (sscanf (line, "%*s => %127s", path) < 1)
            continue;
        if (strstr (line, "/libreadline.so")) {
            result = strdup (path);
            break;
        }
    }
cleanup :
    if (line)
        free (line);
    if (fp)
        pclose (fp);
    return result;
}
</source>
<source file="/home/sayandes/opened_extraction/examples/bcc-libbpf-tools-main/bashreadline.c" funcheader="static void sig_int (int signo)" startline="140" endline="143">
static void sig_int (int signo)
{
    exiting = 1;
}
</source>
<source file="/home/sayandes/opened_extraction/examples/bcc-libbpf-tools-main/bashreadline.c" funcheader="int main (int argc, char **argv)" startline="145" endline="237">
int main (int argc, char **argv)
{
    LIBBPF_OPTS (bpf_object_open_opts, open_opts);
    static const struct argp argp = {
        .options = opts,
        .parser = parse_arg,
        .doc = argp_program_doc,}
    ;
    struct bashreadline_bpf *obj = NULL;
    struct perf_buffer *pb = NULL;
    char *readline_so_path;
    off_t func_off;
    int err;
    err = argp_parse (& argp, argc, argv, 0, NULL, NULL);
    if (err)
        return err;
    if (libreadline_path) {
        readline_so_path = libreadline_path;
    }
    else if ((readline_so_path = find_readline_so ()) == NULL) {
        warn ("failed to find readline\n");
        return 1;
    }
    libbpf_set_strict_mode (LIBBPF_STRICT_ALL);
    libbpf_set_print (libbpf_print_fn);
    err = ensure_core_btf (& open_opts);
    if (err) {
        warn ("failed to fetch necessary BTF for CO-RE: %s\n", strerror (-err));
        goto cleanup;
    }
    obj = bashreadline_bpf__open_opts (& open_opts);
    if (!obj) {
        warn ("failed to open BPF object\n");
        goto cleanup;
    }
    err = bashreadline_bpf__load (obj);
    if (err) {
        warn ("failed to load BPF object: %d\n", err);
        goto cleanup;
    }
    func_off = get_elf_func_offset (readline_so_path, "readline");
    if (func_off < 0) {
        warn ("cound not find readline in %s\n", readline_so_path);
        goto cleanup;
    }
    obj->links.printret = bpf_program__attach_uprobe (obj->progs.printret, true, -1, readline_so_path, func_off);
    if (!obj->links.printret) {
        err = -errno;
        warn ("failed to attach readline: %d\n", err);
        goto cleanup;
    }
    pb = perf_buffer__new (bpf_map__fd (obj -> maps.events), PERF_BUFFER_PAGES, handle_event, handle_lost_events, NULL, NULL);
    if (!pb) {
        err = -errno;
        warn ("failed to open perf buffer: %d\n", err);
        goto cleanup;
    }
    if (signal (SIGINT, sig_int) == SIG_ERR) {
        warn ("can't set signal handler: %s\n", strerror (errno));
        err = 1;
        goto cleanup;
    }
    printf ("%-9s %-7s %s\n", "TIME", "PID", "COMMAND");
    while (!exiting) {
        err = perf_buffer__poll (pb, PERF_POLL_TIMEOUT_MS);
        if (err < 0 && err != -EINTR) {
            warn ("error polling perf buffer: %s\n", strerror (-err));
            goto cleanup;
        }
        err = 0;
    }
cleanup :
    if (readline_so_path)
        free (readline_so_path);
    perf_buffer__free (pb);
    bashreadline_bpf__destroy (obj);
    cleanup_core_btf (&open_opts);
    return err != 0;
}
</source>
</doc>
