<?xml version="1.0"?>
<doc>
<source file="/home/sayandes/opened_extraction/examples/bcc-libbpf-tools-main/funclatency.bpf.c" funcheader="int BPF_KPROBE (dummy_kprobe)" startline="32" endline="48">
int BPF_KPROBE (dummy_kprobe)
{
    u64 id = bpf_get_current_pid_tgid ();
    u32 tgid = id >> 32;
    u32 pid = id;
    u64 nsec;
    if (filter_cg && !bpf_current_task_under_cgroup (&cgroup_map, 0))
        return 0;
    if (targ_tgid && targ_tgid != tgid)
        return 0;
    nsec = bpf_ktime_get_ns ();
    bpf_map_update_elem (&starts, &pid, &nsec, BPF_ANY);
    return 0;
}
</source>
<source file="/home/sayandes/opened_extraction/examples/bcc-libbpf-tools-main/funclatency.bpf.c" funcheader="int BPF_KRETPROBE (dummy_kretprobe)" startline="51" endline="83">
int BPF_KRETPROBE (dummy_kretprobe)
{
    u64 *start;
    u64 nsec = bpf_ktime_get_ns ();
    u64 id = bpf_get_current_pid_tgid ();
    u32 pid = id;
    u64 slot, delta;
    if (filter_cg && !bpf_current_task_under_cgroup (&cgroup_map, 0))
        return 0;
    start = bpf_map_lookup_elem (& starts, & pid);
    if (!start)
        return 0;
    delta = nsec - *start;
    switch (units) {
    case USEC :
        delta /= 1000;
        break;
    case MSEC :
        delta /= 1000000;
        break;
    }
    slot = log2l (delta);
    if (slot >= MAX_SLOTS)
        slot = MAX_SLOTS - 1;
    __sync_fetch_and_add (&hist[slot], 1);
    return 0;
}
</source>
</doc>
