<?xml version="1.0"?>
<doc>
<source file="/home/sayandes/opened_extraction/examples/tpc-ebpf/ebpf_exp3_lowest_delay.c" funcheader="static __inline int move_path (struct dst_infos *dst_infos, __u32 key, struct bpf_sock_ops *skops)" startline="16" endline="29">
static __inline int move_path (struct dst_infos *dst_infos, __u32 key, struct bpf_sock_ops *skops)
{
    int rv = 1;
    char cc [20];
    struct ip6_srh_t *srh = NULL;
    if (key >= 0 && key < MAX_SRH_BY_DEST) {
        srh = &(dst_infos->srhs[key].srh);
        rv = bpf_setsockopt (skops, SOL_IPV6, IPV6_RTHDR, srh, sizeof (* srh));
        bpf_debug ("bpf_setsockopt !!!!! %d\n", rv);
    }
    return !!rv;
}
</source>
<source file="/home/sayandes/opened_extraction/examples/tpc-ebpf/ebpf_exp3_lowest_delay.c" funcheader="static int create_new_flow_infos (struct bpf_elf_map *dt_map, struct bpf_elf_map *c_map, struct flow_tuple *flow_id, __u64 cur_time, struct bpf_sock_ops *skops)" startline="31" endline="52">
static int create_new_flow_infos (struct bpf_elf_map *dt_map, struct bpf_elf_map *c_map, struct flow_tuple *flow_id, __u64 cur_time, struct bpf_sock_ops *skops)
{
    struct flow_infos *flow_info;
    struct flow_infos new_flow;
    int rv = 0;
    memset (&new_flow, 0, sizeof (struct flow_infos));
    new_flow.exp3_last_number_actions = 1;
    new_flow.exp3_start_snd_nxt = skops->snd_nxt;
    struct dst_infos *dst_infos = (void *) bpf_map_lookup_elem (dt_map, flow_id->remote_addr);
    if (!dst_infos)
        return 1;
    new_flow.exp3_last_probability.mantissa = LARGEST_BIT;
    new_flow.exp3_last_probability.exponent = BIAS;
    bpf_debug ("HHHHHHHHH FLOW src port %u - dst port %u\n", flow_id->local_port, flow_id->remote_port);
    return bpf_map_update_elem (c_map, flow_id, &new_flow, BPF_ANY);
}
</source>
<source file="/home/sayandes/opened_extraction/examples/tpc-ebpf/ebpf_exp3_lowest_delay.c" funcheader="int handle_sockop (struct bpf_sock_ops *skops)" startline="55" endline="137">
int handle_sockop (struct bpf_sock_ops *skops)
{
    struct dst_infos *dst_infos;
    struct flow_infos *flow_info;
    struct flow_tuple flow_id;
    int op;
    int rv = 0;
    __u64 cur_time;
    cur_time = bpf_ktime_get_ns ();
    op = (int) skops->op;
    if (skops->family != AF_INET6) {
        skops->reply = -1;
        return 0;
    }
    get_flow_id_from_sock (&flow_id, skops);
    flow_info = (void *) bpf_map_lookup_elem (&short_conn_map, &flow_id);
    if (!flow_info) {
        if (create_new_flow_infos (&short_dest_map, &short_conn_map, &flow_id, cur_time, skops)) {
            return 1;
        }
        flow_info = (void *) bpf_map_lookup_elem (&short_conn_map, &flow_id);
        if (flow_info) {
            dst_infos = (void *) bpf_map_lookup_elem (&short_dest_map, flow_id.remote_addr);
            if (dst_infos) {
                skops->reply = rv;
                return 0;
            }
        }
        return 1;
    }
    switch (op) {
    case BPF_SOCK_OPS_PASSIVE_ESTABLISHED_CB :
        flow_info->srh_id = exp3_next_path (&short_dest_map, flow_info, flow_id.remote_addr);
        dst_infos = (void *) bpf_map_lookup_elem (&short_dest_map, flow_id.remote_addr);
        rv = bpf_sock_ops_cb_flags_set (skops, BPF_SOCK_OPS_ALL_CB_FLAGS);
        bpf_debug ("Set flags %lld\n", rv);
        if (dst_infos) {
            move_path (dst_infos, flow_info->srh_id, skops);
            flow_info->exp3_start_snd_nxt = skops->snd_nxt;
            if (flow_info->srh_id >= 0 && flow_info->srh_id <= MAX_SRH_BY_DEST - 1)
                flow_info->exp3_curr_reward = dst_infos->srhs[flow_info->srh_id].curr_bw;
            rv = bpf_map_update_elem (& short_conn_map, & flow_id, flow_info, BPF_ANY);
        }
        break;
    case BPF_SOCK_OPS_STATE_CB :
        bpf_debug ("close: %d\n", skops->args[1]);
        if (skops->args[1] == BPF_TCP_CLOSE) {
            dst_infos = (void *) bpf_map_lookup_elem (&short_dest_map, flow_id.remote_addr);
            if (dst_infos) {
                if (USE_EXP3)
                    exp3_reward_path (flow_info, dst_infos, skops);
                bpf_map_delete_elem (&short_conn_map, &flow_id);
                rv = bpf_map_update_elem (& short_dest_map, flow_id.remote_addr, dst_infos, BPF_ANY);
                if (rv)
                    return 1;
                take_snapshot (&short_stat_map, dst_infos, flow_info);
            }
        }
        break;
    }
    skops->reply = rv;
    return 0;
}
</source>
</doc>
