<?xml version="1.0"?>
<doc>
<source file="/home/sayandes/opened_extraction/examples/loxilb-ebpf-main/common/common_pdi.c" funcheader="struct pdi_map *pdi_map_alloc (const char *name, pdi_add_map_op_t add_map, pdi_del_map_op_t del_map)" startline="14" endline="29">
struct pdi_map *pdi_map_alloc (const char *name, pdi_add_map_op_t add_map, pdi_del_map_op_t del_map)
{
    struct pdi_map *map = calloc (1, sizeof (struct pdi_map));
    if (name) {
        strncpy (map->name, name, PDI_MAP_NAME_LEN);
        map->name[PDI_MAP_NAME_LEN - 1] = '\0';
    }
    else {
        strncpy (map->name, "default", PDI_MAP_NAME_LEN);
    }
    map->pdi_add_map_em = add_map;
    map->pdi_del_map_em = del_map;
    return map;
}
</source>
<source file="/home/sayandes/opened_extraction/examples/loxilb-ebpf-main/common/common_pdi.c" funcheader="void pdi_key2str (struct pdi_key *key, char *fstr)" startline="31" endline="44">
void pdi_key2str (struct pdi_key *key, char *fstr)
{
    int l = 0;
    PDI_MATCH_PRINT (&key->dest, "dest", fstr, l, none);
    PDI_MATCH_PRINT (&key->source, "source", fstr, l, none);
    PDI_RMATCH_PRINT (&key->dport, "dport", fstr, l, none);
    PDI_RMATCH_PRINT (&key->dport, "sport", fstr, l, none);
    PDI_MATCH_PRINT (&key->inport, "inport", fstr, l, none);
    PDI_MATCH_PRINT (&key->protocol, "prot", fstr, l, none);
    PDI_MATCH_PRINT (&key->zone, "zone", fstr, l, none);
    PDI_MATCH_PRINT (&key->bd, "bd", fstr, l, none);
}
</source>
<source file="/home/sayandes/opened_extraction/examples/loxilb-ebpf-main/common/common_pdi.c" funcheader="void pdi_rule2str (struct pdi_rule *node)" startline="46" endline="55">
void pdi_rule2str (struct pdi_rule *node)
{
    char fmtstr [1000] = {0};
    if (1) {
        pdi_key2str (&node->key, fmtstr);
        printf ("(%s)%d\n", fmtstr, node->data.pref);
    }
}
</source>
<source file="/home/sayandes/opened_extraction/examples/loxilb-ebpf-main/common/common_pdi.c" funcheader="void pdi_rules2str (struct pdi_map *map)" startline="57" endline="68">
void pdi_rules2str (struct pdi_map *map)
{
    struct pdi_rule *node = map->head;
    printf ("#### Rules ####\n");
    while (node) {
        pdi_rule2str (node);
        node = node->next;
    }
    printf ("##############\n");
}
</source>
<source file="/home/sayandes/opened_extraction/examples/loxilb-ebpf-main/common/common_pdi.c" funcheader="int pdi_rule_insert (struct pdi_map *map, struct pdi_rule *new, int *nr)" startline="70" endline="123">
int pdi_rule_insert (struct pdi_map *map, struct pdi_rule *new, int *nr)
{
    struct pdi_rule *prev = NULL;
    struct pdi_rule *node;
    uint32_t pref = new->data.pref;
    if (nr)
        *nr = 0;
    PDI_MAP_LOCK (map);
    node = map->head;
    while (node) {
        if (pref > node->data.pref) {
            if (prev) {
                prev->next = new;
                new->next = node;
            }
            else {
                map->head = new;
                new->next = node;
            }
            map->nr++;
            PDI_MAP_ULOCK (map);
            return 0;
        }
        if (pref == node->data.pref) {
            if (PDI_KEY_EQ (&new->key, &node->key)) {
                PDI_MAP_ULOCK (map);
                return -EEXIST;
            }
        }
        prev = node;
        node = node->next;
        if (nr) {
            *nr = *nr + 1;
            ;
        }
    }
    if (prev) {
        prev->next = new;
        new->next = node;
    }
    else {
        map->head = new;
        new->next = node;
    }
    map->nr++;
    PDI_MAP_ULOCK (map);
    return 0;
}
</source>
<source file="/home/sayandes/opened_extraction/examples/loxilb-ebpf-main/common/common_pdi.c" funcheader="struct pdi_rule *pdi_rule_delete__ (struct pdi_map *map, struct pdi_key *key, uint32_t pref, int *nr)" startline="125" endline="153">
struct pdi_rule *pdi_rule_delete__ (struct pdi_map *map, struct pdi_key *key, uint32_t pref, int *nr)
{
    struct pdi_rule *prev = NULL;
    struct pdi_rule *node;
    node = map->head;
    while (node) {
        if (pref == node->data.pref) {
            if (PDI_KEY_EQ (key, &node->key)) {
                if (prev) {
                    prev->next = node->next;
                }
                else {
                    map->head = node->next;
                }
                map->nr--;
                return node;
            }
        }
        prev = node;
        node = node->next;
        if (nr) {
            *nr = *nr + 1;
        }
    }
    return NULL;
}
</source>
<source file="/home/sayandes/opened_extraction/examples/loxilb-ebpf-main/common/common_pdi.c" funcheader="int pdi_rule_delete (struct pdi_map *map, struct pdi_key *key, uint32_t pref, int *nr)" startline="155" endline="182">
int pdi_rule_delete (struct pdi_map *map, struct pdi_key *key, uint32_t pref, int *nr)
{
    struct pdi_rule *node = NULL;
    struct pdi_val *val, *tmp;
    PDI_MAP_LOCK (map);
    node = pdi_rule_delete__ (map, key, pref, nr);
    if (node != NULL) {
        pdi_rule2str (node);
        HASH_ITER (hh, node -> hash, val, tmp) {
            HASH_DEL (node->hash, val);
            if (map->pdi_del_map_em) {
                map->pdi_del_map_em (&val->val);
            }
            free (val);
            printf ("Hash del\n");
        }

        free (node);
        PDI_MAP_ULOCK (map);
        return 0;
    }
    PDI_MAP_ULOCK (map);
    return -1;
}
</source>
<source file="/home/sayandes/opened_extraction/examples/loxilb-ebpf-main/common/common_pdi.c" funcheader="struct pdi_rule *pdi_rule_get__ (struct pdi_map *map, struct pdi_key *val)" startline="184" endline="197">
struct pdi_rule *pdi_rule_get__ (struct pdi_map *map, struct pdi_key *val)
{
    struct pdi_rule *node = map->head;
    while (node) {
        if (PDI_PKEY_EQ (val, &node->key)) {
            return node;
        }
        node = node->next;
    }
    return NULL;
}
</source>
<source file="/home/sayandes/opened_extraction/examples/loxilb-ebpf-main/common/common_pdi.c" funcheader="int pdi_add_val (struct pdi_map *map, struct pdi_key *kval)" startline="199" endline="233">
int pdi_add_val (struct pdi_map *map, struct pdi_key *kval)
{
    struct pdi_val *hval = NULL;
    struct pdi_rule *rule = NULL;
    PDI_MAP_LOCK (map);
    rule = pdi_rule_get__ (map, kval);
    if (rule != NULL) {
        printf ("Found match --\n");
        pdi_rule2str (rule);
        HASH_FIND (hh, rule->hash, kval, sizeof (struct pdi_key), hval);
        if (hval) {
            printf ("hval exists\n");
            if (map->pdi_add_map_em) {
                map->pdi_add_map_em (kval, &rule->data, sizeof (rule->data));
            }
            PDI_MAP_ULOCK (map);
            return -EEXIST;
        }
        hval = calloc (1, sizeof (* hval));
        memcpy (&hval->val, kval, sizeof (*kval));
        hval->r = rule;
        HASH_ADD (hh, rule->hash, val, sizeof (struct pdi_key), hval);
        PDI_MAP_ULOCK (map);
        return 0;
    }
    PDI_MAP_ULOCK (map);
    return -1;
}
</source>
<source file="/home/sayandes/opened_extraction/examples/loxilb-ebpf-main/common/common_pdi.c" funcheader="int pdi_del_val (struct pdi_map *map, struct pdi_key *kval)" startline="235" endline="262">
int pdi_del_val (struct pdi_map *map, struct pdi_key *kval)
{
    struct pdi_val *hval = NULL;
    struct pdi_rule *rule = NULL;
    PDI_MAP_LOCK (map);
    rule = pdi_rule_get__ (map, kval);
    if (rule != NULL) {
        printf ("Found match --\n");
        pdi_rule2str (rule);
        HASH_FIND (hh, rule->hash, kval, sizeof (struct pdi_key), hval);
        if (hval == NULL) {
            printf ("hval does not exist\n");
            PDI_MAP_ULOCK (map);
            return -EINVAL;
        }
        HASH_DEL (rule->hash, hval);
        PDI_MAP_ULOCK (map);
        return 0;
    }
    PDI_MAP_ULOCK (map);
    return -1;
}
</source>
<source file="/home/sayandes/opened_extraction/examples/loxilb-ebpf-main/common/common_pdi.c" funcheader="static int pdi_val_expired (struct pdi_val *v)" startline="264" endline="269">
static int pdi_val_expired (struct pdi_val *v)
{
    return 0;
}
</source>
<source file="/home/sayandes/opened_extraction/examples/loxilb-ebpf-main/common/common_pdi.c" funcheader="void pdi_map_run (struct pdi_map *map)" startline="271" endline="297">
void pdi_map_run (struct pdi_map *map)
{
    struct pdi_rule *node;
    struct pdi_val *val, *tmp;
    char fmtstr [512] = {0};
    PDI_MAP_LOCK (map);
    node = map->head;
    while (node) {
        HASH_ITER (hh, node -> hash, val, tmp) {
            if (pdi_val_expired (val)) {
                HASH_DEL (node->hash, val);
                if (map->pdi_del_map_em) {
                    map->pdi_del_map_em (&val->val);
                }
                pdi_key2str (&val->val, fmtstr);
                printf ("Expired entry %s\n", fmtstr);
                free (val);
            }
        }

        node = node->next;
    }
    PDI_MAP_ULOCK (map);
}
</source>
<source file="/home/sayandes/opened_extraction/examples/loxilb-ebpf-main/common/common_pdi.c" funcheader="int pdi_unit_test (void)" startline="299" endline="396">
int pdi_unit_test (void)
{
    struct pdi_map *map;
    int r = 0;
    map = pdi_map_alloc ("ufw4", NULL, NULL);
    struct pdi_rule *new = calloc (1, sizeof (struct pdi_rule));
    if (new) {
        PDI_MATCH_INIT (&new->key.dest, 0x0a0a0a0a, 0xffffff00);
        PDI_RMATCH_INIT (&new->key.dport, 1, 100, 200);
        r = pdi_rule_insert (map, new, NULL);
        if (r != 0) {
            printf ("Insert fail1\n");
            exit (0);
        }
    }
    struct pdi_rule *new1 = calloc (1, sizeof (struct pdi_rule));
    if (new1) {
        memcpy (new1, new, sizeof (*new));
        new1->data.pref = 100;
        r = pdi_rule_insert (map, new1, NULL);
        if (r != 0) {
            printf ("Insert fail2\n");
            exit (0);
        }
    }
    struct pdi_rule *new2 = calloc (1, sizeof (struct pdi_rule));
    if (new2) {
        PDI_MATCH_INIT (&new2->key.dest, 0x0a0a0a0a, 0xffffff00);
        PDI_RMATCH_INIT (&new2->key.dport, 0, 100, 0xffff);
        r = pdi_rule_insert (map, new2, NULL);
        if (r != 0) {
            printf ("Insert fail3\n");
            exit (0);
        }
        r = pdi_rule_insert (map, new2, NULL);
        if (r == 0) {
            printf ("Insert fail4\n");
            exit (0);
        }
    }
    if (pdi_rule_delete (map, &new1->key, 100, NULL) != 0) {
        printf ("Delete fail4\n");
        exit (0);
    }
    struct pdi_rule *new4 = calloc (1, sizeof (struct pdi_rule));
    if (new4) {
        PDI_MATCH_INIT (&new4->key.dest, 0x0a0a0a0a, 0xffffff00);
        PDI_MATCH_INIT (&new4->key.source, 0x0b0b0b00, 0xffffff00);
        PDI_RMATCH_INIT (&new4->key.dport, 1, 500, 600);
        PDI_RMATCH_INIT (&new4->key.sport, 1, 500, 600);
        r = pdi_rule_insert (map, new4, NULL);
        if (r != 0) {
            printf ("Insert fail1\n");
            exit (0);
        }
    }
    pdi_rules2str (map);
    if (1) {
        struct pdi_key key = {0}
        ;
        PDI_VAL_INIT (&key.source, 0x0b0b0b0b);
        PDI_VAL_INIT (&key.dest, 0x0a0a0a0a);
        PDI_RVAL_INIT (&key.dport, 501);
        PDI_RVAL_INIT (&key.sport, 501);
        if (pdi_add_val (map, &key) != 0) {
            printf ("Failed to add pdi val1\n");
        }
    }
    if (1) {
        struct pdi_key key = {0}
        ;
        PDI_VAL_INIT (&key.source, 0x0b0b0b0b);
        PDI_VAL_INIT (&key.dest, 0x0a0a0a0a);
        PDI_RVAL_INIT (&key.dport, 502);
        PDI_RVAL_INIT (&key.sport, 502);
        if (pdi_add_val (map, &key) != 0) {
            printf ("Failed to add pdi val2\n");
        }
    }
    if (pdi_rule_delete (map, &new4->key, 0, NULL) != 0) {
        printf ("Failed delete--%d\n", __LINE__);
    }
    return 0;
}
</source>
</doc>
