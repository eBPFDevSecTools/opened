<?xml version="1.0"?>
<doc>
<source file="/home/sayandes/opened_extraction/examples/bcc-libbpf-tools-main/wakeuptime.bpf.c" funcheader="static int offcpu_sched_switch (struct task_struct *prev)" startline="36" endline="52">
static int offcpu_sched_switch (struct task_struct *prev)
{
    u64 pid_tgid = bpf_get_current_pid_tgid ();
    u32 pid = pid_tgid >> 32;
    u32 tid = (u32) pid_tgid;
    u64 ts;
    if (targ_pid && targ_pid != pid)
        return 0;
    if (user_threads_only && prev->flags & PF_KTHREAD)
        return 0;
    ts = bpf_ktime_get_ns ();
    bpf_map_update_elem (&start, &tid, &ts, BPF_ANY);
    return 0;
}
</source>
<source file="/home/sayandes/opened_extraction/examples/bcc-libbpf-tools-main/wakeuptime.bpf.c" funcheader="static int wakeup (void *ctx, struct task_struct *p)" startline="54" endline="82">
static int wakeup (void *ctx, struct task_struct *p)
{
    u32 pid = p->tgid;
    u32 tid = p->pid;
    u64 delta, *count_key, *tsp;
    static const u64 zero;
    struct key_t key = {}
    ;
    if (targ_pid && targ_pid != pid)
        return 0;
    tsp = bpf_map_lookup_elem (& start, & tid);
    if (tsp == 0)
        return 0;
    bpf_map_delete_elem (&start, &tid);
    delta = bpf_ktime_get_ns () - *tsp;
    if ((delta < min_block_ns) || (delta > max_block_ns))
        return 0;
    key.w_k_stack_id = bpf_get_stackid (ctx, &stackmap, 0);
    bpf_probe_read_kernel (&key.target, sizeof (key.target), p->comm);
    bpf_get_current_comm (&key.waker, sizeof (key.waker));
    count_key = bpf_map_lookup_or_try_init (& counts, & key, & zero);
    if (count_key)
        __atomic_add_fetch (count_key, delta, __ATOMIC_RELAXED);
    return 0;
}
</source>
<source file="/home/sayandes/opened_extraction/examples/bcc-libbpf-tools-main/wakeuptime.bpf.c" funcheader="int BPF_PROG (sched_switch, bool preempt, struct task_struct *prev, struct task_struct *next)" startline="86" endline="89">
int BPF_PROG (sched_switch, bool preempt, struct task_struct *prev, struct task_struct *next)
{
    return offcpu_sched_switch (prev);
}
</source>
<source file="/home/sayandes/opened_extraction/examples/bcc-libbpf-tools-main/wakeuptime.bpf.c" funcheader="int BPF_PROG (sched_wakeup, struct task_struct *p)" startline="92" endline="95">
int BPF_PROG (sched_wakeup, struct task_struct *p)
{
    return wakeup (ctx, p);
}
</source>
</doc>
