<?xml version="1.0"?>
<doc>
<source file="/home/sayandes/opened_extraction/examples/bcc-libbpf-tools-main/runqslower.bpf.c" funcheader="static int trace_enqueue (u32 tgid, u32 pid)" startline="30" endline="44">
static int trace_enqueue (u32 tgid, u32 pid)
{
    u64 ts;
    if (!pid)
        return 0;
    if (targ_tgid && targ_tgid != tgid)
        return 0;
    if (targ_pid && targ_pid != pid)
        return 0;
    ts = bpf_ktime_get_ns ();
    bpf_map_update_elem (&start, &pid, &ts, 0);
    return 0;
}
</source>
<source file="/home/sayandes/opened_extraction/examples/bcc-libbpf-tools-main/runqslower.bpf.c" funcheader="static int handle_switch (void *ctx, struct task_struct *prev, struct task_struct *next)" startline="46" endline="79">
static int handle_switch (void *ctx, struct task_struct *prev, struct task_struct *next)
{
    struct event event = {}
    ;
    u64 *tsp, delta_us;
    u32 pid;
    if (get_task_state (prev) == TASK_RUNNING)
        trace_enqueue (BPF_CORE_READ (prev, tgid), BPF_CORE_READ (prev, pid));
    pid = BPF_CORE_READ (next, pid);
    tsp = bpf_map_lookup_elem (& start, & pid);
    if (!tsp)
        return 0;
    delta_us = (bpf_ktime_get_ns () - *tsp) / 1000;
    if (min_us && delta_us <= min_us)
        return 0;
    event.pid = pid;
    event.prev_pid = BPF_CORE_READ (prev, pid);
    event.delta_us = delta_us;
    bpf_probe_read_kernel_str (&event.task, sizeof (event.task), next->comm);
    bpf_probe_read_kernel_str (&event.prev_task, sizeof (event.prev_task), prev->comm);
    bpf_perf_event_output (ctx, &events, BPF_F_CURRENT_CPU, &event, sizeof (event));
    bpf_map_delete_elem (&start, &pid);
    return 0;
}
</source>
<source file="/home/sayandes/opened_extraction/examples/bcc-libbpf-tools-main/runqslower.bpf.c" funcheader="int BPF_PROG (sched_wakeup, struct task_struct *p)" startline="82" endline="85">
int BPF_PROG (sched_wakeup, struct task_struct *p)
{
    return trace_enqueue (p->tgid, p->pid);
}
</source>
<source file="/home/sayandes/opened_extraction/examples/bcc-libbpf-tools-main/runqslower.bpf.c" funcheader="int BPF_PROG (sched_wakeup_new, struct task_struct *p)" startline="88" endline="91">
int BPF_PROG (sched_wakeup_new, struct task_struct *p)
{
    return trace_enqueue (p->tgid, p->pid);
}
</source>
<source file="/home/sayandes/opened_extraction/examples/bcc-libbpf-tools-main/runqslower.bpf.c" funcheader="int BPF_PROG (sched_switch, bool preempt, struct task_struct *prev, struct task_struct *next)" startline="94" endline="97">
int BPF_PROG (sched_switch, bool preempt, struct task_struct *prev, struct task_struct *next)
{
    return handle_switch (ctx, prev, next);
}
</source>
<source file="/home/sayandes/opened_extraction/examples/bcc-libbpf-tools-main/runqslower.bpf.c" funcheader="int BPF_PROG (handle_sched_wakeup, struct task_struct *p)" startline="100" endline="103">
int BPF_PROG (handle_sched_wakeup, struct task_struct *p)
{
    return trace_enqueue (BPF_CORE_READ (p, tgid), BPF_CORE_READ (p, pid));
}
</source>
<source file="/home/sayandes/opened_extraction/examples/bcc-libbpf-tools-main/runqslower.bpf.c" funcheader="int BPF_PROG (handle_sched_wakeup_new, struct task_struct *p)" startline="106" endline="109">
int BPF_PROG (handle_sched_wakeup_new, struct task_struct *p)
{
    return trace_enqueue (BPF_CORE_READ (p, tgid), BPF_CORE_READ (p, pid));
}
</source>
<source file="/home/sayandes/opened_extraction/examples/bcc-libbpf-tools-main/runqslower.bpf.c" funcheader="int BPF_PROG (handle_sched_switch, bool preempt, struct task_struct *prev, struct task_struct *next)" startline="112" endline="115">
int BPF_PROG (handle_sched_switch, bool preempt, struct task_struct *prev, struct task_struct *next)
{
    return handle_switch (ctx, prev, next);
}
</source>
</doc>
