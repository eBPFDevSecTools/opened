<?xml version="1.0"?>
<doc>
<source file="/home/sayandes/opened_extraction/examples/bcc-libbpf-tools-main/capable.bpf.c" funcheader="int BPF_KPROBE (kprobe__cap_capable_entry, const struct cred *cred, struct user_namespace *targ_ns, int cap, int cap_opt)" startline="75" endline="98">
int BPF_KPROBE (kprobe__cap_capable_entry, const struct cred *cred, struct user_namespace *targ_ns, int cap, int cap_opt)
{
    __u32 pid;
    __u64 pid_tgid;
    if (filter_cg && !bpf_current_task_under_cgroup (&cgroup_map, 0))
        return 0;
    pid_tgid = bpf_get_current_pid_tgid ();
    pid = pid_tgid >> 32;
    if (pid == my_pid)
        return 0;
    if (targ_pid != -1 && targ_pid != pid)
        return 0;
    struct args_t args = {}
    ;
    args.cap = cap;
    args.cap_opt = cap_opt;
    bpf_map_update_elem (&start, &pid_tgid, &args, 0);
    return 0;
}
</source>
<source file="/home/sayandes/opened_extraction/examples/bcc-libbpf-tools-main/capable.bpf.c" funcheader="int BPF_KRETPROBE (kprobe__cap_capable_exit)" startline="101" endline="160">
int BPF_KRETPROBE (kprobe__cap_capable_exit)
{
    __u64 pid_tgid;
    struct args_t *ap;
    struct key_t i_key;
    pid_tgid = bpf_get_current_pid_tgid ();
    ap = bpf_map_lookup_elem (& start, & pid_tgid);
    if (!ap)
        return 0;
    bpf_map_delete_elem (&start, &pid_tgid);
    struct cap_event event = {}
    ;
    event.pid = pid_tgid >> 32;
    event.tgid = pid_tgid;
    event.cap = ap->cap;
    event.uid = bpf_get_current_uid_gid ();
    bpf_get_current_comm (&event.task, sizeof (event.task));
    event.ret = PT_REGS_RC (ctx);
    if (LINUX_KERNEL_VERSION >= KERNEL_VERSION (5, 1, 0)) {
        event.audit = (ap->cap_opt & 0b10) == 0;
        event.insetid = (ap->cap_opt & 0b100) != 0;
    }
    else {
        event.audit = ap->cap_opt;
        event.insetid = -1;
    }
    if (unique_type) {
        struct unique_key key = {
            .cap = ap->cap}
        ;
        if (unique_type == UNQ_CGROUP)
            key.cgroupid = bpf_get_current_cgroup_id ();
        else
            key.tgid = pid_tgid;
        if (bpf_map_lookup_elem (&seen, &key) != NULL)
            return 0;
        u64 zero = 0;
        bpf_map_update_elem (&seen, &key, &zero, 0);
    }
    if (kernel_stack || user_stack) {
        i_key.pid = pid_tgid >> 32;
        i_key.tgid = pid_tgid;
        i_key.kern_stack_id = i_key.user_stack_id = -1;
        if (user_stack)
            i_key.user_stack_id = bpf_get_stackid (ctx, &stackmap, BPF_F_USER_STACK);
        if (kernel_stack)
            i_key.kern_stack_id = bpf_get_stackid (ctx, &stackmap, 0);
        bpf_map_update_elem (&info, &i_key, &event, BPF_NOEXIST);
    }
    bpf_perf_event_output (ctx, &events, BPF_F_CURRENT_CPU, &event, sizeof (event));
    return 0;
}
</source>
</doc>
