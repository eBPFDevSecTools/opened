<?xml version="1.0"?>
<doc>
<source file="/home/sayandes/opened_extraction/examples/ebpf-ratelimiter-main/ratelimiting_kern.c" funcheader="static __always_inline int _xdp_ratelimit (struct xdp_md *ctx)" startline="100" endline="276">
static __always_inline int _xdp_ratelimit (struct xdp_md *ctx)
{
    void *data_end = (void *) (long) ctx->data_end;
    void *data = (void *) (long) ctx->data;
    struct ethhdr *eth = data;
    if (data + sizeof (*eth) > data_end)
        return XDP_DROP;
    uint16_t eth_type = eth->h_proto;
    if (ntohs (eth_type) != ETH_P_IP) {
        return XDP_PASS;
    }
    struct iphdr *iph = data + sizeof (struct ethhdr);
    if (iph + 1 > data_end)
        return XDP_PASS;
    if (iph->protocol != IPPROTO_TCP)
        return XDP_PASS;
    struct tcphdr *tcph = (struct tcphdr *) (iph + 1);
    if (tcph + 1 > data_end)
        return XDP_PASS;
    bpf_printk ("NEW: TCP Syn : %d\n", tcph->syn & TCP_FLAGS);
    if (!(tcph->syn & TCP_FLAGS)) {
        return XDP_PASS;
    }
    if (tcph->ack & TCP_FLAGS)
        return XDP_PASS;
    uint16_t dstport = bpf_ntohs (tcph -> dest);
    uint64_t rkey = 0;
    uint64_t *rate = bpf_map_lookup_elem (&rl_config_map, &rkey);
    if (!rate) {
        bpf_printk ("Return: rate %d\n", rkey);
        return XDP_PASS;
    }
    else {
    }
    bpf_printk ("Allowed connections rate: %d\n", *rate);
    uint64_t tnow = bpf_ktime_get_ns ();
    uint64_t NANO = 1000000000;
    uint64_t MULTIPLIER = 100;
    uint64_t cw_key = (tnow / NANO) * NANO;
    uint64_t pw_key = cw_key - NANO;
    uint64_t *pw_count = bpf_map_lookup_elem (&rl_window_map, &pw_key);
    uint32_t *cw_count = bpf_map_lookup_elem (&rl_window_map, &cw_key);
    uint64_t *in_count = bpf_map_lookup_elem (&rl_recv_count_map, &rkey);
    uint64_t *drop_count = bpf_map_lookup_elem (&rl_drop_count_map, &rkey);
    if (!in_count || !drop_count) {
        bpf_printk ("count null %d\n", rate);
        return XDP_PASS;
    }
    (*in_count)++;
    if (!cw_count) {
        uint64_t init_count = 0;
        bpf_map_update_elem (&rl_window_map, &cw_key, &init_count, BPF_NOEXIST);
        cw_count = bpf_map_lookup_elem (& rl_window_map, & cw_key);
        if (!cw_count)
            return XDP_PASS;
    }
    if (!pw_count) {
        if (*cw_count >= *rate) {
            (*drop_count)++;
            bpf_printk ("DROPPING CONNECTION: CT  %d\n", *cw_count);
            return XDP_DROP;
        }
        (*cw_count)++;
        bpf_printk ("ALLOWING CONNECTION: CT %d\n", *cw_count);
        return XDP_PASS;
    }
    uint64_t pw_weight = MULTIPLIER - (uint64_t) (((tnow - cw_key) * MULTIPLIER) / NANO);
    uint64_t total_count = (uint64_t) ((pw_weight *(* pw_count)) +(*cw_count) * MULTIPLIER);
    bpf_printk ("tot_ct : %d\n", total_count);
    bpf_printk ("cw1_ct : %d\n", *cw_count);
    if (total_count > (*rate)) {
        (*drop_count)++;
        bpf_printk ("DROPPING CONNECTION: CT  %d\n", *cw_count);
        return XDP_DROP;
    }
    (*cw_count)++;
    bpf_printk ("ALLOWING CONNECTION: CT  %d\n", *cw_count);
    return XDP_PASS;
}
</source>
<source file="/home/sayandes/opened_extraction/examples/ebpf-ratelimiter-main/ratelimiting_kern.c" funcheader="int _xdp_ratelimiting (struct xdp_md *ctx)" startline="279" endline="289">
int _xdp_ratelimiting (struct xdp_md *ctx)
{
    bpf_printk ("entered xdp_rate_limiter\n");
    int rc = _xdp_ratelimit (ctx);
    if (rc == XDP_DROP) {
        return XDP_DROP;
    }
    return XDP_PASS;
}
</source>
</doc>
