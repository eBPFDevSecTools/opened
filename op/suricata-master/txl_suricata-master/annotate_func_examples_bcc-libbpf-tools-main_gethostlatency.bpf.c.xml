<?xml version="1.0"?>
<doc>
<source file="/home/sayandes/opened_extraction/examples/bcc-libbpf-tools-main/gethostlatency.bpf.c" funcheader="static int probe_entry (struct pt_regs *ctx)" startline="26" endline="45">
static int probe_entry (struct pt_regs *ctx)
{
    if (!PT_REGS_PARM1(ctx))
        return 0;
    __u64 pid_tgid = bpf_get_current_pid_tgid ();
    __u32 pid = pid_tgid >> 32;
    __u32 tid = (__u32) pid_tgid;
    struct event event = {}
    ;
    if (target_pid && target_pid != pid)
        return 0;
    event.time = bpf_ktime_get_ns ();
    event.pid = pid;
    bpf_get_current_comm (&event.comm, sizeof (event.comm));
    bpf_probe_read_user (&event.host, sizeof (event.host), (void *) PT_REGS_PARM1 (ctx));
    bpf_map_update_elem (&starts, &tid, &event, BPF_ANY);
    return 0;
}
</source>
<source file="/home/sayandes/opened_extraction/examples/bcc-libbpf-tools-main/gethostlatency.bpf.c" funcheader="static int probe_return (struct pt_regs *ctx)" startline="47" endline="61">
static int probe_return (struct pt_regs *ctx)
{
    __u32 tid = (__u32) bpf_get_current_pid_tgid ();
    struct event *eventp;
    eventp = bpf_map_lookup_elem (& starts, & tid);
    if (!eventp)
        return 0;
    eventp->time = bpf_ktime_get_ns () - eventp->time;
    bpf_perf_event_output (ctx, &events, BPF_F_CURRENT_CPU, eventp, sizeof (*eventp));
    bpf_map_delete_elem (&starts, &tid);
    return 0;
}
</source>
<source file="/home/sayandes/opened_extraction/examples/bcc-libbpf-tools-main/gethostlatency.bpf.c" funcheader="int BPF_KPROBE (handle_entry)" startline="64" endline="67">
int BPF_KPROBE (handle_entry)
{
    return probe_entry (ctx);
}
</source>
<source file="/home/sayandes/opened_extraction/examples/bcc-libbpf-tools-main/gethostlatency.bpf.c" funcheader="int BPF_KRETPROBE (handle_return)" startline="70" endline="73">
int BPF_KRETPROBE (handle_return)
{
    return probe_return (ctx);
}
</source>
</doc>
