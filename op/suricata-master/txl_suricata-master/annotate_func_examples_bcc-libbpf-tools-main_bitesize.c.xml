<?xml version="1.0"?>
<doc>
<source file="/home/sayandes/opened_extraction/examples/bcc-libbpf-tools-main/bitesize.c" funcheader="static error_t parse_arg (int key, char *arg, struct argp_state *state)" startline="55" endline="106">
static error_t parse_arg (int key, char *arg, struct argp_state *state)
{
    static int pos_args, len;
    switch (key) {
    case 'h' :
        argp_state_help (state, stderr, ARGP_HELP_STD_HELP);
        break;
    case 'v' :
        env.verbose = true;
        break;
    case 'c' :
        env.comm = arg;
        len = strlen (arg) + 1;
        env.comm_len = len > TASK_COMM_LEN ? TASK_COMM_LEN : len;
        break;
    case 'd' :
        env.disk = arg;
        if (strlen (arg) + 1 > DISK_NAME_LEN) {
            fprintf (stderr, "invaild disk name: too long\n");
            argp_usage (state);
        }
        break;
    case 'T' :
        env.timestamp = true;
        break;
    case ARGP_KEY_ARG :
        errno = 0;
        if (pos_args == 0) {
            env.interval = strtol (arg, NULL, 10);
            if (errno) {
                fprintf (stderr, "invalid internal\n");
                argp_usage (state);
            }
        }
        else if (pos_args == 1) {
            env.times = strtol (arg, NULL, 10);
            if (errno) {
                fprintf (stderr, "invalid times\n");
                argp_usage (state);
            }
        }
        else {
            fprintf (stderr, "unrecognized positional argument: %s\n", arg);
            argp_usage (state);
        }
        pos_args++;
        break;
    default :
        return ARGP_ERR_UNKNOWN;
    }
    return 0;
}
</source>
<source file="/home/sayandes/opened_extraction/examples/bcc-libbpf-tools-main/bitesize.c" funcheader="static int libbpf_print_fn (enum libbpf_print_level level, const char *format, va_list args)" startline="108" endline="113">
static int libbpf_print_fn (enum libbpf_print_level level, const char *format, va_list args)
{
    if (level == LIBBPF_DEBUG && !env.verbose)
        return 0;
    return vfprintf (stderr, format, args);
}
</source>
<source file="/home/sayandes/opened_extraction/examples/bcc-libbpf-tools-main/bitesize.c" funcheader="static void sig_handler (int sig)" startline="115" endline="118">
static void sig_handler (int sig)
{
    exiting = true;
}
</source>
<source file="/home/sayandes/opened_extraction/examples/bcc-libbpf-tools-main/bitesize.c" funcheader="static int print_log2_hists (int fd)" startline="120" endline="149">
static int print_log2_hists (int fd)
{
    struct hist_key lookup_key, next_key;
    struct hist hist;
    int err;
    memset (lookup_key.comm, '?', sizeof (lookup_key.comm));
    while (!bpf_map_get_next_key (fd, &lookup_key, &next_key)) {
        err = bpf_map_lookup_elem (fd, & next_key, & hist);
        if (err < 0) {
            fprintf (stderr, "failed to lookup hist: %d\n", err);
            return -1;
        }
        printf ("\nProcess Name = %s\n", next_key.comm);
        print_log2_hist (hist.slots, MAX_SLOTS, "Kbytes");
        lookup_key = next_key;
    }
    memset (lookup_key.comm, '?', sizeof (lookup_key.comm));
    while (!bpf_map_get_next_key (fd, &lookup_key, &next_key)) {
        err = bpf_map_delete_elem (fd, & next_key);
        if (err < 0) {
            fprintf (stderr, "failed to cleanup hist : %d\n", err);
            return -1;
        }
        lookup_key = next_key;
    }
    return 0;
}
</source>
<source file="/home/sayandes/opened_extraction/examples/bcc-libbpf-tools-main/bitesize.c" funcheader="int main (int argc, char **argv)" startline="151" endline="241">
int main (int argc, char **argv)
{
    struct partitions *partitions = NULL;
    const struct partition *partition;
    static const struct argp argp = {
        .options = opts,
        .parser = parse_arg,
        .doc = argp_program_doc,}
    ;
    struct bitesize_bpf *obj;
    struct tm *tm;
    char ts [32];
    int fd, err;
    time_t t;
    err = argp_parse (& argp, argc, argv, 0, NULL, NULL);
    if (err)
        return err;
    libbpf_set_strict_mode (LIBBPF_STRICT_ALL);
    libbpf_set_print (libbpf_print_fn);
    obj = bitesize_bpf__open ();
    if (!obj) {
        fprintf (stderr, "failed to open BPF object\n");
        return 1;
    }
    partitions = partitions__load ();
    if (!partitions) {
        fprintf (stderr, "failed to load partitions info\n");
        goto cleanup;
    }
    if (env.comm)
        strncpy ((char *) obj->rodata->targ_comm, env.comm, env.comm_len);
    if (env.disk) {
        partition = partitions__get_by_name (partitions, env.disk);
        if (!partition) {
            fprintf (stderr, "invaild partition name: not exist\n");
            goto cleanup;
        }
        obj->rodata->filter_dev = true;
        obj->rodata->targ_dev = partition->dev;
    }
    err = bitesize_bpf__load (obj);
    if (err) {
        fprintf (stderr, "failed to load BPF object: %d\n", err);
        goto cleanup;
    }
    err = bitesize_bpf__attach (obj);
    if (err) {
        fprintf (stderr, "failed to attach BPF programs\n");
        goto cleanup;
    }
    fd = bpf_map__fd (obj -> maps.hists);
    signal (SIGINT, sig_handler);
    printf ("Tracing block device I/O... Hit Ctrl-C to end.\n");
    while (1) {
        sleep (env.interval);
        printf ("\n");
        if (env.timestamp) {
            time (&t);
            tm = localtime (& t);
            strftime (ts, sizeof (ts), "%H:%M:%S", tm);
            printf ("%-8s\n", ts);
        }
        err = print_log2_hists (fd);
        if (err)
            break;
        if (exiting || --env.times == 0)
            break;
    }
cleanup :
    bitesize_bpf__destroy (obj);
    partitions__free (partitions);
    return err != 0;
}
</source>
</doc>
