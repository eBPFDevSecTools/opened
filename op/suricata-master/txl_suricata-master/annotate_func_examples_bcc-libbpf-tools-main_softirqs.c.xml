<?xml version="1.0"?>
<doc>
<source file="/home/sayandes/opened_extraction/examples/bcc-libbpf-tools-main/softirqs.c" funcheader="static error_t parse_arg (int key, char *arg, struct argp_state *state)" startline="59" endline="107">
static error_t parse_arg (int key, char *arg, struct argp_state *state)
{
    static int pos_args;
    switch (key) {
    case 'h' :
        argp_state_help (state, stderr, ARGP_HELP_STD_HELP);
        break;
    case 'v' :
        env.verbose = true;
        break;
    case 'd' :
        env.distributed = true;
        break;
    case 'N' :
        env.nanoseconds = true;
        break;
    case 'T' :
        env.timestamp = true;
        break;
    case 'C' :
        env.count = true;
        break;
    case ARGP_KEY_ARG :
        errno = 0;
        if (pos_args == 0) {
            env.interval = strtol (arg, NULL, 10);
            if (errno) {
                fprintf (stderr, "invalid internal\n");
                argp_usage (state);
            }
        }
        else if (pos_args == 1) {
            env.times = strtol (arg, NULL, 10);
            if (errno) {
                fprintf (stderr, "invalid times\n");
                argp_usage (state);
            }
        }
        else {
            fprintf (stderr, "unrecognized positional argument: %s\n", arg);
            argp_usage (state);
        }
        pos_args++;
        break;
    default :
        return ARGP_ERR_UNKNOWN;
    }
    return 0;
}
</source>
<source file="/home/sayandes/opened_extraction/examples/bcc-libbpf-tools-main/softirqs.c" funcheader="static int libbpf_print_fn (enum libbpf_print_level level, const char *format, va_list args)" startline="109" endline="114">
static int libbpf_print_fn (enum libbpf_print_level level, const char *format, va_list args)
{
    if (level == LIBBPF_DEBUG && !env.verbose)
        return 0;
    return vfprintf (stderr, format, args);
}
</source>
<source file="/home/sayandes/opened_extraction/examples/bcc-libbpf-tools-main/softirqs.c" funcheader="static void sig_handler (int sig)" startline="116" endline="119">
static void sig_handler (int sig)
{
    exiting = true;
}
</source>
<source file="/home/sayandes/opened_extraction/examples/bcc-libbpf-tools-main/softirqs.c" funcheader="static int print_count (struct softirqs_bpf__bss *bss)" startline="148" endline="172">
static int print_count (struct softirqs_bpf__bss *bss)
{
    const char *units = env.nanoseconds ? "nsecs" : "usecs";
    __u64 count, time;
    __u32 vec;
    printf ("%-16s %-6s%-5s  %-11s\n", "SOFTIRQ", "TOTAL_", units, env.count ? "TOTAL_count" : "");
    for (vec = 0; vec < NR_SOFTIRQS; vec++) {
        time = __atomic_exchange_n (& bss -> time [vec], 0, __ATOMIC_RELAXED);
        count = __atomic_exchange_n (& bss -> counts [vec], 0, __ATOMIC_RELAXED);
        if (count > 0) {
            printf ("%-16s %11llu", vec_names[vec], time);
            if (env.count) {
                printf ("  %11llu", count);
            }
            printf ("\n");
        }
    }
    return 0;
}
</source>
<source file="/home/sayandes/opened_extraction/examples/bcc-libbpf-tools-main/softirqs.c" funcheader="static int print_hist (struct softirqs_bpf__bss *bss)" startline="176" endline="193">
static int print_hist (struct softirqs_bpf__bss *bss)
{
    const char *units = env.nanoseconds ? "nsecs" : "usecs";
    __u32 vec;
    for (vec = 0; vec < NR_SOFTIRQS; vec++) {
        struct hist hist = bss->hists[vec];
        bss->hists[vec] = zero;
        if (!memcmp (&zero, &hist, sizeof (hist)))
            continue;
        printf ("softirq = %s\n", vec_names[vec]);
        print_log2_hist (hist.slots, MAX_SLOTS, units);
        printf ("\n");
    }
    return 0;
}
</source>
<source file="/home/sayandes/opened_extraction/examples/bcc-libbpf-tools-main/softirqs.c" funcheader="int main (int argc, char **argv)" startline="195" endline="281">
int main (int argc, char **argv)
{
    static const struct argp argp = {
        .options = opts,
        .parser = parse_arg,
        .doc = argp_program_doc,}
    ;
    struct softirqs_bpf *obj;
    struct tm *tm;
    char ts [32];
    time_t t;
    int err;
    err = argp_parse (& argp, argc, argv, 0, NULL, NULL);
    if (err)
        return err;
    libbpf_set_strict_mode (LIBBPF_STRICT_ALL);
    libbpf_set_print (libbpf_print_fn);
    obj = softirqs_bpf__open ();
    if (!obj) {
        fprintf (stderr, "failed to open BPF object\n");
        return 1;
    }
    if (probe_tp_btf ("softirq_entry")) {
        bpf_program__set_autoload (obj->progs.softirq_entry, false);
        bpf_program__set_autoload (obj->progs.softirq_exit, false);
    }
    else {
        bpf_program__set_autoload (obj->progs.softirq_entry_btf, false);
        bpf_program__set_autoload (obj->progs.softirq_exit_btf, false);
    }
    obj->rodata->targ_dist = env.distributed;
    obj->rodata->targ_ns = env.nanoseconds;
    err = softirqs_bpf__load (obj);
    if (err) {
        fprintf (stderr, "failed to load BPF object: %d\n", err);
        goto cleanup;
    }
    if (!obj->bss) {
        fprintf (stderr, "Memory-mapping BPF maps is supported starting from Linux 5.7, please upgrade.\n");
        goto cleanup;
    }
    err = softirqs_bpf__attach (obj);
    if (err) {
        fprintf (stderr, "failed to attach BPF programs\n");
        goto cleanup;
    }
    signal (SIGINT, sig_handler);
    printf ("Tracing soft irq event time... Hit Ctrl-C to end.\n");
    while (1) {
        sleep (env.interval);
        printf ("\n");
        if (env.timestamp) {
            time (&t);
            tm = localtime (& t);
            strftime (ts, sizeof (ts), "%H:%M:%S", tm);
            printf ("%-8s\n", ts);
        }
        if (!env.distributed)
            err = print_count (obj->bss);
        else
            err = print_hist (obj->bss);
        if (err)
            break;
        if (exiting || --env.times == 0)
            break;
    }
cleanup :
    softirqs_bpf__destroy (obj);
    return err != 0;
}
</source>
</doc>
