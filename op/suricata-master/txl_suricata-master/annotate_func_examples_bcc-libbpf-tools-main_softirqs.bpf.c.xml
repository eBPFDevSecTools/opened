<?xml version="1.0"?>
<doc>
<source file="/home/sayandes/opened_extraction/examples/bcc-libbpf-tools-main/softirqs.bpf.c" funcheader="static int handle_entry (unsigned int vec_nr)" startline="24" endline="31">
static int handle_entry (unsigned int vec_nr)
{
    u64 ts = bpf_ktime_get_ns ();
    u32 key = 0;
    bpf_map_update_elem (&start, &key, &ts, BPF_ANY);
    return 0;
}
</source>
<source file="/home/sayandes/opened_extraction/examples/bcc-libbpf-tools-main/softirqs.bpf.c" funcheader="static int handle_exit (unsigned int vec_nr)" startline="33" endline="62">
static int handle_exit (unsigned int vec_nr)
{
    u64 delta, *tsp;
    u32 key = 0;
    if (vec_nr >= NR_SOFTIRQS)
        return 0;
    tsp = bpf_map_lookup_elem (& start, & key);
    if (!tsp)
        return 0;
    delta = bpf_ktime_get_ns () - *tsp;
    if (!targ_ns)
        delta /= 1000U;
    if (!targ_dist) {
        __sync_fetch_and_add (&counts[vec_nr], 1);
        __sync_fetch_and_add (&time[vec_nr], delta);
    }
    else {
        struct hist *hist;
        u64 slot;
        hist = &hists[vec_nr];
        slot = log2 (delta);
        if (slot >= MAX_SLOTS)
            slot = MAX_SLOTS - 1;
        __sync_fetch_and_add (&hist->slots[slot], 1);
    }
    return 0;
}
</source>
<source file="/home/sayandes/opened_extraction/examples/bcc-libbpf-tools-main/softirqs.bpf.c" funcheader="int BPF_PROG (softirq_entry_btf, unsigned int vec_nr)" startline="65" endline="68">
int BPF_PROG (softirq_entry_btf, unsigned int vec_nr)
{
    return handle_entry (vec_nr);
}
</source>
<source file="/home/sayandes/opened_extraction/examples/bcc-libbpf-tools-main/softirqs.bpf.c" funcheader="int BPF_PROG (softirq_exit_btf, unsigned int vec_nr)" startline="71" endline="74">
int BPF_PROG (softirq_exit_btf, unsigned int vec_nr)
{
    return handle_exit (vec_nr);
}
</source>
<source file="/home/sayandes/opened_extraction/examples/bcc-libbpf-tools-main/softirqs.bpf.c" funcheader="int BPF_PROG (softirq_entry, unsigned int vec_nr)" startline="77" endline="80">
int BPF_PROG (softirq_entry, unsigned int vec_nr)
{
    return handle_entry (vec_nr);
}
</source>
<source file="/home/sayandes/opened_extraction/examples/bcc-libbpf-tools-main/softirqs.bpf.c" funcheader="int BPF_PROG (softirq_exit, unsigned int vec_nr)" startline="83" endline="86">
int BPF_PROG (softirq_exit, unsigned int vec_nr)
{
    return handle_exit (vec_nr);
}
</source>
</doc>
