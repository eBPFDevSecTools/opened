<?xml version="1.0"?>
<doc>
<source file="/home/sayandes/opened_extraction/examples/suricata-master/ebpf/filter.c" funcheader="static __always_inline int ipv4_filter (struct  __sk_buff *skb)" startline="46" endline="81">
static __always_inline int ipv4_filter (struct  __sk_buff *skb)
{
    __u32 nhoff;
    __u32 *value;
    __u32 ip = 0;
    nhoff = skb->cb[0];
    ip = load_word (skb, nhoff + offsetof (struct iphdr, saddr));
    value = bpf_map_lookup_elem (& ipv4_drop, & ip);
    if (value) {

#if DEBUG
        char fmt [] = "Found value for saddr: %u\n";
        bpf_trace_printk (fmt, sizeof (fmt), value);

#endif
        *value = *value + 1;
        return 0;
    }
    ip = load_word (skb, nhoff + offsetof (struct iphdr, daddr));
    value = bpf_map_lookup_elem (& ipv4_drop, & ip);
    if (value) {

#if DEBUG
        char fmt [] = "Found value for daddr: %u\n";
        bpf_trace_printk (fmt, sizeof (fmt), value);

#endif
        *value = *value + 1;
        return 0;
    }

#if DEBUG
    char fmt [] = "Nothing so ok\n";
    bpf_trace_printk (fmt, sizeof (fmt));

#endif
    return -1;
}
</source>
<source file="/home/sayandes/opened_extraction/examples/suricata-master/ebpf/filter.c" funcheader="static __always_inline int ipv6_filter (struct  __sk_buff *skb)" startline="83" endline="86">
static __always_inline int ipv6_filter (struct  __sk_buff *skb)
{
    return -1;
}
</source>
<source file="/home/sayandes/opened_extraction/examples/suricata-master/ebpf/filter.c" funcheader="int SEC (\"filter\") hashfilter (struct  __sk_buff *skb)" startline="88" endline="110">
int SEC ("filter") hashfilter (struct  __sk_buff *skb)
{
    __u32 nhoff = ETH_HLEN;
    __u16 proto = load_half (skb, offsetof (struct ethhdr, h_proto));
    if (proto == ETH_P_8021AD || proto == ETH_P_8021Q) {
        proto = load_half (skb, nhoff + offsetof (struct vlan_hdr, h_vlan_encapsulated_proto));
        nhoff += sizeof (struct vlan_hdr);
    }
    skb->cb[0] = nhoff;
    switch (proto) {
    case ETH_P_IP :
        return ipv4_filter (skb);
    case ETH_P_IPV6 :
        return ipv6_filter (skb);
    default :
        break;
    }
    return -1;
}
</source>
</doc>
