<?xml version="1.0"?>
<doc>
<source file="/home/sayandes/opened_extraction/examples/tpc-ebpf/ebpf_n_rto_changer.c" funcheader="static __u32 inner_loop (__u32 srh_id, struct dst_infos *dst_infos)" startline="16" endline="41">
static __u32 inner_loop (__u32 srh_id, struct dst_infos *dst_infos)
{

#pragma clang loop unroll(full)
    for (__u32 i = 0; i <= MAX_SRH_BY_DEST - 1; i++) {
        if (!dst_infos)
            continue;
        struct srh_record_t *srh_record = &dst_infos->srhs[i];
        if (!srh_record || !srh_record->srh.type) {
            continue;
        }
        if (!srh_record->is_valid) {
            continue;
        }
        if (i > srh_id) {
            return i;
        }
    }
    return 0;
}
</source>
<source file="/home/sayandes/opened_extraction/examples/tpc-ebpf/ebpf_n_rto_changer.c" funcheader="static int move_path (struct bpf_elf_map *dst_map, void *id, __u32 key, struct bpf_sock_ops *skops)" startline="43" endline="76">
static int move_path (struct bpf_elf_map *dst_map, void *id, __u32 key, struct bpf_sock_ops *skops)
{
    int val = 1;
    int rv = 1;
    char cc [20];
    char tmp_cc [5] = "reno";
    struct dst_infos *dst_infos = (void *) bpf_map_lookup_elem (dst_map, id);
    if (dst_infos) {
        struct ip6_srh_t *srh = NULL;
        if (key >= 0 && key < MAX_SRH_BY_DEST) {
            srh = &(dst_infos->srhs[key].srh);
            rv = bpf_setsockopt (skops, SOL_IPV6, IPV6_RTHDR, srh, sizeof (* srh));
        }
        if (!rv) {
            if (!rv) {
                rv = bpf_setsockopt (skops, SOL_TCP, TCP_PATH_CHANGED, & val, sizeof (val));
            }
        }
    }
    return !!rv;
}
</source>
<source file="/home/sayandes/opened_extraction/examples/tpc-ebpf/ebpf_n_rto_changer.c" funcheader="static int create_new_flow_infos (struct bpf_elf_map *dt_map, struct bpf_elf_map *c_map, struct flow_tuple *flow_id, __u64 cur_time, struct bpf_sock_ops *skops)" startline="78" endline="92">
static int create_new_flow_infos (struct bpf_elf_map *dt_map, struct bpf_elf_map *c_map, struct flow_tuple *flow_id, __u64 cur_time, struct bpf_sock_ops *skops)
{
    struct flow_infos *flow_info;
    struct flow_infos new_flow;
    int rv = 0;
    memset (&new_flow, 0, sizeof (struct flow_infos));
    new_flow.last_move_time = cur_time;
    struct dst_infos *dst_infos = (void *) bpf_map_lookup_elem (dt_map, flow_id->remote_addr);
    if (!dst_infos)
        return 1;
    return bpf_map_update_elem (c_map, flow_id, &new_flow, BPF_ANY);
}
</source>
<source file="/home/sayandes/opened_extraction/examples/tpc-ebpf/ebpf_n_rto_changer.c" funcheader="int handle_sockop (struct bpf_sock_ops *skops)" startline="95" endline="263">
int handle_sockop (struct bpf_sock_ops *skops)
{
    struct flow_infos *flow_info;
    struct flow_tuple flow_id;
    int rv = 0;
    __u64 cur_time;
    cur_time = bpf_ktime_get_ns ();
    if (skops->family != AF_INET6) {
        skops->reply = -1;
        return 0;
    }
    get_flow_id_from_sock (&flow_id, skops);
    flow_info = (void *) bpf_map_lookup_elem (&conn_map, &flow_id);
    switch ((int) skops->op) {
    case BPF_SOCK_OPS_TCP_CONNECT_CB :
    case BPF_SOCK_OPS_PASSIVE_ESTABLISHED_CB :
        if (!flow_info) {
            if (create_new_flow_infos (&dest_map, &conn_map, &flow_id, cur_time, skops)) {
                return 1;
            }
            flow_info = (void *) bpf_map_lookup_elem (&conn_map, &flow_id);
            if (!flow_info) {
                return 1;
            }
        }
        bpf_debug ("INIT CONN snd_cwnd: %u\n", skops->snd_cwnd);
        flow_info->last_move_time = cur_time;
        flow_info->srh_id = 0;
        move_path (&dest_map, flow_id.remote_addr, flow_info->srh_id, skops);
        rv = bpf_map_update_elem (& conn_map, & flow_id, flow_info, BPF_ANY);
        if (rv)
            return 1;
        take_snapshot (&stat_map, flow_info, &flow_id, skops->op);
        bpf_sock_ops_cb_flags_set (skops, (BPF_SOCK_OPS_RETRANS_CB_FLAG | BPF_SOCK_OPS_RTO_CB_FLAG | BPF_SOCK_OPS_RTT_CB_FLAG | BPF_SOCK_OPS_STATE_CB_FLAG));
        skops->reply = rv;
        break;
    case BPF_SOCK_OPS_STATE_CB :
        if (skops->args[1] == BPF_TCP_CLOSE || skops->args[1] == BPF_TCP_CLOSE_WAIT || skops->args[1] == BPF_TCP_CLOSING || skops->args[1] == BPF_TCP_FIN_WAIT1 || skops->args[1] == BPF_TCP_FIN_WAIT2) {
            if (!flow_info) {
                return 0;
            }
            bpf_map_delete_elem (&conn_map, &flow_id);
        }
        break;
    case BPF_SOCK_OPS_DUPACK :
        if (!flow_info) {
            return 1;
        }
        flow_info->retrans_count += 1;
        if (flow_info->last_rcv_nxt != skops->rcv_nxt) {
            flow_info->last_rcv_nxt = skops->rcv_nxt;
            flow_info->retrans_count = 1;
            rv = bpf_map_update_elem (& conn_map, & flow_id, flow_info, BPF_ANY);
            break;
        }
        if (flow_info->retrans_count < 2) {
            rv = bpf_map_update_elem (& conn_map, & flow_id, flow_info, BPF_ANY);
            break;
        }
        __u32 key_dup = 0;
        struct dst_infos *dst_infos_dup = (void *) bpf_map_lookup_elem (&dest_map, flow_id.remote_addr);
        key_dup = inner_loop (flow_info -> srh_id, dst_infos_dup);
        if (key_dup == flow_info->srh_id) {
            rv = bpf_map_update_elem (& conn_map, & flow_id, flow_info, BPF_ANY);
            break;
        }
        bpf_debug ("DUP ACK - Change path to %u\n", key_dup);
        rv = move_path (& dest_map, flow_id.remote_addr, key_dup, skops);
        if (!rv) {
            flow_info->srh_id = key_dup;
            flow_info->last_move_time = cur_time;
            flow_info->retrans_count = 0;
            bpf_debug ("DUP ACK - Path changed to %u\n", key_dup);
        }
        take_snapshot (&stat_map, flow_info, &flow_id, skops->op);
        break;
    case BPF_SOCK_OPS_RETRANS_CB :
        if (!flow_info) {
            return 0;
        }
        bpf_debug ("Retransmission: for %llu\n", skops->snd_una);
        take_snapshot (&stat_map, flow_info, &flow_id, skops->op);
        break;
    case BPF_SOCK_OPS_RTO_CB :
        if (!flow_info) {
            return 1;
        }
        flow_info->retrans_count += 1;
        bpf_debug ("Retransmission timeout: nbr %llu for %llu\n", flow_info->retrans_count, skops->snd_una);
        bpf_debug ("snd_cwnd: %u - packets_out %u\n", skops->snd_cwnd, skops->packets_out);
        if (flow_info->last_snd_una + 3000 < skops->snd_una) {
            flow_info->last_snd_una = skops->snd_una;
            flow_info->retrans_count = 1;
            rv = bpf_map_update_elem (& conn_map, & flow_id, flow_info, BPF_ANY);
            take_snapshot (&stat_map, flow_info, &flow_id, skops->op);
            break;
        }
        if (flow_info->retrans_count < 3) {
            rv = bpf_map_update_elem (& conn_map, & flow_id, flow_info, BPF_ANY);
            take_snapshot (&stat_map, flow_info, &flow_id, skops->op);
            break;
        }
        __u32 key = 0;
        struct dst_infos *dst_infos = (void *) bpf_map_lookup_elem (&dest_map, flow_id.remote_addr);
        key = inner_loop (flow_info -> srh_id, dst_infos);
        if (key == flow_info->srh_id) {
            rv = bpf_map_update_elem (& conn_map, & flow_id, flow_info, BPF_ANY);
            break;
        }
        bpf_debug ("RTO - Change path to %u\n", key);
        rv = move_path (& dest_map, flow_id.remote_addr, key, skops);
        if (!rv) {
            flow_info->srh_id = key;
            flow_info->last_move_time = cur_time;
            flow_info->retrans_count = 0;
            bpf_debug ("RTO - Path changed to %u\n", key);
        }
        take_snapshot (&stat_map, flow_info, &flow_id, skops->op);
        rv = bpf_map_update_elem (& conn_map, & flow_id, flow_info, BPF_ANY);
        break;
    }
    skops->reply = rv;
    return 0;
}
</source>
</doc>
