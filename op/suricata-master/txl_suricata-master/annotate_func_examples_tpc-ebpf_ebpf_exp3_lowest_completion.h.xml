<?xml version="1.0"?>
<doc>
<source file="/home/sayandes/opened_extraction/examples/tpc-ebpf/ebpf_exp3_lowest_completion.h" funcheader="static void take_snapshot (struct bpf_elf_map *st_map, struct dst_infos *dst_info, struct flow_infos *flow_info)" startline="53" endline="96">
static void take_snapshot (struct bpf_elf_map *st_map, struct dst_infos *dst_info, struct flow_infos *flow_info)
{
    struct flow_snapshot *curr_snapshot = NULL;
    struct snapshot_arg arg = {
        .new_snapshot = NULL,
        .oldest_seq = 0,
        .best_idx = 0,
        .max_seq = 0}
    ;
    curr_snapshot = (void *) bpf_map_lookup_elem (st_map, &arg.best_idx);
    if (curr_snapshot) {
        arg.new_snapshot = curr_snapshot;
        arg.oldest_seq = curr_snapshot->sequence;
        arg.max_seq = curr_snapshot->sequence;
    }
    for (int i = 0; i <= MAX_SNAPSHOTS - 1; i++) {
        int xxx = i;
        curr_snapshot = (void *) bpf_map_lookup_elem (st_map, &xxx);
        if (curr_snapshot) {
            if (arg.max_seq < curr_snapshot->sequence) {
                arg.max_seq = curr_snapshot->sequence;
            }
            if (arg.oldest_seq > curr_snapshot->sequence) {
                arg.oldest_seq = curr_snapshot->sequence;
                arg.new_snapshot = curr_snapshot;
                arg.best_idx = xxx;
            }
        }
    }
    if (arg.new_snapshot) {
        memcpy (&arg.new_snapshot->dest, &dst_info->dest, sizeof (struct ip6_addr_t));
        memcpy (arg.new_snapshot->exp3_weight, dst_info->exp3_weight, sizeof (floating) * MAX_SRH_BY_DEST);
        arg.new_snapshot->sequence = arg.max_seq + 1;
        arg.new_snapshot->time = bpf_ktime_get_ns ();
        arg.new_snapshot->srh_id = flow_info->srh_id;
        arg.new_snapshot->reward = flow_info->exp3_curr_reward;
        bpf_map_update_elem (st_map, &arg.best_idx, arg.new_snapshot, BPF_ANY);
    }
    else {
        bpf_debug ("HERE STAT FAIL\n");
    }
}
</source>
<source file="/home/sayandes/opened_extraction/examples/tpc-ebpf/ebpf_exp3_lowest_completion.h" funcheader="static void exp3_reward_path (struct flow_infos *flow_info, struct dst_infos *dst_infos, struct bpf_sock_ops *skops)" startline="98" endline="170">
static void exp3_reward_path (struct flow_infos *flow_info, struct dst_infos *dst_infos, struct bpf_sock_ops *skops)
{
    floating gamma_rev;
    floating reward;
    floating exponent_den_factor;
    floating exponent_den;
    floating nbr_actions;
    floating exponent;
    floating weight_factor;
    floating float_tmp, float_tmp2;
    floating operands [2];
    __u32 decimal [2];
    __u32 tmp;
    floating max_reward;
    bpf_to_floating ((((__u64) 2000) / MAX_REWARD_FACTOR) + 1, 0, 1, &max_reward, sizeof (floating));
    GAMMA_REV (gamma_rev);
    flow_info->exp3_curr_reward = (__u32) ((flow_info->rtt_timestamp - flow_info->established_timestamp) / ((__u64) 1000000));
    if (flow_info->exp3_curr_reward < 2000)
        flow_info->exp3_curr_reward = 2000 - flow_info->exp3_curr_reward;
    else
        flow_info->exp3_curr_reward = 1;
    bpf_debug ("HERE reward %u for path %u\n", flow_info->exp3_curr_reward, flow_info->srh_id);
    bpf_to_floating (flow_info->exp3_curr_reward, 0, 1, &reward, sizeof (floating));
    bpf_to_floating (flow_info->exp3_last_number_actions, 1, 0, &nbr_actions, sizeof (floating));
    set_floating (operands[0], reward);
    set_floating (operands[1], max_reward);
    bpf_floating_divide (operands, sizeof (floating) * 2, &reward, sizeof (floating));
    bpf_floating_to_u32s (&reward, sizeof (floating), (__u64 *) decimal, sizeof (decimal));
    bpf_debug ("HERE-norm-reward %llu.%llu\n", decimal[0], decimal[1]);
    set_floating (operands[0], flow_info->exp3_last_probability);
    set_floating (operands[1], gamma_rev);
    bpf_floating_multiply (operands, sizeof (floating) * 2, &exponent_den_factor, sizeof (floating));
    set_floating (operands[0], exponent_den_factor);
    set_floating (operands[1], nbr_actions);
    bpf_floating_multiply (operands, sizeof (floating) * 2, &exponent_den, sizeof (floating));
    set_floating (operands[0], reward);
    set_floating (operands[1], exponent_den);
    bpf_floating_divide (operands, sizeof (floating) * 2, &exponent, sizeof (floating));
    bpf_floating_e_power_a (&exponent, sizeof (floating), &weight_factor, sizeof (floating));
    bpf_floating_to_u32s (&weight_factor, sizeof (floating), (__u64 *) decimal, sizeof (decimal));
    bpf_debug ("HERE-factor %llu.%llu\n", decimal[0], decimal[1]);
    __u32 idx = flow_info->srh_id;
    if (idx >= 0 && idx <= MAX_SRH_BY_DEST - 1) {
        exp3_weight_get (dst_infos, idx, float_tmp);
        bpf_floating_to_u32s (&float_tmp, sizeof (floating), (__u64 *) decimal, sizeof (decimal));
        bpf_debug ("HERE-old-weight %llu.%llu\n", decimal[0], decimal[1]);
        set_floating (operands[0], float_tmp);
        set_floating (operands[1], weight_factor);
        bpf_floating_multiply (operands, sizeof (floating) * 2, &float_tmp2, sizeof (floating));
        bpf_debug ("HERE-new-weight %llu %u\n", float_tmp2.mantissa, float_tmp2.exponent);
        bpf_floating_to_u32s (&float_tmp2, sizeof (floating), (__u64 *) decimal, sizeof (decimal));
        bpf_debug ("HERE-new-weight %llu.%llu\n", decimal[0], decimal[1]);
        exp3_weight_set (dst_infos, idx, float_tmp2);
    }
}
</source>
<source file="/home/sayandes/opened_extraction/examples/tpc-ebpf/ebpf_exp3_lowest_completion.h" funcheader="static __u32 exp3_next_path (struct bpf_elf_map *dt_map, struct flow_infos *flow_info, __u32 *dst_addr)" startline="172" endline="303">
static __u32 exp3_next_path (struct bpf_elf_map *dt_map, struct flow_infos *flow_info, __u32 *dst_addr)
{
    floating operands [2];
    floating gamma;
    GAMMA (gamma);
    __u32 decimal [2];
    decimal[0] = 0;
    decimal[1] = 0;
    __u32 chosen_id = 0, current_delay = 0;
    struct srh_record_t *srh_record = NULL;
    struct dst_infos *dst_infos = NULL;
    dst_infos = (void *) bpf_map_lookup_elem (dt_map, dst_addr);
    if (!dst_infos) {
        return chosen_id;
    }
    floating sum;
    bpf_to_floating (0, 0, 1, &sum, sizeof (floating));
    __u32 nbr_valid_paths = 0;

#pragma clang loop unroll(full)
    for (__u32 i = 0; i <= MAX_SRH_BY_DEST - 1; i++) {
        int xxx = i;
        srh_record = &dst_infos->srhs[i];
        if (!srh_record || !srh_record->srh.type) {
            continue;
        }
        if (!srh_record->is_valid) {
            continue;
        }
        set_floating (operands[0], sum);
        exp3_weight_get (dst_infos, xxx, operands[1]);
        bpf_floating_to_u32s (&operands[1], sizeof (floating), (__u64 *) decimal, sizeof (decimal));
        bpf_debug ("HERE-2 %llu.%llu\n", decimal[0], decimal[1]);
        bpf_floating_add (operands, sizeof (floating) * 2, &sum, sizeof (floating));
        nbr_valid_paths += 1;
    }
    floating probability;
    floating one_minus_gamma;
    ONE_MINUS_GAMMA (one_minus_gamma);
    floating weight_times_gama;
    floating term1;
    floating valid_paths;
    bpf_to_floating (nbr_valid_paths, 0, 1, &valid_paths, sizeof (floating));
    floating term2;
    set_floating (operands[0], gamma);
    set_floating (operands[1], valid_paths);
    bpf_floating_divide (operands, sizeof (floating) * 2, &term2, sizeof (floating));
    __u64 pick = ((__u64) bpf_get_prandom_u32 ()) % FLOAT_MULT;
    __u64 accumulator = 0;

#pragma clang loop unroll(full)
    for (__u32 i = 0; i <= MAX_SRH_BY_DEST - 1; i++) {
        int yyy = i;
        srh_record = &dst_infos->srhs[i];
        if (!srh_record || !srh_record->srh.type) {
            continue;
        }
        if (!srh_record->is_valid) {
            continue;
        }
        exp3_weight_get (dst_infos, yyy, operands[0]);
        set_floating (operands[1], sum);
        bpf_floating_divide (operands, sizeof (floating) * 2, &probability, sizeof (floating));
        bpf_floating_to_u32s (&probability, sizeof (floating), (__u64 *) decimal, sizeof (decimal));
        accumulator += decimal[1];
        bpf_debug ("HERE-probability %llu.%llu\n", decimal[0], decimal[1]);
        if (pick < accumulator) {
            chosen_id = i;
            set_floating (flow_info->exp3_last_probability, probability);
            break;
        }
    }
    flow_info->exp3_last_number_actions = nbr_valid_paths;
    return chosen_id;
}
</source>
</doc>
