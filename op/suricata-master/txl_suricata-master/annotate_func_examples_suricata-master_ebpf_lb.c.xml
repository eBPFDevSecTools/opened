<?xml version="1.0"?>
<doc>
<source file="/home/sayandes/opened_extraction/examples/suricata-master/ebpf/lb.c" funcheader="static __always_inline int ipv4_hash (struct  __sk_buff *skb)" startline="41" endline="57">
static __always_inline int ipv4_hash (struct  __sk_buff *skb)
{
    __u32 nhoff;
    __u32 src, dst;
    nhoff = skb->cb[0];
    src = load_word (skb, nhoff + offsetof (struct iphdr, saddr));
    dst = load_word (skb, nhoff + offsetof (struct iphdr, daddr));

#if 0
    char fmt [] = "Got addr: %x -> %x at %d\n";
    bpf_trace_printk (fmt, sizeof (fmt), src, dst, nhoff);

#endif
    return src + dst;
}
</source>
<source file="/home/sayandes/opened_extraction/examples/suricata-master/ebpf/lb.c" funcheader="static inline __u32 ipv6_addr_hash (struct  __sk_buff *ctx, __u64 off)" startline="59" endline="67">
static inline __u32 ipv6_addr_hash (struct  __sk_buff *ctx, __u64 off)
{
    __u64 w0 = load_word (ctx, off);
    __u64 w1 = load_word (ctx, off + 4);
    __u64 w2 = load_word (ctx, off + 8);
    __u64 w3 = load_word (ctx, off + 12);
    return (__u32) (w0 ^ w1 ^ w2 ^ w3);
}
</source>
<source file="/home/sayandes/opened_extraction/examples/suricata-master/ebpf/lb.c" funcheader="static __always_inline int ipv6_hash (struct  __sk_buff *skb)" startline="69" endline="81">
static __always_inline int ipv6_hash (struct  __sk_buff *skb)
{
    __u32 nhoff;
    __u32 src_hash, dst_hash;
    nhoff = skb->cb[0];
    src_hash = ipv6_addr_hash (skb, nhoff + offsetof (struct ipv6hdr, saddr));
    dst_hash = ipv6_addr_hash (skb, nhoff + offsetof (struct ipv6hdr, daddr));
    return src_hash + dst_hash;
}
</source>
<source file="/home/sayandes/opened_extraction/examples/suricata-master/ebpf/lb.c" funcheader="int  __section (\"loadbalancer\") lb (struct  __sk_buff *skb)" startline="83" endline="145">
int  __section ("loadbalancer") lb (struct  __sk_buff *skb)
{
    __u64 nhoff = ETH_HLEN;
    __u16 proto = load_half (skb, ETH_HLEN - ETH_TLEN);
    __u16 ret = proto;
    switch (proto) {
    case ETH_P_8021Q :
    case ETH_P_8021AD :
        {
            __u16 vproto = load_half (skb, nhoff + offsetof (struct vlan_hdr, h_vlan_encapsulated_proto));
            switch (vproto) {
            case ETH_P_8021AD :
            case ETH_P_8021Q :
                nhoff += sizeof (struct vlan_hdr);
                proto = load_half (skb, nhoff + offsetof (struct vlan_hdr, h_vlan_encapsulated_proto));
                break;
            default :
                proto = vproto;
            }
            nhoff += sizeof (struct vlan_hdr);
            skb->cb[0] = nhoff;
            switch (proto) {
            case ETH_P_IP :

#if 0
                {
                    char fmt [] = "ipv4\n";
                    bpf_trace_printk (fmt, sizeof (fmt));
                }

#endif
                ret = ipv4_hash (skb);
                break;
            case ETH_P_IPV6 :
                ret = ipv6_hash (skb);
                break;
            default :

#if 0
                {
                    char fmt [] = "Dflt VLAN proto %u\n";
                    bpf_trace_printk (fmt, sizeof (fmt), proto);
                    break;
                }

#else
                break;

#endif
            }
        }
        break;
    case ETH_P_IP :
        ret = ipv4_hash (skb);
        break;
    case ETH_P_IPV6 :
        ret = ipv6_hash (skb);
        break;
    default :

#if 0
        {
            char fmt [] = "Got proto %x\n";
            bpf_trace_printk (fmt, sizeof (fmt), proto);
            break;
        }

#else
        break;

#endif
    }
    return ret;
}
</source>
</doc>
