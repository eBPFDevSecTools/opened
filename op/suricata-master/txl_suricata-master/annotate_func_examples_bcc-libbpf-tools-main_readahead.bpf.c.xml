<?xml version="1.0"?>
<doc>
<source file="/home/sayandes/opened_extraction/examples/bcc-libbpf-tools-main/readahead.bpf.c" funcheader="int BPF_PROG (do_page_cache_ra)" startline="28" endline="35">
int BPF_PROG (do_page_cache_ra)
{
    u32 pid = bpf_get_current_pid_tgid ();
    u64 one = 1;
    bpf_map_update_elem (&in_readahead, &pid, &one, 0);
    return 0;
}
</source>
<source file="/home/sayandes/opened_extraction/examples/bcc-libbpf-tools-main/readahead.bpf.c" funcheader="int BPF_PROG (page_cache_alloc_ret, gfp_t gfp, struct page *ret)" startline="38" endline="52">
int BPF_PROG (page_cache_alloc_ret, gfp_t gfp, struct page *ret)
{
    u32 pid = bpf_get_current_pid_tgid ();
    u64 ts;
    if (!bpf_map_lookup_elem (&in_readahead, &pid))
        return 0;
    ts = bpf_ktime_get_ns ();
    bpf_map_update_elem (&birth, &ret, &ts, 0);
    __sync_fetch_and_add (&hist.unused, 1);
    __sync_fetch_and_add (&hist.total, 1);
    return 0;
}
</source>
<source file="/home/sayandes/opened_extraction/examples/bcc-libbpf-tools-main/readahead.bpf.c" funcheader="int BPF_PROG (do_page_cache_ra_ret)" startline="55" endline="61">
int BPF_PROG (do_page_cache_ra_ret)
{
    u32 pid = bpf_get_current_pid_tgid ();
    bpf_map_delete_elem (&in_readahead, &pid);
    return 0;
}
</source>
<source file="/home/sayandes/opened_extraction/examples/bcc-libbpf-tools-main/readahead.bpf.c" funcheader="int BPF_PROG (mark_page_accessed, struct page *page)" startline="64" endline="85">
int BPF_PROG (mark_page_accessed, struct page *page)
{
    u64 *tsp, slot, ts = bpf_ktime_get_ns ();
    s64 delta;
    tsp = bpf_map_lookup_elem (& birth, & page);
    if (!tsp)
        return 0;
    delta = (s64) (ts - *tsp);
    if (delta < 0)
        goto update_and_cleanup;
    slot = log2l (delta / 1000000U);
    if (slot >= MAX_SLOTS)
        slot = MAX_SLOTS - 1;
    __sync_fetch_and_add (&hist.slots[slot], 1);
update_and_cleanup :
    __sync_fetch_and_add (&hist.unused, -1);
    bpf_map_delete_elem (&birth, &page);
    return 0;
}
</source>
</doc>
