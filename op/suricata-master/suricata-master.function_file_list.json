{"hash_ipv4": [{"fileName": "/home/sayandes/opened_extraction/examples/suricata-master/ebpf/xdp_lb.c", "startLine": "73", "endLine": "99", "capability": {"capabilities": [{"capability": "map_read", "map_read": [{"Project": "libbpf", "Return Type": "void*", "Description": "Perform a lookup in <[ map ]>(IP: 0) for an entry associated to key. ", "Return": " Map value associated to key, or NULL if no entry was found.", "Function Name": "bpf_map_lookup_elem", "Input Params": ["{Type: struct bpf_map ,Var: *map}", "{Type:  const void ,Var: *key}"]}]}], "helperCallParams": {"bpf_map_lookup_elem": [{"opVar": "    __u32 *cpu_max ", "inpVar": [" &cpus_count", " &key0"]}, {"opVar": "        cpu_selected ", "inpVar": [" &cpus_available", " &cpu_dest"]}], "bpf_redirect": [{"opVar": "NA", "inpVar": ["        return _map&cpu_map", " cpu_dest", " 0"]}]}}}], "hash_ipv6": [{"fileName": "/home/sayandes/opened_extraction/examples/suricata-master/ebpf/xdp_lb.c", "startLine": "101", "endLine": "132", "capability": {"capabilities": [{"capability": "map_read", "map_read": [{"Project": "libbpf", "Return Type": "void*", "Description": "Perform a lookup in <[ map ]>(IP: 0) for an entry associated to key. ", "Return": " Map value associated to key, or NULL if no entry was found.", "Function Name": "bpf_map_lookup_elem", "Input Params": ["{Type: struct bpf_map ,Var: *map}", "{Type:  const void ,Var: *key}"]}]}], "helperCallParams": {"bpf_map_lookup_elem": [{"opVar": "    __u32 *cpu_max ", "inpVar": [" &cpus_count", " &key0"]}, {"opVar": "        cpu_selected ", "inpVar": [" &cpus_available", " &cpu_dest"]}], "bpf_redirect": [{"opVar": "NA", "inpVar": ["        return _map&cpu_map", " cpu_dest", " 0"]}]}}}], "filter_gre": [{"fileName": "/home/sayandes/opened_extraction/examples/suricata-master/ebpf/xdp_lb.c", "startLine": "134", "endLine": "202", "capability": {"capabilities": [{"capability": "update_pkt", "update_pkt": [{"Project": "libbpf", "Return Type": "int", "Description": "Adjust (move) xdp_md->data by <[ delta ]>(IP: 1) bytes. Note that it is possible to use a negative value for delta. This helper can be used to prepare the packet for pushing or popping headers. A call to this helper is susceptible to change the underlying packet buffer. Therefore , at load time , all checks on pointers previously done by the verifier are invalidated and must be performed again , if the helper is used in combination with direct packet access. ", "Return": " 0 on success, or a negative error in case of failure.", "Function Name": "bpf_xdp_adjust_head", "Input Params": ["{Type: struct xdp_buff ,Var: *xdp_md}", "{Type:  int ,Var: delta}"]}]}], "helperCallParams": {"bpf_xdp_adjust_head": [{"opVar": "NA", "inpVar": ["    if ctx", " 0 + nh_off        return XDP_PASS"]}]}}}], "filter_ipv4": [{"fileName": "/home/sayandes/opened_extraction/examples/suricata-master/ebpf/xdp_lb.c", "startLine": "204", "endLine": "214", "capability": {"capabilities": [], "helperCallParams": {}}}, {"fileName": "/home/sayandes/opened_extraction/examples/suricata-master/ebpf/xdp_filter.c", "startLine": "235", "endLine": "377", "capability": {"capabilities": [{"capability": "map_read", "map_read": [{"Project": "libbpf", "Return Type": "void*", "Description": "Perform a lookup in <[ map ]>(IP: 0) for an entry associated to key. ", "Return": " Map value associated to key, or NULL if no entry was found.", "Function Name": "bpf_map_lookup_elem", "Input Params": ["{Type: struct bpf_map ,Var: *map}", "{Type:  const void ,Var: *key}"]}]}], "helperCallParams": {"bpf_map_lookup_elem": [{"opVar": "    __u32 *cpu_max ", "inpVar": [" &cpus_count", " &key0"]}, {"opVar": "    value ", "inpVar": [" &flow_table_v4", " &tuple"]}, {"opVar": "#endif#if GOT_TX_PEER        iface_peer ", "inpVar": [" &tx_peer_int", " &key0"]}, {"opVar": "                tls_count ", "inpVar": [" &tls_bypass_count", " &key1"]}, {"opVar": "#endif                #if GOT_TX_PEER                iface_peer ", "inpVar": [" &tx_peer_int", " &key0"]}, {"opVar": "        cpu_selected ", "inpVar": [" &cpus_available", " &cpu_dest"]}], "bpf_trace_printk": [{"opVar": "NA", "inpVar": ["        fmt", " sizeoffmt", " tuple.src", " tuple.port16[0]"]}, {"opVar": "NA", "inpVar": ["        fmt1", " sizeoffmt1", " tuple.dst", " tuple.port16[1]"]}, {"opVar": "NA", "inpVar": ["        fmt", " sizeoffmt", " tuple.src", " sport", " dport"]}, {"opVar": "NA", "inpVar": ["        fmt", " sizeoffmt", " value->time", " value->packets", " value->bytes"]}], "bpf_redirect": [{"opVar": "NA", "inpVar": ["            return _map&tx_peer", " tx_port", " 0"]}, {"opVar": "NA", "inpVar": ["                    return _map&tx_peer", " tx_port", " 0"]}, {"opVar": "NA", "inpVar": ["        return _map&cpu_map", " cpu_dest", " 0"]}]}}}], "filter_ipv6": [{"fileName": "/home/sayandes/opened_extraction/examples/suricata-master/ebpf/xdp_lb.c", "startLine": "216", "endLine": "220", "capability": {"capabilities": [], "helperCallParams": {}}}, {"fileName": "/home/sayandes/opened_extraction/examples/suricata-master/ebpf/xdp_filter.c", "startLine": "379", "endLine": "483", "capability": {"capabilities": [{"capability": "map_read", "map_read": [{"Project": "libbpf", "Return Type": "void*", "Description": "Perform a lookup in <[ map ]>(IP: 0) for an entry associated to key. ", "Return": " Map value associated to key, or NULL if no entry was found.", "Function Name": "bpf_map_lookup_elem", "Input Params": ["{Type: struct bpf_map ,Var: *map}", "{Type:  const void ,Var: *key}"]}]}], "helperCallParams": {"bpf_map_lookup_elem": [{"opVar": "    int *cpu_max ", "inpVar": [" &cpus_count", " &key0"]}, {"opVar": "    value ", "inpVar": [" &flow_table_v6", " &tuple"]}, {"opVar": "#endif#if GOT_TX_PEER        iface_peer ", "inpVar": [" &tx_peer_int", " &key0"]}, {"opVar": "        cpu_selected ", "inpVar": [" &cpus_available", " &cpu_dest"]}], "bpf_trace_printk": [{"opVar": "NA", "inpVar": ["        fmt6", " sizeoffmt6", " sport", " dport"]}], "bpf_redirect": [{"opVar": "NA", "inpVar": ["            return _map&tx_peer", " tx_port", " 0"]}, {"opVar": "NA", "inpVar": ["        return _map&cpu_map", " cpu_dest", " 0"]}]}}}], "xdp_loadfilter": [{"fileName": "/home/sayandes/opened_extraction/examples/suricata-master/ebpf/xdp_lb.c", "startLine": "222", "endLine": "267", "capability": {"capabilities": [], "helperCallParams": {"bpf_trace_printk": [{"opVar": "NA", "inpVar": ["        fmt", " sizeoffmt", " h_proto"]}]}}}], "ipv4_hash": [{"fileName": "/home/sayandes/opened_extraction/examples/suricata-master/ebpf/lb.c", "startLine": "41", "endLine": "57", "capability": {"capabilities": [], "helperCallParams": {"bpf_trace_printk": [{"opVar": "NA", "inpVar": ["    fmt", " sizeoffmt", " src", " dst", " nhoff"]}]}}}], "ipv6_addr_hash": [{"fileName": "/home/sayandes/opened_extraction/examples/suricata-master/ebpf/lb.c", "startLine": "59", "endLine": "67", "capability": {"capabilities": [], "helperCallParams": {}}}], "ipv6_hash": [{"fileName": "/home/sayandes/opened_extraction/examples/suricata-master/ebpf/lb.c", "startLine": "69", "endLine": "81", "capability": {"capabilities": [], "helperCallParams": {}}}], "lb": [{"fileName": "/home/sayandes/opened_extraction/examples/suricata-master/ebpf/lb.c", "startLine": "83", "endLine": "145", "capability": {"capabilities": [], "helperCallParams": {"bpf_trace_printk": [{"opVar": "NA", "inpVar": [" fmt", " sizeoffmt"]}, {"opVar": "NA", "inpVar": ["                            fmt", " sizeoffmt", " proto"]}, {"opVar": "NA", "inpVar": ["                fmt", " sizeoffmt", " proto"]}]}}}], "ipv4_filter": [{"fileName": "/home/sayandes/opened_extraction/examples/suricata-master/ebpf/bypass_filter.c", "startLine": "88", "endLine": "148", "capability": {"capabilities": [{"capability": "map_read", "map_read": [{"Project": "libbpf", "Return Type": "void*", "Description": "Perform a lookup in <[ map ]>(IP: 0) for an entry associated to key. ", "Return": " Map value associated to key, or NULL if no entry was found.", "Function Name": "bpf_map_lookup_elem", "Input Params": ["{Type: struct bpf_map ,Var: *map}", "{Type:  const void ,Var: *key}"]}]}], "helperCallParams": {"bpf_trace_printk": [{"opVar": "NA", "inpVar": ["        fmt", " sizeoffmt", " tuple.src", " sp", " tuple.dst"]}, {"opVar": "NA", "inpVar": ["            bfmt", " sizeofbfmt", " tuple.src", " sp", " tuple.dst"]}], "bpf_map_lookup_elem": [{"opVar": "    #endif        value ", "inpVar": [" &flow_table_v4", " &tuple"]}]}}}, {"fileName": "/home/sayandes/opened_extraction/examples/suricata-master/ebpf/filter.c", "startLine": "46", "endLine": "81", "capability": {"capabilities": [{"capability": "map_read", "map_read": [{"Project": "libbpf", "Return Type": "void*", "Description": "Perform a lookup in <[ map ]>(IP: 0) for an entry associated to key. ", "Return": " Map value associated to key, or NULL if no entry was found.", "Function Name": "bpf_map_lookup_elem", "Input Params": ["{Type: struct bpf_map ,Var: *map}", "{Type:  const void ,Var: *key}"]}]}], "helperCallParams": {"bpf_map_lookup_elem": [{"opVar": "    value ", "inpVar": [" &ipv4_drop", " &ip"]}, {"opVar": "    value ", "inpVar": [" &ipv4_drop", " &ip"]}], "bpf_trace_printk": [{"opVar": "NA", "inpVar": ["        fmt", " sizeoffmt", " value"]}, {"opVar": "NA", "inpVar": ["        fmt", " sizeoffmt", " value"]}, {"opVar": "NA", "inpVar": ["    fmt", " sizeoffmt"]}]}}}], "ipv6_filter": [{"fileName": "/home/sayandes/opened_extraction/examples/suricata-master/ebpf/bypass_filter.c", "startLine": "155", "endLine": "210", "capability": {"capabilities": [{"capability": "map_read", "map_read": [{"Project": "libbpf", "Return Type": "void*", "Description": "Perform a lookup in <[ map ]>(IP: 0) for an entry associated to key. ", "Return": " Map value associated to key, or NULL if no entry was found.", "Function Name": "bpf_map_lookup_elem", "Input Params": ["{Type: struct bpf_map ,Var: *map}", "{Type:  const void ,Var: *key}"]}]}], "helperCallParams": {"bpf_map_lookup_elem": [{"opVar": "                value ", "inpVar": [" &flow_table_v6", " &tuple"]}]}}}, {"fileName": "/home/sayandes/opened_extraction/examples/suricata-master/ebpf/filter.c", "startLine": "83", "endLine": "86", "capability": {"capabilities": [], "helperCallParams": {}}}], "hashfilter": [{"fileName": "/home/sayandes/opened_extraction/examples/suricata-master/ebpf/bypass_filter.c", "startLine": "220", "endLine": "256", "capability": {"capabilities": [], "helperCallParams": {"bpf_trace_printk": [{"opVar": "NA", "inpVar": ["                fmt", " sizeoffmt", " h_proto"]}]}}}, {"fileName": "/home/sayandes/opened_extraction/examples/suricata-master/ebpf/vlan_filter.c", "startLine": "25", "endLine": "36", "capability": {"capabilities": [], "helperCallParams": {}}}, {"fileName": "/home/sayandes/opened_extraction/examples/suricata-master/ebpf/filter.c", "startLine": "88", "endLine": "110", "capability": {"capabilities": [], "helperCallParams": {}}}], "get_sport": [{"fileName": "/home/sayandes/opened_extraction/examples/suricata-master/ebpf/xdp_filter.c", "startLine": "191", "endLine": "211", "capability": {"capabilities": [], "helperCallParams": {}}}], "get_dport": [{"fileName": "/home/sayandes/opened_extraction/examples/suricata-master/ebpf/xdp_filter.c", "startLine": "213", "endLine": "233", "capability": {"capabilities": [], "helperCallParams": {}}}], "xdp_hashfilter": [{"fileName": "/home/sayandes/opened_extraction/examples/suricata-master/ebpf/xdp_filter.c", "startLine": "485", "endLine": "552", "capability": {"capabilities": [{"capability": "map_read", "map_read": [{"Project": "libbpf", "Return Type": "void*", "Description": "Perform a lookup in <[ map ]>(IP: 0) for an entry associated to key. ", "Return": " Map value associated to key, or NULL if no entry was found.", "Function Name": "bpf_map_lookup_elem", "Input Params": ["{Type: struct bpf_map ,Var: *map}", "{Type:  const void ,Var: *key}"]}]}], "helperCallParams": {"bpf_map_lookup_elem": [{"opVar": "    g_switch ", "inpVar": [" &global_bypass", " &key0"]}, {"opVar": "        iface_peer ", "inpVar": [" &tx_peer_int", " &key0"]}], "bpf_redirect": [{"opVar": "NA", "inpVar": ["            return _map&tx_peer", " tx_port", " 0"]}]}}}], "SuperFastHash": [{"fileName": "/home/sayandes/opened_extraction/examples/suricata-master/ebpf/hash_func01.h", "startLine": "9", "endLine": "55", "capability": {"capabilities": [], "helperCallParams": {}}}]}