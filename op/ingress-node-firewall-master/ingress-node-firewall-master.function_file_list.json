{
    "ip_extract_l4info": [
        {
            "fileName": "/home/sayandes/opened_extraction/examples/ingress-node-firewall-master/bpf/ingress_node_firewall_kernel.c",
            "startLine": "84",
            "endLine": "160",
            "capability": {
                "capabilities": [],
                "helperCallParams": {}
            },
            "called_function_list": [
                "likely",
                "unlikely",
                "unlikely",
                "unlikely",
                "unlikely",
                "unlikely",
                "unlikely",
                "unlikely"
            ],
            "call_depth": -1
        }
    ],
    "ipv4_firewall_lookup": [
        {
            "fileName": "/home/sayandes/opened_extraction/examples/ingress-node-firewall-master/bpf/ingress_node_firewall_kernel.c",
            "startLine": "176",
            "endLine": "242",
            "capability": {
                "capabilities": [
                    {
                        "capability": "map_read",
                        "map_read": [
                            {
                                "Project": "libbpf",
                                "Return Type": "void*",
                                "Description": "Perform a lookup in <[ map ]>(IP: 0) for an entry associated to key. ",
                                "Return": " Map value associated to key, or NULL if no entry was found.",
                                "Function Name": "bpf_map_lookup_elem",
                                "Input Params": [
                                    "{Type: struct bpf_map ,Var: *map}",
                                    "{Type:  const void ,Var: *key}"
                                ]
                            }
                        ]
                    }
                ],
                "helperCallParams": {
                    "bpf_map_lookup_elem": [
                        {
                            "opVar": "    struct rulesVal_st *rulesVal ",
                            "inpVar": [
                                " struct rulesVal_st *        &ingress_node_firewall_table_map",
                                " &key"
                            ]
                        }
                    ]
                }
            },
            "called_function_list": [
                "ip_extract_l4info",
                "bpf_printk",
                "SET_ACTION",
                "memset",
                "likely",
                "unroll",
                "likely",
                "bpf_printk",
                "bpf_printk",
                "bpf_ntohs",
                "bpf_ntohs",
                "SET_ACTIONRULE_RESPONSE",
                "bpf_ntohs",
                "SET_ACTIONRULE_RESPONSE",
                "bpf_printk",
                "SET_ACTIONRULE_RESPONSE",
                "SET_ACTIONRULE_RESPONSE",
                "bpf_printk",
                "bpf_ntohs",
                "SET_ACTION"
            ],
            "call_depth": -1
        }
    ],
    "ipv6_firewall_lookup": [
        {
            "fileName": "/home/sayandes/opened_extraction/examples/ingress-node-firewall-master/bpf/ingress_node_firewall_kernel.c",
            "startLine": "258",
            "endLine": "318",
            "capability": {
                "capabilities": [
                    {
                        "capability": "map_read",
                        "map_read": [
                            {
                                "Project": "libbpf",
                                "Return Type": "void*",
                                "Description": "Perform a lookup in <[ map ]>(IP: 0) for an entry associated to key. ",
                                "Return": " Map value associated to key, or NULL if no entry was found.",
                                "Function Name": "bpf_map_lookup_elem",
                                "Input Params": [
                                    "{Type: struct bpf_map ,Var: *map}",
                                    "{Type:  const void ,Var: *key}"
                                ]
                            }
                        ]
                    }
                ],
                "helperCallParams": {
                    "bpf_map_lookup_elem": [
                        {
                            "opVar": "    struct rulesVal_st *rulesVal ",
                            "inpVar": [
                                " struct rulesVal_st *        &ingress_node_firewall_table_map",
                                " &key"
                            ]
                        }
                    ]
                }
            },
            "called_function_list": [
                "ip_extract_l4info",
                "SET_ACTION",
                "memset",
                "memcpy",
                "unroll",
                "likely",
                "bpf_printk",
                "bpf_printk",
                "bpf_ntohs",
                "bpf_ntohs",
                "SET_ACTIONRULE_RESPONSE",
                "bpf_ntohs",
                "SET_ACTIONRULE_RESPONSE",
                "bpf_printk",
                "SET_ACTIONRULE_RESPONSE",
                "SET_ACTIONRULE_RESPONSE",
                "bpf_printk",
                "bpf_ntohs",
                "SET_ACTION"
            ],
            "call_depth": -1
        }
    ],
    "generate_event_and_update_statistics": [
        {
            "fileName": "/home/sayandes/opened_extraction/examples/ingress-node-firewall-master/bpf/ingress_node_firewall_kernel.c",
            "startLine": "335",
            "endLine": "374",
            "capability": {
                "capabilities": [
                    {
                        "capability": "map_read",
                        "map_read": [
                            {
                                "Project": "libbpf",
                                "Return Type": "void*",
                                "Description": "Perform a lookup in <[ map ]>(IP: 0) for an entry associated to key. ",
                                "Return": " Map value associated to key, or NULL if no entry was found.",
                                "Function Name": "bpf_map_lookup_elem",
                                "Input Params": [
                                    "{Type: struct bpf_map ,Var: *map}",
                                    "{Type:  const void ,Var: *key}"
                                ]
                            }
                        ]
                    },
                    {
                        "capability": "map_update",
                        "map_update": [
                            {
                                "Project": "libbpf",
                                "Return Type": "int",
                                "Description": "Add or update the <[ value ]>(IP: 2) of the entry associated to <[ key ]>(IP: 1) in <[ map ]>(IP: 0) with value. <[ flags ]>(IP: 3) is one of: BPF_NOEXIST The entry for <[ key ]>(IP: 1) must not exist in the map. BPF_EXIST The entry for <[ key ]>(IP: 1) must already exist in the map. BPF_ANY No condition on the existence of the entry for key. Flag <[ value ]>(IP: 2) BPF_NOEXIST cannot be used for maps of types BPF_MAP_TYPE_ARRAY or BPF_MAP_TYPE_PERCPU_ARRAY (all elements always exist) , the helper would return an error. ",
                                "Return": " 0 on success, or a negative error in case of failure.",
                                "Function Name": "bpf_map_update_elem",
                                "Input Params": [
                                    "{Type: struct bpf_map ,Var: *map}",
                                    "{Type:  const void ,Var: *key}",
                                    "{Type:  const void ,Var: *value}",
                                    "{Type:  u64 ,Var: flags}"
                                ]
                            }
                        ]
                    }
                ],
                "helperCallParams": {
                    "bpf_map_lookup_elem": [
                        {
                            "opVar": "    statistics ",
                            "inpVar": [
                                " &ingress_node_firewall_statistics_map",
                                " &key"
                            ]
                        }
                    ],
                    "bpf_map_update_elem": [
                        {
                            "opVar": "NA",
                            "inpVar": [
                                "        &ingress_node_firewall_statistics_map",
                                " &key",
                                " &initialStats",
                                " BPF_ANY"
                            ]
                        }
                    ],
                    "bpf_perf_event_output": [
                        {
                            "opVar": "NA",
                            "inpVar": [
                                "        voidctx",
                                " &ingress_node_firewall_events_map",
                                " flags",
                                "                                    &hdr",
                                " sizeofhdr"
                            ]
                        }
                    ]
                }
            },
            "called_function_list": [
                "memset",
                "memset",
                "likely",
                "__sync_fetch_and_add",
                "__sync_fetch_and_add",
                "__sync_fetch_and_add",
                "__sync_fetch_and_add"
            ],
            "call_depth": -1
        }
    ],
    "ingress_node_firewall_main": [
        {
            "fileName": "/home/sayandes/opened_extraction/examples/ingress-node-firewall-master/bpf/ingress_node_firewall_kernel.c",
            "startLine": "386",
            "endLine": "431",
            "capability": {
                "capabilities": [],
                "helperCallParams": {}
            },
            "called_function_list": [
                "bpf_printk",
                "unlikely",
                "bpf_printk",
                "bpf_htons",
                "bpf_printk",
                "ipv4_firewall_lookup",
                "bpf_htons",
                "bpf_printk",
                "ipv6_firewall_lookup",
                "bpf_printk",
                "GET_RULE_ID",
                "GET_ACTION",
                "generate_event_and_update_statistics",
                "bpf_printk",
                "generate_event_and_update_statistics",
                "bpf_printk",
                "bpf_printk"
            ],
            "call_depth": -1
        }
    ],
    "ingress_node_firewall_process": [
        {
            "fileName": "/home/sayandes/opened_extraction/examples/ingress-node-firewall-master/bpf/ingress_node_firewall_kernel.c",
            "startLine": "434",
            "endLine": "436",
            "capability": {
                "capabilities": [],
                "helperCallParams": {}
            },
            "called_function_list": [
                "ingress_node_firewall_main"
            ],
            "call_depth": -1
        }
    ],
    "bpf_tail_call_static": [
        {
            "fileName": "/home/sayandes/opened_extraction/examples/ingress-node-firewall-master/bpf/headers/bpf_helpers.h",
            "startLine": "98",
            "endLine": "123",
            "capability": {
                "capabilities": [],
                "helperCallParams": {
                    "bpf_tail_call": [
                        {
                            "opVar": "NA",
                            "inpVar": [
                                "_staticvoid *ctx",
                                " const void *map",
                                " const __u32 slot"
                            ]
                        }
                    ]
                }
            },
            "called_function_list": [
                "__builtin_constant_p",
                "__bpf_unreachable"
            ],
            "call_depth": -1
        }
    ]
}