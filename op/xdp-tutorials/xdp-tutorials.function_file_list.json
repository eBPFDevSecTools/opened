{"find_map_fd": [{"fileName": "/root/examples/xdp-tutorials/xdp_load_and_stats.c", "startLine": "63", "endLine": "78", "capability": {"capability": [], "helperCallParams": {}}}, {"fileName": "/root/examples/xdp-tutorials/trace_load_and_stats.c", "startLine": "111", "endLine": "126", "capability": {"capability": [], "helperCallParams": {}}}], "gettime": [{"fileName": "/root/examples/xdp-tutorials/xdp_load_and_stats.c", "startLine": "81", "endLine": "92", "capability": {"capability": [], "helperCallParams": {}}}, {"fileName": "/root/examples/xdp-tutorials/xdp_stats.c", "startLine": "43", "endLine": "54", "capability": {"capability": [], "helperCallParams": {}}}, {"fileName": "/root/examples/xdp-tutorials/trace_load_and_stats.c", "startLine": "268", "endLine": "279", "capability": {"capability": [], "helperCallParams": {}}}, {"fileName": "/root/examples/xdp-tutorials/af_xdp_user.c", "startLine": "411", "endLine": "422", "capability": {"capability": [], "helperCallParams": {}}}], "calc_period": [{"fileName": "/root/examples/xdp-tutorials/xdp_load_and_stats.c", "startLine": "103", "endLine": "113", "capability": {"capability": [], "helperCallParams": {}}}, {"fileName": "/root/examples/xdp-tutorials/xdp_stats.c", "startLine": "65", "endLine": "75", "capability": {"capability": [], "helperCallParams": {}}}, {"fileName": "/root/examples/xdp-tutorials/trace_load_and_stats.c", "startLine": "343", "endLine": "353", "capability": {"capability": [], "helperCallParams": {}}}, {"fileName": "/root/examples/xdp-tutorials/af_xdp_user.c", "startLine": "424", "endLine": "434", "capability": {"capability": [], "helperCallParams": {}}}], "stats_print": [{"fileName": "/root/examples/xdp-tutorials/xdp_load_and_stats.c", "startLine": "115", "endLine": "141", "capability": {"capability": [], "helperCallParams": {}}}, {"fileName": "/root/examples/xdp-tutorials/xdp_stats.c", "startLine": "83", "endLine": "121", "capability": {"capability": [], "helperCallParams": {}}}, {"fileName": "/root/examples/xdp-tutorials/trace_load_and_stats.c", "startLine": "427", "endLine": "608", "capability": {"capability": [], "helperCallParams": {}}}, {"fileName": "/root/examples/xdp-tutorials/af_xdp_user.c", "startLine": "436", "endLine": "473", "capability": {"capability": [], "helperCallParams": {}}}], "map_get_value_array": [{"fileName": "/root/examples/xdp-tutorials/xdp_load_and_stats.c", "startLine": "144", "endLine": "150", "capability": {"capability": [{"capability": "map_read", "map_read": [{"Return Type": "void*", "Description": "Perform a lookup in <[ map ]>(IP: 0) for an entry associated to key. ", "Return": " Map value associated to key, or NULL if no entry was found.", "Function Name": "bpf_map_lookup_elem", "Input Params": ["{Type: struct bpf_map ,Var: *map}", "{Type:  const void ,Var: *key}"]}]}], "helperCallParams": {"bpf_map_lookup_elem": [{"opVar": "\tif ((bpf_map_lookup_elem(fd, &key, value)) !", "inpVar": [" 0 "]}, {"opVar": "NA", "inpVar": ["\t\tfprintfstderr", "\t\t\t\"ERR:  failed key:0x%X\\n\"", " key"]}]}}}, {"fileName": "/root/examples/xdp-tutorials/xdp_stats.c", "startLine": "125", "endLine": "131", "capability": {"capability": [{"capability": "map_read", "map_read": [{"Return Type": "void*", "Description": "Perform a lookup in <[ map ]>(IP: 0) for an entry associated to key. ", "Return": " Map value associated to key, or NULL if no entry was found.", "Function Name": "bpf_map_lookup_elem", "Input Params": ["{Type: struct bpf_map ,Var: *map}", "{Type:  const void ,Var: *key}"]}]}], "helperCallParams": {"bpf_map_lookup_elem": [{"opVar": "\tif ((bpf_map_lookup_elem(fd, &key, value)) !", "inpVar": [" 0 "]}, {"opVar": "NA", "inpVar": ["\t\tfprintfstderr", "\t\t\t\"ERR:  failed key:0x%X\\n\"", " key"]}]}}}], "map_get_value_percpu_array": [{"fileName": "/root/examples/xdp-tutorials/xdp_load_and_stats.c", "startLine": "153", "endLine": "160", "capability": {"capability": [], "helperCallParams": {}}}, {"fileName": "/root/examples/xdp-tutorials/xdp_stats.c", "startLine": "134", "endLine": "156", "capability": {"capability": [{"capability": "map_read", "map_read": [{"Return Type": "void*", "Description": "Perform a lookup in <[ map ]>(IP: 0) for an entry associated to key. ", "Return": " Map value associated to key, or NULL if no entry was found.", "Function Name": "bpf_map_lookup_elem", "Input Params": ["{Type: struct bpf_map ,Var: *map}", "{Type:  const void ,Var: *key}"]}]}], "helperCallParams": {"bpf_map_lookup_elem": [{"opVar": "\tif ((bpf_map_lookup_elem(fd, &key, values)) !", "inpVar": [" 0 "]}, {"opVar": "NA", "inpVar": ["\t\tfprintfstderr", "\t\t\t\"ERR:  failed key:0x%X\\n\"", " key"]}]}}}], "map_collect": [{"fileName": "/root/examples/xdp-tutorials/xdp_load_and_stats.c", "startLine": "162", "endLine": "185", "capability": {"capability": [], "helperCallParams": {}}}, {"fileName": "/root/examples/xdp-tutorials/xdp_stats.c", "startLine": "158", "endLine": "182", "capability": {"capability": [], "helperCallParams": {}}}], "stats_collect": [{"fileName": "/root/examples/xdp-tutorials/xdp_load_and_stats.c", "startLine": "187", "endLine": "194", "capability": {"capability": [], "helperCallParams": {}}}, {"fileName": "/root/examples/xdp-tutorials/xdp_stats.c", "startLine": "184", "endLine": "193", "capability": {"capability": [], "helperCallParams": {}}}, {"fileName": "/root/examples/xdp-tutorials/trace_load_and_stats.c", "startLine": "621", "endLine": "655", "capability": {"capability": [], "helperCallParams": {}}}], "stats_poll": [{"fileName": "/root/examples/xdp-tutorials/xdp_load_and_stats.c", "startLine": "196", "endLine": "219", "capability": {"capability": [], "helperCallParams": {}}}, {"fileName": "/root/examples/xdp-tutorials/xdp_stats.c", "startLine": "195", "endLine": "227", "capability": {"capability": [], "helperCallParams": {}}}, {"fileName": "/root/examples/xdp-tutorials/trace_load_and_stats.c", "startLine": "734", "endLine": "758", "capability": {"capability": [], "helperCallParams": {}}}], "__check_map_fd_info": [{"fileName": "/root/examples/xdp-tutorials/xdp_load_and_stats.c", "startLine": "225", "endLine": "268", "capability": {"capability": [], "helperCallParams": {}}}, {"fileName": "/root/examples/xdp-tutorials/trace_load_and_stats.c", "startLine": "128", "endLine": "171", "capability": {"capability": [], "helperCallParams": {}}}], "main": [{"fileName": "/root/examples/xdp-tutorials/xdp_load_and_stats.c", "startLine": "270", "endLine": "337", "capability": {"capability": [], "helperCallParams": {}}}, {"fileName": "/root/examples/xdp-tutorials/trace_read.c", "startLine": "26", "endLine": "71", "capability": {"capability": [], "helperCallParams": {}}}, {"fileName": "/root/examples/xdp-tutorials/xdp_prog_user.c", "startLine": "108", "endLine": "178", "capability": {"capability": [{"capability": "map_update", "map_update": [{"Return Type": "int", "Description": "Add or update the <[ value ]>(IP: 2) of the entry associated to <[ key ]>(IP: 1) in <[ map ]>(IP: 0) with value. <[ flags ]>(IP: 3) is one of: BPF_NOEXIST The entry for <[ key ]>(IP: 1) must not exist in the map. BPF_EXIST The entry for <[ key ]>(IP: 1) must already exist in the map. BPF_ANY No condition on the existence of the entry for key. Flag <[ value ]>(IP: 2) BPF_NOEXIST cannot be used for maps of types BPF_MAP_TYPE_ARRAY or BPF_MAP_TYPE_PERCPU_ARRAY (all elements always exist) , the helper would return an error. ", "Return": " 0 on success, or a negative error in case of failure.", "Function Name": "bpf_map_update_elem", "Input Params": ["{Type: struct bpf_map ,Var: *map}", "{Type:  const void ,Var: *key}", "{Type:  const void ,Var: *value}", "{Type:  u64 ,Var: flags}"]}]}], "helperCallParams": {"bpf_map_update_elem": [{"opVar": "NA", "inpVar": ["\t\tmap_fd", " &i", " &cfg.redirect_ifindex", " 0"]}]}}}, {"fileName": "/root/examples/xdp-tutorials/xdp_loader.c", "startLine": "109", "endLine": "165", "capability": {"capability": [], "helperCallParams": {}}}, {"fileName": "/root/examples/xdp-tutorials/xdp_stats.c", "startLine": "235", "endLine": "299", "capability": {"capability": [], "helperCallParams": {}}}, {"fileName": "/root/examples/xdp-tutorials/xdp_sample_pkts_user.c", "startLine": "279", "endLine": "366", "capability": {"capability": [], "helperCallParams": {}}}, {"fileName": "/root/examples/xdp-tutorials/trace_load_and_stats.c", "startLine": "843", "endLine": "868", "capability": {"capability": [], "helperCallParams": {}}}, {"fileName": "/root/examples/xdp-tutorials/xdp_pass_user.c", "startLine": "126", "endLine": "177", "capability": {"capability": [], "helperCallParams": {}}}, {"fileName": "/root/examples/xdp-tutorials/af_xdp_user.c", "startLine": "501", "endLine": "611", "capability": {"capability": [], "helperCallParams": {}}}], "print_ether_addr": [{"fileName": "/root/examples/xdp-tutorials/trace_read.c", "startLine": "16", "endLine": "24", "capability": {"capability": [], "helperCallParams": {}}}], "xdp_sample_prog": [{"fileName": "/root/examples/xdp-tutorials/xdp_sample_pkts_kern.c", "startLine": "35", "endLine": "69", "capability": {"capability": [], "helperCallParams": {"bpf_perf_event_output": [{"opVar": "\t\tret ", "inpVar": [" ctx", " &my_map", " flags", "\t\t\t\t\t    &metadata", " sizeofmetadata"]}]}}}], "IS_ERR_OR_NULL": [{"fileName": "/root/examples/xdp-tutorials/common_libbpf.c", "startLine": "14", "endLine": "17", "capability": {"capability": [], "helperCallParams": {}}}], "bpf_prog_load_xattr_maps": [{"fileName": "/root/examples/xdp-tutorials/common_libbpf.c", "startLine": "24", "endLine": "162", "capability": {"capability": [], "helperCallParams": {}}}], "xdp_redirect_collect_stat": [{"fileName": "/root/examples/xdp-tutorials/trace_prog_kern.c", "startLine": "44", "endLine": "66", "capability": {"capability": [{"capability": "map_read", "map_read": [{"Return Type": "void*", "Description": "Perform a lookup in <[ map ]>(IP: 0) for an entry associated to key. ", "Return": " Map value associated to key, or NULL if no entry was found.", "Function Name": "bpf_map_lookup_elem", "Input Params": ["{Type: struct bpf_map ,Var: *map}", "{Type:  const void ,Var: *key}"]}]}], "helperCallParams": {"bpf_map_lookup_elem": [{"opVar": "\tcnt  ", "inpVar": [" &redirect_err_cnt", " &key"]}]}}}], "trace_xdp_redirect_err": [{"fileName": "/root/examples/xdp-tutorials/trace_prog_kern.c", "startLine": "69", "endLine": "72", "capability": {"capability": [], "helperCallParams": {}}}], "trace_xdp_redirect_map_err": [{"fileName": "/root/examples/xdp-tutorials/trace_prog_kern.c", "startLine": "75", "endLine": "78", "capability": {"capability": [], "helperCallParams": {}}}], "trace_xdp_redirect": [{"fileName": "/root/examples/xdp-tutorials/trace_prog_kern.c", "startLine": "82", "endLine": "85", "capability": {"capability": [], "helperCallParams": {}}}], "trace_xdp_redirect_map": [{"fileName": "/root/examples/xdp-tutorials/trace_prog_kern.c", "startLine": "89", "endLine": "92", "capability": {"capability": [], "helperCallParams": {}}}], "trace_xdp_exception": [{"fileName": "/root/examples/xdp-tutorials/trace_prog_kern.c", "startLine": "105", "endLine": "120", "capability": {"capability": [{"capability": "map_read", "map_read": [{"Return Type": "void*", "Description": "Perform a lookup in <[ map ]>(IP: 0) for an entry associated to key. ", "Return": " Map value associated to key, or NULL if no entry was found.", "Function Name": "bpf_map_lookup_elem", "Input Params": ["{Type: struct bpf_map ,Var: *map}", "{Type:  const void ,Var: *key}"]}]}], "helperCallParams": {"bpf_map_lookup_elem": [{"opVar": "\tcnt ", "inpVar": [" &exception_cnt", " &key"]}]}}}], "trace_xdp_cpumap_enqueue": [{"fileName": "/root/examples/xdp-tutorials/trace_prog_kern.c", "startLine": "159", "endLine": "178", "capability": {"capability": [{"capability": "map_read", "map_read": [{"Return Type": "void*", "Description": "Perform a lookup in <[ map ]>(IP: 0) for an entry associated to key. ", "Return": " Map value associated to key, or NULL if no entry was found.", "Function Name": "bpf_map_lookup_elem", "Input Params": ["{Type: struct bpf_map ,Var: *map}", "{Type:  const void ,Var: *key}"]}]}], "helperCallParams": {"bpf_map_lookup_elem": [{"opVar": "\trec ", "inpVar": [" &cpumap_enqueue_cnt", " &to_cpu"]}]}}}], "trace_xdp_cpumap_kthread": [{"fileName": "/root/examples/xdp-tutorials/trace_prog_kern.c", "startLine": "194", "endLine": "210", "capability": {"capability": [{"capability": "map_read", "map_read": [{"Return Type": "void*", "Description": "Perform a lookup in <[ map ]>(IP: 0) for an entry associated to key. ", "Return": " Map value associated to key, or NULL if no entry was found.", "Function Name": "bpf_map_lookup_elem", "Input Params": ["{Type: struct bpf_map ,Var: *map}", "{Type:  const void ,Var: *key}"]}]}], "helperCallParams": {"bpf_map_lookup_elem": [{"opVar": "\trec ", "inpVar": [" &cpumap_kthread_cnt", " &key"]}]}}}], "trace_xdp_devmap_xmit": [{"fileName": "/root/examples/xdp-tutorials/trace_prog_kern.c", "startLine": "234", "endLine": "257", "capability": {"capability": [{"capability": "map_read", "map_read": [{"Return Type": "void*", "Description": "Perform a lookup in <[ map ]>(IP: 0) for an entry associated to key. ", "Return": " Map value associated to key, or NULL if no entry was found.", "Function Name": "bpf_map_lookup_elem", "Input Params": ["{Type: struct bpf_map ,Var: *map}", "{Type:  const void ,Var: *key}"]}]}], "helperCallParams": {"bpf_map_lookup_elem": [{"opVar": "\trec ", "inpVar": [" &devmap_xmit_cnt", " &key"]}]}}}], "parse_u8": [{"fileName": "/root/examples/xdp-tutorials/xdp_prog_user.c", "startLine": "53", "endLine": "65", "capability": {"capability": [], "helperCallParams": {}}}], "parse_mac": [{"fileName": "/root/examples/xdp-tutorials/xdp_prog_user.c", "startLine": "67", "endLine": "83", "capability": {"capability": [], "helperCallParams": {}}}], "write_iface_params": [{"fileName": "/root/examples/xdp-tutorials/xdp_prog_user.c", "startLine": "85", "endLine": "100", "capability": {"capability": [{"capability": "map_update", "map_update": [{"Return Type": "int", "Description": "Add or update the <[ value ]>(IP: 2) of the entry associated to <[ key ]>(IP: 1) in <[ map ]>(IP: 0) with value. <[ flags ]>(IP: 3) is one of: BPF_NOEXIST The entry for <[ key ]>(IP: 1) must not exist in the map. BPF_EXIST The entry for <[ key ]>(IP: 1) must already exist in the map. BPF_ANY No condition on the existence of the entry for key. Flag <[ value ]>(IP: 2) BPF_NOEXIST cannot be used for maps of types BPF_MAP_TYPE_ARRAY or BPF_MAP_TYPE_PERCPU_ARRAY (all elements always exist) , the helper would return an error. ", "Return": " 0 on success, or a negative error in case of failure.", "Function Name": "bpf_map_update_elem", "Input Params": ["{Type: struct bpf_map ,Var: *map}", "{Type:  const void ,Var: *key}", "{Type:  const void ,Var: *value}", "{Type:  u64 ,Var: flags}"]}]}], "helperCallParams": {"bpf_map_update_elem": [{"opVar": "NA", "inpVar": ["\tif map_fd", " src", " dest", " 0 < 0 "]}]}}}], "xdp_prog_simple": [{"fileName": "/root/examples/xdp-tutorials/xdp_pass_kern.c", "startLine": "6", "endLine": "9", "capability": {"capability": [], "helperCallParams": {}}}, {"fileName": "/root/examples/xdp-tutorials/xdp_prog_kern.c", "startLine": "31", "endLine": "47", "capability": {"capability": [], "helperCallParams": {}}}], "_xdp_end_loop": [{"fileName": "/root/examples/xdp-tutorials/xdp_prog_kern2.c", "startLine": "19", "endLine": "63", "capability": {"capability": [], "helperCallParams": {}}}], "xdp_link_attach": [{"fileName": "/root/examples/xdp-tutorials/common_user_bpf_xdp.c", "startLine": "19", "endLine": "61", "capability": {"capability": [], "helperCallParams": {}}}, {"fileName": "/root/examples/xdp-tutorials/xdp_pass_user.c", "startLine": "80", "endLine": "124", "capability": {"capability": [], "helperCallParams": {}}}], "xdp_link_detach": [{"fileName": "/root/examples/xdp-tutorials/common_user_bpf_xdp.c", "startLine": "63", "endLine": "100", "capability": {"capability": [], "helperCallParams": {}}}, {"fileName": "/root/examples/xdp-tutorials/xdp_pass_user.c", "startLine": "65", "endLine": "78", "capability": {"capability": [], "helperCallParams": {}}}], "*load_bpf_object_file": [{"fileName": "/root/examples/xdp-tutorials/common_user_bpf_xdp.c", "startLine": "102", "endLine": "130", "capability": {"capability": [], "helperCallParams": {}}}], "*open_bpf_object": [{"fileName": "/root/examples/xdp-tutorials/common_user_bpf_xdp.c", "startLine": "132", "endLine": "170", "capability": {"capability": [], "helperCallParams": {}}}], "reuse_maps": [{"fileName": "/root/examples/xdp-tutorials/common_user_bpf_xdp.c", "startLine": "172", "endLine": "204", "capability": {"capability": [], "helperCallParams": {}}}], "*load_bpf_object_file_reuse_maps": [{"fileName": "/root/examples/xdp-tutorials/common_user_bpf_xdp.c", "startLine": "206", "endLine": "234", "capability": {"capability": [], "helperCallParams": {}}}], "*load_bpf_and_xdp_attach": [{"fileName": "/root/examples/xdp-tutorials/common_user_bpf_xdp.c", "startLine": "236", "endLine": "294", "capability": {"capability": [], "helperCallParams": {}}}], "*action2str": [{"fileName": "/root/examples/xdp-tutorials/common_user_bpf_xdp.c", "startLine": "310", "endLine": "315", "capability": {"capability": [], "helperCallParams": {}}}], "check_map_fd_info": [{"fileName": "/root/examples/xdp-tutorials/common_user_bpf_xdp.c", "startLine": "317", "endLine": "346", "capability": {"capability": [], "helperCallParams": {}}}], "open_bpf_map_file": [{"fileName": "/root/examples/xdp-tutorials/common_user_bpf_xdp.c", "startLine": "348", "endLine": "380", "capability": {"capability": [], "helperCallParams": {}}}], "xdp_sock_prog": [{"fileName": "/root/examples/xdp-tutorials/af_xdp_kern.c", "startLine": "22", "endLine": "41", "capability": {"capability": [{"capability": "map_read", "map_read": [{"Return Type": "void*", "Description": "Perform a lookup in <[ map ]>(IP: 0) for an entry associated to key. ", "Return": " Map value associated to key, or NULL if no entry was found.", "Function Name": "bpf_map_lookup_elem", "Input Params": ["{Type: struct bpf_map ,Var: *map}", "{Type:  const void ,Var: *key}"]}]}], "helperCallParams": {"bpf_map_lookup_elem": [{"opVar": "    pkt_count ", "inpVar": [" &xdp_stats_map", " &index"]}, {"opVar": "NA", "inpVar": ["            if &xsks_map", " &index        return bpf_redirect_map&xsks_map", " index", " 0"]}]}}}], "_xdp_fail1": [{"fileName": "/root/examples/xdp-tutorials/xdp_prog_fail1.c", "startLine": "14", "endLine": "46", "capability": {"capability": [], "helperCallParams": {}}}], "_xdp_fail3": [{"fileName": "/root/examples/xdp-tutorials/xdp_prog_fail3.c", "startLine": "21", "endLine": "55", "capability": {"capability": [], "helperCallParams": {}}}], "csum_fold_helper": [{"fileName": "/root/examples/xdp-tutorials/xdp_prog_kern_03.c", "startLine": "33", "endLine": "39", "capability": {"capability": [], "helperCallParams": {}}}], "icmp_checksum_diff": [{"fileName": "/root/examples/xdp-tutorials/xdp_prog_kern_03.c", "startLine": "48", "endLine": "57", "capability": {"capability": [{"capability": "read_skb", "read_skb": [{"Return Type": "s64", "Description": "Compute a checksum difference , <[ from ]>(IP: 0) the raw buffer pointed by <[ from ]>(IP: 0) , of length <[ from_size ]>(IP: 1) (that must be a multiple of 4) , towards the raw buffer pointed by <[ to ]>(IP: 2) , of size <[ to_size ]>(IP: 3) (same remark). An optional <[ seed ]>(IP: 4) can be added <[ to ]>(IP: 2) the value (this can be cascaded , the <[ seed ]>(IP: 4) may come <[ from ]>(IP: 0) a previous call <[ to ]>(IP: 2) the helper). This is flexible enough <[ to ]>(IP: 2) be used in several ways: \u00b7 With <[ from_size ]>(IP: 1) == 0 , <[ to_size ]>(IP: 3) > 0 and <[ seed ]>(IP: 4) set <[ to ]>(IP: 2) checksum , it can be used when pushing new data. \u00b7 With <[ from_size ]>(IP: 1) > 0 , <[ to_size ]>(IP: 3) == 0 and <[ seed ]>(IP: 4) set <[ to ]>(IP: 2) checksum , it can be used when removing data <[ from ]>(IP: 0) a packet. \u00b7 With <[ from_size ]>(IP: 1) > 0 , <[ to_size ]>(IP: 3) > 0 and <[ seed ]>(IP: 4) set <[ to ]>(IP: 2) 0 , it can be used <[ to ]>(IP: 2) compute a diff. Note that <[ from_size ]>(IP: 1) and <[ to_size ]>(IP: 3) do not need <[ to ]>(IP: 2) be equal. This helper can be used in combination with bpf_l3_csum_replace() and bpf_l4_csum_replace() , <[ to ]>(IP: 2) which one can feed in the difference computed with bpf_csum_diff(). ", "Return": " The checksum result, or a negative error code in case of failure.", "Function Name": "bpf_csum_diff", "Input Params": ["{Type: __be32 ,Var: *from}", "{Type:  u32 ,Var: from_size}", "{Type:  __be32 ,Var: *to}", "{Type:  u32 ,Var: to_size}", "{Type:  __wsum ,Var: seed}"]}]}], "helperCallParams": {"bpf_csum_diff": [{"opVar": "\tcsum ", "inpVar": [" __be32 *icmphdr_old", " size", " __be32 *icmphdr_new", " size", " seed"]}]}}}], "xdp_icmp_echo_func": [{"fileName": "/root/examples/xdp-tutorials/xdp_prog_kern_03.c", "startLine": "61", "endLine": "150", "capability": {"capability": [], "helperCallParams": {}}}], "xdp_redirect_func": [{"fileName": "/root/examples/xdp-tutorials/xdp_prog_kern_03.c", "startLine": "154", "endLine": "179", "capability": {"capability": [], "helperCallParams": {"bpf_redirect": [{"opVar": "\taction ", "inpVar": [" ifindex", " 0"]}]}}}], "xdp_redirect_map_func": [{"fileName": "/root/examples/xdp-tutorials/xdp_prog_kern_03.c", "startLine": "183", "endLine": "212", "capability": {"capability": [{"capability": "map_read", "map_read": [{"Return Type": "void*", "Description": "Perform a lookup in <[ map ]>(IP: 0) for an entry associated to key. ", "Return": " Map value associated to key, or NULL if no entry was found.", "Function Name": "bpf_map_lookup_elem", "Input Params": ["{Type: struct bpf_map ,Var: *map}", "{Type:  const void ,Var: *key}"]}]}], "helperCallParams": {"bpf_map_lookup_elem": [{"opVar": "\t\tdst ", "inpVar": [" &redirect_params", " eth->h_source"]}], "bpf_redirect": [{"opVar": "\taction ", "inpVar": [" _map&tx_port", " 0", " 0"]}]}}}], "ip_decrease_ttl": [{"fileName": "/root/examples/xdp-tutorials/xdp_prog_kern_03.c", "startLine": "221", "endLine": "227", "capability": {"capability": [], "helperCallParams": {}}}], "xdp_router_func": [{"fileName": "/root/examples/xdp-tutorials/xdp_prog_kern_03.c", "startLine": "231", "endLine": "325", "capability": {"capability": [{"capability": "read_sys_info", "read_sys_info": [{"Return Type": "int", "Description": "Do FIB lookup in kernel tables using parameters in params. If lookup is successful and result shows packet is to be forwarded , the neighbor tables are searched for the nexthop. If successful (ie. , FIB lookup shows forwarding and nexthop is resolved) , the nexthop address is returned in ipv4_dst or ipv6_dst based on family , smac is set to mac address of egress device , dmac is set to nexthop mac address , rt_metric is set to metric from route (IPv4/IPv6 only) , and ifindex is set to the device index of the nexthop from the FIB lookup. <[ plen ]>(IP: 2) argument is the size of the passed in struct. <[ flags ]>(IP: 3) argument can be a combination of one or more of the following values: BPF_FIB_LOOKUP_DIRECT Do a direct table lookup vs full lookup using FIB rules. BPF_FIB_LOOKUP_OUTPUT Perform lookup from an egress perspective (default is ingress). <[ ctx ]>(IP: 0) is either struct xdp_md for XDP programs or struct sk_buff tc cls_act programs. Return \u00b7 < 0 if any input argument is invalid \u00b7 0 on success (packet is forwarded , nexthop neighbor exists) \u00b7 > 0 one of BPF_FIB_LKUP_RET_ codes explaining why the packet is not forwarded or needs assist from full stack ", "Function Name": "bpf_fib_lookup", "Input Params": ["{Type: void ,Var: *ctx}", "{Type:  struct bpf_fib_lookup ,Var: *params}", "{Type:  int ,Var: plen}", "{Type:  u32 ,Var: flags}"]}]}], "helperCallParams": {"bpf_fib_lookup": [{"opVar": "\tstruct bpf_fib_lookup fib_params ", "inpVar": [" "]}, {"opVar": "\trc ", "inpVar": [" ctx", " &fib_params", " sizeoffib_params", " 0"]}], "bpf_redirect": [{"opVar": "\t\taction ", "inpVar": [" fib_params.ifindex", " 0"]}]}}}], "xdp_pass_func": [{"fileName": "/root/examples/xdp-tutorials/xdp_prog_kern_03.c", "startLine": "328", "endLine": "331", "capability": {"capability": [], "helperCallParams": {}}}, {"fileName": "/root/examples/xdp-tutorials/xdp_prog_kern_02.c", "startLine": "95", "endLine": "98", "capability": {"capability": [], "helperCallParams": {}}}], "__parse_ethhdr_vlan": [{"fileName": "/root/examples/xdp-tutorials/xdp_vlan02_kern.c", "startLine": "22", "endLine": "65", "capability": {"capability": [], "helperCallParams": {}}}], "xdp_vlan_02": [{"fileName": "/root/examples/xdp-tutorials/xdp_vlan02_kern.c", "startLine": "69", "endLine": "127", "capability": {"capability": [], "helperCallParams": {}}}], "pin_maps_in_bpf_object": [{"fileName": "/root/examples/xdp-tutorials/xdp_loader.c", "startLine": "73", "endLine": "107", "capability": {"capability": [], "helperCallParams": {}}}], "stats_print_header": [{"fileName": "/root/examples/xdp-tutorials/xdp_stats.c", "startLine": "77", "endLine": "81", "capability": {"capability": [], "helperCallParams": {}}}], "_print_options": [{"fileName": "/root/examples/xdp-tutorials/common_params.c", "startLine": "19", "endLine": "39", "capability": {"capability": [], "helperCallParams": {}}}], "usage": [{"fileName": "/root/examples/xdp-tutorials/common_params.c", "startLine": "41", "endLine": "58", "capability": {"capability": [], "helperCallParams": {}}}], "option_wrappers_to_options": [{"fileName": "/root/examples/xdp-tutorials/common_params.c", "startLine": "60", "endLine": "77", "capability": {"capability": [], "helperCallParams": {}}}], "parse_cmdline_args": [{"fileName": "/root/examples/xdp-tutorials/common_params.c", "startLine": "79", "endLine": "198", "capability": {"capability": [], "helperCallParams": {}}}], "_xdp_works1": [{"fileName": "/root/examples/xdp-tutorials/xdp_prog_kern3.c", "startLine": "15", "endLine": "56", "capability": {"capability": [], "helperCallParams": {}}}], "proto_is_vlan": [{"fileName": "/root/examples/xdp-tutorials/xdp_vlan01_kern.c", "startLine": "21", "endLine": "25", "capability": {"capability": [], "helperCallParams": {}}}], "parse_ethhdr": [{"fileName": "/root/examples/xdp-tutorials/xdp_vlan01_kern.c", "startLine": "42", "endLine": "79", "capability": {"capability": [], "helperCallParams": {}}}], "xdp_vlan_01": [{"fileName": "/root/examples/xdp-tutorials/xdp_vlan01_kern.c", "startLine": "82", "endLine": "115", "capability": {"capability": [], "helperCallParams": {}}}], "do_attach": [{"fileName": "/root/examples/xdp-tutorials/xdp_sample_pkts_user.c", "startLine": "46", "endLine": "66", "capability": {"capability": [], "helperCallParams": {}}}], "do_detach": [{"fileName": "/root/examples/xdp-tutorials/xdp_sample_pkts_user.c", "startLine": "68", "endLine": "89", "capability": {"capability": [], "helperCallParams": {}}}], "print_bpf_output": [{"fileName": "/root/examples/xdp-tutorials/xdp_sample_pkts_user.c", "startLine": "94", "endLine": "133", "capability": {"capability": [], "helperCallParams": {}}}], "test_bpf_perf_event": [{"fileName": "/root/examples/xdp-tutorials/xdp_sample_pkts_user.c", "startLine": "135", "endLine": "156", "capability": {"capability": [{"capability": "map_update", "map_update": [{"Return Type": "int", "Description": "Add or update the <[ value ]>(IP: 2) of the entry associated to <[ key ]>(IP: 1) in <[ map ]>(IP: 0) with value. <[ flags ]>(IP: 3) is one of: BPF_NOEXIST The entry for <[ key ]>(IP: 1) must not exist in the map. BPF_EXIST The entry for <[ key ]>(IP: 1) must already exist in the map. BPF_ANY No condition on the existence of the entry for key. Flag <[ value ]>(IP: 2) BPF_NOEXIST cannot be used for maps of types BPF_MAP_TYPE_ARRAY or BPF_MAP_TYPE_PERCPU_ARRAY (all elements always exist) , the helper would return an error. ", "Return": " 0 on success, or a negative error in case of failure.", "Function Name": "bpf_map_update_elem", "Input Params": ["{Type: struct bpf_map ,Var: *map}", "{Type:  const void ,Var: *key}", "{Type:  const void ,Var: *value}", "{Type:  u64 ,Var: flags}"]}]}], "helperCallParams": {"bpf_map_update_elem": [{"opVar": "\t\tassert(bpf_map_update_elem(map_fd, &key,\t\t\t\t\t   &pmu_fds[i], BPF_ANY) ", "inpVar": [""]}]}}}], "sig_handler": [{"fileName": "/root/examples/xdp-tutorials/xdp_sample_pkts_user.c", "startLine": "160", "endLine": "163", "capability": {"capability": [], "helperCallParams": {}}}], "bpf_perf_event_print": [{"fileName": "/root/examples/xdp-tutorials/xdp_sample_pkts_user.c", "startLine": "173", "endLine": "197", "capability": {"capability": [], "helperCallParams": {}}}], "perf_event_mmap_header": [{"fileName": "/root/examples/xdp-tutorials/xdp_sample_pkts_user.c", "startLine": "202", "endLine": "218", "capability": {"capability": [], "helperCallParams": {}}}], "perf_event_poller_multi": [{"fileName": "/root/examples/xdp-tutorials/xdp_sample_pkts_user.c", "startLine": "220", "endLine": "258", "capability": {"capability": [{"capability": "read_sys_info", "read_sys_info": [{"Return Type": "u64", "Description": "Read the value of a perf event counter. This helper relies on a <[ map ]>(IP: 0) of type BPF_MAP_TYPE_PERF_EVENT_ARRAY. The nature of the perf event counter is selected when <[ map ]>(IP: 0) is updated with perf event file descriptors. The <[ map ]>(IP: 0) is an array whose size is the number of available CPUs , and each cell contains a value relative to one CPU. The value to retrieve is indicated by <[ flags ]>(IP: 1) , that contains the index of the CPU to look up , masked with BPF_F_INDEX_MASK. Alternatively , <[ flags ]>(IP: 1) can be set to BPF_F_CURRENT_CPU to indicate that the value for the current CPU should be retrieved. Note that before Linux 4. 13 , only hardware perf event can be retrieved. Also , be aware that the newer helper bpf_perf_event_read_value() is recommended over bpf_perf_event_read() in general. The latter has some ABI quirks where error and counter value are used as a return code (which is wrong to do since ranges may overlap). This issue is fixed with bpf_perf_event_read_value() , which at the same time provides more features over the bpf_perf_event_read() interface. Please refer to the description of bpf_perf_event_read_value() for details. ", "Return": " The value of the perf event counter read from the map, or a  negative  error                     code in case of failure.", "Function Name": "bpf_perf_event_read", "Input Params": ["{Type: struct bpf_map ,Var: *map}", "{Type:  u64 ,Var: flags}"]}]}], "helperCallParams": {"bpf_perf_event_read": [{"opVar": "\t\t\tret ", "inpVar": [" _simpleheaders[i]", "\t\t\t\t\t\t\t page_cnt * page_size", "\t\t\t\t\t\t\t page_size", " &buf", " &len", "\t\t\t\t\t\t\t bpf_perf_event_print", "\t\t\t\t\t\t\t output_fn"]}]}}}], "*err2str": [{"fileName": "/root/examples/xdp-tutorials/trace_load_and_stats.c", "startLine": "53", "endLine": "58", "capability": {"capability": [], "helperCallParams": {}}}], "__check_map": [{"fileName": "/root/examples/xdp-tutorials/trace_load_and_stats.c", "startLine": "173", "endLine": "178", "capability": {"capability": [], "helperCallParams": {}}}], "check_map": [{"fileName": "/root/examples/xdp-tutorials/trace_load_and_stats.c", "startLine": "180", "endLine": "245", "capability": {"capability": [], "helperCallParams": {}}}], "check_maps": [{"fileName": "/root/examples/xdp-tutorials/trace_load_and_stats.c", "startLine": "247", "endLine": "265", "capability": {"capability": [], "helperCallParams": {}}}], "map_collect_record": [{"fileName": "/root/examples/xdp-tutorials/trace_load_and_stats.c", "startLine": "281", "endLine": "316", "capability": {"capability": [{"capability": "map_read", "map_read": [{"Return Type": "void*", "Description": "Perform a lookup in <[ map ]>(IP: 0) for an entry associated to key. ", "Return": " Map value associated to key, or NULL if no entry was found.", "Function Name": "bpf_map_lookup_elem", "Input Params": ["{Type: struct bpf_map ,Var: *map}", "{Type:  const void ,Var: *key}"]}]}], "helperCallParams": {"bpf_map_lookup_elem": [{"opVar": "\tif ((bpf_map_lookup_elem(fd, &key, values)) !", "inpVar": [" 0 "]}, {"opVar": "NA", "inpVar": ["\t\tfprintfstderr", "\t\t\t\"ERR:  failed key:0x%X\\n\"", " key"]}]}}}], "map_collect_record_u64": [{"fileName": "/root/examples/xdp-tutorials/trace_load_and_stats.c", "startLine": "318", "endLine": "341", "capability": {"capability": [{"capability": "map_read", "map_read": [{"Return Type": "void*", "Description": "Perform a lookup in <[ map ]>(IP: 0) for an entry associated to key. ", "Return": " Map value associated to key, or NULL if no entry was found.", "Function Name": "bpf_map_lookup_elem", "Input Params": ["{Type: struct bpf_map ,Var: *map}", "{Type:  const void ,Var: *key}"]}]}], "helperCallParams": {"bpf_map_lookup_elem": [{"opVar": "\tif ((bpf_map_lookup_elem(fd, &key, values)) !", "inpVar": [" 0 "]}, {"opVar": "NA", "inpVar": ["\t\tfprintfstderr", "\t\t\t\"ERR:  failed key:0x%X\\n\"", " key"]}]}}}], "calc_period_u64": [{"fileName": "/root/examples/xdp-tutorials/trace_load_and_stats.c", "startLine": "355", "endLine": "365", "capability": {"capability": [], "helperCallParams": {}}}], "calc_pps": [{"fileName": "/root/examples/xdp-tutorials/trace_load_and_stats.c", "startLine": "367", "endLine": "377", "capability": {"capability": [], "helperCallParams": {}}}], "calc_pps_u64": [{"fileName": "/root/examples/xdp-tutorials/trace_load_and_stats.c", "startLine": "379", "endLine": "389", "capability": {"capability": [], "helperCallParams": {}}}], "calc_drop": [{"fileName": "/root/examples/xdp-tutorials/trace_load_and_stats.c", "startLine": "391", "endLine": "401", "capability": {"capability": [], "helperCallParams": {}}}], "calc_info": [{"fileName": "/root/examples/xdp-tutorials/trace_load_and_stats.c", "startLine": "403", "endLine": "413", "capability": {"capability": [], "helperCallParams": {}}}], "calc_err": [{"fileName": "/root/examples/xdp-tutorials/trace_load_and_stats.c", "startLine": "415", "endLine": "425", "capability": {"capability": [], "helperCallParams": {}}}], "map_fd": [{"fileName": "/root/examples/xdp-tutorials/trace_load_and_stats.c", "startLine": "610", "endLine": "619", "capability": {"capability": [], "helperCallParams": {}}}], "*alloc_rec_per_cpu": [{"fileName": "/root/examples/xdp-tutorials/trace_load_and_stats.c", "startLine": "657", "endLine": "671", "capability": {"capability": [], "helperCallParams": {}}}], "*alloc_stats_record": [{"fileName": "/root/examples/xdp-tutorials/trace_load_and_stats.c", "startLine": "673", "endLine": "703", "capability": {"capability": [], "helperCallParams": {}}}], "free_stats_record": [{"fileName": "/root/examples/xdp-tutorials/trace_load_and_stats.c", "startLine": "705", "endLine": "722", "capability": {"capability": [], "helperCallParams": {}}}], "swap": [{"fileName": "/root/examples/xdp-tutorials/trace_load_and_stats.c", "startLine": "725", "endLine": "732", "capability": {"capability": [], "helperCallParams": {}}}], "filename__read_int": [{"fileName": "/root/examples/xdp-tutorials/trace_load_and_stats.c", "startLine": "761", "endLine": "776", "capability": {"capability": [], "helperCallParams": {}}}], "sys_perf_event_open": [{"fileName": "/root/examples/xdp-tutorials/trace_load_and_stats.c", "startLine": "778", "endLine": "784", "capability": {"capability": [], "helperCallParams": {}}}], "*load_bpf_and_trace_attach": [{"fileName": "/root/examples/xdp-tutorials/trace_load_and_stats.c", "startLine": "786", "endLine": "841", "capability": {"capability": [], "helperCallParams": {}}}], "_xdp_fail2": [{"fileName": "/root/examples/xdp-tutorials/xdp_prog_fail2.c", "startLine": "14", "endLine": "34", "capability": {"capability": [], "helperCallParams": {}}}], "load_bpf_object_file__simple": [{"fileName": "/root/examples/xdp-tutorials/xdp_pass_user.c", "startLine": "43", "endLine": "63", "capability": {"capability": [], "helperCallParams": {}}}], "ether_addr_to_u64": [{"fileName": "/root/examples/xdp-tutorials/xdp_prog_kern.c", "startLine": "20", "endLine": "28", "capability": {"capability": [], "helperCallParams": {}}}], "_xdp_test1": [{"fileName": "/root/examples/xdp-tutorials/xdp_prog_kern4.c", "startLine": "8", "endLine": "22", "capability": {"capability": [], "helperCallParams": {}}}], "xdp_patch_ports_func": [{"fileName": "/root/examples/xdp-tutorials/xdp_prog_kern_02.c", "startLine": "21", "endLine": "64", "capability": {"capability": [], "helperCallParams": {}}}], "xdp_vlan_swap_func": [{"fileName": "/root/examples/xdp-tutorials/xdp_prog_kern_02.c", "startLine": "71", "endLine": "92", "capability": {"capability": [], "helperCallParams": {}}}], "xsk_ring_prod__free": [{"fileName": "/root/examples/xdp-tutorials/af_xdp_user.c", "startLine": "69", "endLine": "73", "capability": {"capability": [], "helperCallParams": {}}}], "*configure_xsk_umem": [{"fileName": "/root/examples/xdp-tutorials/af_xdp_user.c", "startLine": "126", "endLine": "144", "capability": {"capability": [], "helperCallParams": {}}}], "xsk_alloc_umem_frame": [{"fileName": "/root/examples/xdp-tutorials/af_xdp_user.c", "startLine": "146", "endLine": "155", "capability": {"capability": [], "helperCallParams": {}}}], "xsk_free_umem_frame": [{"fileName": "/root/examples/xdp-tutorials/af_xdp_user.c", "startLine": "157", "endLine": "162", "capability": {"capability": [], "helperCallParams": {}}}], "xsk_umem_free_frames": [{"fileName": "/root/examples/xdp-tutorials/af_xdp_user.c", "startLine": "164", "endLine": "167", "capability": {"capability": [], "helperCallParams": {}}}], "*xsk_configure_socket": [{"fileName": "/root/examples/xdp-tutorials/af_xdp_user.c", "startLine": "169", "endLine": "227", "capability": {"capability": [], "helperCallParams": {}}}], "complete_tx": [{"fileName": "/root/examples/xdp-tutorials/af_xdp_user.c", "startLine": "229", "endLine": "255", "capability": {"capability": [], "helperCallParams": {}}}], "csum16_add": [{"fileName": "/root/examples/xdp-tutorials/af_xdp_user.c", "startLine": "257", "endLine": "263", "capability": {"capability": [], "helperCallParams": {}}}], "csum16_sub": [{"fileName": "/root/examples/xdp-tutorials/af_xdp_user.c", "startLine": "265", "endLine": "268", "capability": {"capability": [], "helperCallParams": {}}}], "csum_replace2": [{"fileName": "/root/examples/xdp-tutorials/af_xdp_user.c", "startLine": "270", "endLine": "273", "capability": {"capability": [], "helperCallParams": {}}}], "process_packet": [{"fileName": "/root/examples/xdp-tutorials/af_xdp_user.c", "startLine": "275", "endLine": "339", "capability": {"capability": [], "helperCallParams": {}}}], "handle_receive_packets": [{"fileName": "/root/examples/xdp-tutorials/af_xdp_user.c", "startLine": "341", "endLine": "388", "capability": {"capability": [], "helperCallParams": {}}}], "rx_and_process": [{"fileName": "/root/examples/xdp-tutorials/af_xdp_user.c", "startLine": "390", "endLine": "408", "capability": {"capability": [], "helperCallParams": {}}}], "*stats_poll": [{"fileName": "/root/examples/xdp-tutorials/af_xdp_user.c", "startLine": "475", "endLine": "493", "capability": {"capability": [], "helperCallParams": {}}}], "exit_application": [{"fileName": "/root/examples/xdp-tutorials/af_xdp_user.c", "startLine": "495", "endLine": "499", "capability": {"capability": [], "helperCallParams": {}}}]}