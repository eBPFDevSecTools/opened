<?xml version="1.0"?>
<doc>
<source file="/root/examples/xdp-tutorials/xdp_prog_kern_02.c" funcheader="int xdp_patch_ports_func (struct xdp_md *ctx)" startline="21" endline="64">
int xdp_patch_ports_func (struct xdp_md *ctx)
{
    int action = XDP_PASS;
    int eth_type, ip_type;
    struct ethhdr *eth;
    struct iphdr *iphdr;
    struct ipv6hdr *ipv6hdr;
    struct udphdr *udphdr;
    struct tcphdr *tcphdr;
    void *data_end = (void *) (long) ctx->data_end;
    void *data = (void *) (long) ctx->data;
    struct hdr_cursor nh = {
        .pos = data}
    ;
    eth_type = parse_ethhdr (& nh, data_end, & eth);
    if (eth_type < 0) {
        action = XDP_ABORTED;
        goto out;
    }
    if (eth_type == bpf_htons (ETH_P_IP)) {
        ip_type = parse_iphdr (& nh, data_end, & iphdr);
    }
    else if (eth_type == bpf_htons (ETH_P_IPV6)) {
        ip_type = parse_ip6hdr (& nh, data_end, & ipv6hdr);
    }
    else {
        goto out;
    }
    if (ip_type == IPPROTO_UDP) {
        if (parse_udphdr (&nh, data_end, &udphdr) < 0) {
            action = XDP_ABORTED;
            goto out;
        }
        udphdr->dest = bpf_htons (bpf_ntohs (udphdr->dest) - 1);
    }
    else if (ip_type == IPPROTO_TCP) {
        if (parse_tcphdr (&nh, data_end, &tcphdr) < 0) {
            action = XDP_ABORTED;
            goto out;
        }
        tcphdr->dest = bpf_htons (bpf_ntohs (tcphdr->dest) - 1);
    }
out :
    return xdp_stats_record_action (ctx, action);
}
</source>
<source file="/root/examples/xdp-tutorials/xdp_prog_kern_02.c" funcheader="int xdp_vlan_swap_func (struct xdp_md *ctx)" startline="71" endline="92">
int xdp_vlan_swap_func (struct xdp_md *ctx)
{
    void *data_end = (void *) (long) ctx->data_end;
    void *data = (void *) (long) ctx->data;
    struct hdr_cursor nh;
    int nh_type;
    nh.pos = data;
    struct ethhdr *eth;
    nh_type = parse_ethhdr (& nh, data_end, & eth);
    if (nh_type < 0)
        return XDP_PASS;
    if (proto_is_vlan (eth->h_proto))
        vlan_tag_pop (ctx, eth);
    else
        vlan_tag_push (ctx, eth, 1);
    return XDP_PASS;
}
</source>
<source file="/root/examples/xdp-tutorials/xdp_prog_kern_02.c" funcheader="int xdp_pass_func (struct xdp_md *ctx)" startline="95" endline="98">
int xdp_pass_func (struct xdp_md *ctx)
{
    return XDP_PASS;
}
</source>
</doc>
