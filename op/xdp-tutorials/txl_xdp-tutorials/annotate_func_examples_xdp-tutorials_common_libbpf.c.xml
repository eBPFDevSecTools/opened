<?xml version="1.0"?>
<doc>
<source file="/root/examples/xdp-tutorials/common_libbpf.c" funcheader="static inline bool IS_ERR_OR_NULL (const void *ptr)" startline="14" endline="17">
static inline bool IS_ERR_OR_NULL (const void *ptr)
{
    return (!ptr) || IS_ERR_VALUE ((unsigned long) ptr);
}
</source>
<source file="/root/examples/xdp-tutorials/common_libbpf.c" funcheader="int bpf_prog_load_xattr_maps (const struct bpf_prog_load_attr_maps *attr, struct bpf_object **pobj, int *prog_fd)" startline="24" endline="162">
int bpf_prog_load_xattr_maps (const struct bpf_prog_load_attr_maps *attr, struct bpf_object **pobj, int *prog_fd)
{
    struct bpf_object_open_attr open_attr = {
        .file = attr->file,
        .prog_type = attr->prog_type,}
    ;
    struct bpf_program *prog, *first_prog = NULL;
    enum bpf_attach_type expected_attach_type;
    enum bpf_prog_type prog_type;
    struct bpf_object *obj;
    struct bpf_map *map;
    int err;
    int i;
    if (!attr)
        return -EINVAL;
    if (!attr->file)
        return -EINVAL;
    obj = bpf_object__open_xattr (& open_attr);
    if (IS_ERR_OR_NULL (obj))
        return -ENOENT;
    bpf_object__for_each_program (prog, obj) {
        prog_type = attr->prog_type;
        bpf_program__set_ifindex (prog, attr->ifindex);
        expected_attach_type = attr->expected_attach_type;

#if 0 /* Use internal libbpf variables */
        if (prog_type == BPF_PROG_TYPE_UNSPEC) {
            err = bpf_program__identify_section (prog, & prog_type, & expected_attach_type);
            if (err < 0) {
                bpf_object__close (obj);
                return -EINVAL;
            }
        }

#endif
        bpf_program__set_type (prog, prog_type);
        bpf_program__set_expected_attach_type (prog, expected_attach_type);
        if (!first_prog)
            first_prog = prog;
    }
    for (i = 0; i < attr->nr_pinned_maps; i++)
        attr->pinned_maps[i].map_fd = -1;
    bpf_map__for_each (map, obj) {
        const char *mapname = bpf_map__name (map);
        if (!bpf_map__is_offload_neutral (map))
            bpf_map__set_ifindex (map, attr->ifindex);
        for (i = 0; i < attr->nr_pinned_maps; i++) {
            struct bpf_pinned_map *pin_map = &attr->pinned_maps[i];
            int fd;
            if (strcmp (mapname, pin_map->name) != 0)
                continue;
            fd = bpf_obj_get (pin_map -> filename);
            if (fd > 0) {
                bpf_map__reuse_fd (map, fd);
                pin_map->map_fd = fd;
                continue;
            }
        }
    }
    if (!first_prog) {
        pr_warning ("object file doesn't contain bpf program\n");
        bpf_object__close (obj);
        return -ENOENT;
    }
    err = bpf_object__load (obj);
    if (err) {
        bpf_object__close (obj);
        return -EINVAL;
    }
    bpf_map__for_each (map, obj) {
        const char *mapname = bpf_map__name (map);
        for (i = 0; i < attr->nr_pinned_maps; i++) {
            struct bpf_pinned_map *pin_map = &attr->pinned_maps[i];
            int err;
            if (strcmp (mapname, pin_map->name) != 0)
                continue;
            if (pin_map->map_fd != -1)
                continue;
            err = bpf_map__pin (map, pin_map -> filename);
            if (err)
                continue;
            pin_map->map_fd = bpf_map__fd (map);
        }
    }
    for (i = 0; i < attr->nr_pinned_maps; i++) {
        struct bpf_pinned_map *pin_map = &attr->pinned_maps[i];
        if (pin_map->map_fd < 0)
            pr_warning ("%s() requested mapname:%s not seen\n", __func__, pin_map->name);
    }
    *pobj = obj;
    *prog_fd = bpf_program__fd (first_prog);
    return 0;
}
</source>
</doc>
