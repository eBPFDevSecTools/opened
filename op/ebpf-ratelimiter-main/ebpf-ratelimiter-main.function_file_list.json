{"_xdp_ratelimit": [{"capabilities": [{"capability": "read_sys_info", "read_sys_info": [{"Project": "bcc", "FunctionName": "bpf_ktime_get_ns", "Return Type": "u64", "Description": "u64 bpf_ktime_get_ns(void) Return: u64 number of nanoseconds. Starts at system boot time but stops during suspend. Examples in situ: \"https://github.com/iovisor/bcc/search?q=bpf_ktime_get_ns+path%3Aexamples&type=Code search /examples , \"https://github.com/iovisor/bcc/search?q=bpf_ktime_get_ns+path%3Atools&type=Code search /tools ", "Return": "u64 number of nanoseconds", "Input Prameters": [], "compatible_hookpoints": ["socket_filter", "kprobe", "sched_cls", "sched_act", "tracepoint", "xdp", "perf_event", "cgroup_skb", "cgroup_sock", "lwt_in", "lwt_out", "lwt_xmit", "sock_ops", "sk_skb", "sk_msg", "raw_tracepoint", "cgroup_sock_addr", "lwt_seg6local", "sk_reuseport", "flow_dissector", "raw_tracepoint_writable"], "capabilities": ["read_sys_info"]}]}, {"capability": "map_update", "map_update": [{"Project": "libbpf", "Return Type": "int", "Description": "Add or update the <[ value ]>(IP: 2) of the entry associated to <[ key ]>(IP: 1) in <[ map ]>(IP: 0) with value. <[ flags ]>(IP: 3) is one of: BPF_NOEXIST The entry for <[ key ]>(IP: 1) must not exist in the map. BPF_EXIST The entry for <[ key ]>(IP: 1) must already exist in the map. BPF_ANY No condition on the existence of the entry for key. Flag <[ value ]>(IP: 2) BPF_NOEXIST cannot be used for maps of types BPF_MAP_TYPE_ARRAY or BPF_MAP_TYPE_PERCPU_ARRAY (all elements always exist) , the helper would return an error. ", "Return": " 0 on success, or a negative error in case of failure.", "Function Name": "bpf_map_update_elem", "Input Params": ["{Type: struct bpf_map ,Var: *map}", "{Type:  const void ,Var: *key}", "{Type:  const void ,Var: *value}", "{Type:  u64 ,Var: flags}"], "compatible_hookpoints": ["socket_filter", "kprobe", "sched_cls", "sched_act", "tracepoint", "xdp", "perf_event", "cgroup_skb", "cgroup_sock", "lwt_in", "lwt_out", "lwt_xmit", "sock_ops", "sk_skb", "cgroup_device", "sk_msg", "raw_tracepoint", "cgroup_sock_addr", "lwt_seg6local", "sk_reuseport", "flow_dissector", "cgroup_sysctl", "raw_tracepoint_writable"], "capabilities": ["map_update"]}]}, {"capability": "pkt_go_to_next_module", "pkt_go_to_next_module": [{"Project": "libbpf", "Return Type": "int", "Input Params": [], "Function Name": "XDP_PASS", "Return": 2, "Description": "The XDP_PASS return code means that the packet is allowed to be passed up to the kernel\u2019s networking stack. Meaning, the current CPU that was processing this packet now allocates a skb, populates it, and passes it onwards into the GRO engine. This would be equivalent to the default packet handling behavior without XDP.", "compatible_hookpoints": ["xdp"], "capabilities": ["pkt_go_to_next_module"]}]}, {"capability": "map_read", "map_read": [{"Project": "libbpf", "Return Type": "void*", "Description": "Perform a lookup in <[ map ]>(IP: 0) for an entry associated to key. ", "Return": " Map value associated to key, or NULL if no entry was found.", "Function Name": "bpf_map_lookup_elem", "Input Params": ["{Type: struct bpf_map ,Var: *map}", "{Type:  const void ,Var: *key}"], "compatible_hookpoints": ["socket_filter", "kprobe", "sched_cls", "sched_act", "tracepoint", "xdp", "perf_event", "cgroup_skb", "cgroup_sock", "lwt_in", "lwt_out", "lwt_xmit", "sock_ops", "sk_skb", "cgroup_device", "sk_msg", "raw_tracepoint", "cgroup_sock_addr", "lwt_seg6local", "sk_reuseport", "flow_dissector", "cgroup_sysctl", "raw_tracepoint_writable"], "capabilities": ["map_read"]}]}, {"capability": "pkt_stop_processing_drop_packet", "pkt_stop_processing_drop_packet": [{"Project": "libbpf", "Return Type": "int", "Input Params": [], "Function Name": "XDP_DROP", "Return": 1, "Description": "will drop the packet right at the driver level without wasting any further resources. This is in particular useful for BPF programs implementing DDoS mitigation mechanisms or firewalling in general.", "compatible_hookpoints": ["xdp"], "capabilities": ["pkt_stop_processing_drop_packet"]}]}], "helperCallParams": {}, "startLine": 100, "endLine": 276, "File": "/home/sayandes/opened_extraction/examples/ebpf-ratelimiter-main/ratelimiting_kern.c", "funcName": "_xdp_ratelimit", "updateMaps": [" rl_window_map"], "readMaps": [" rl_window_map", "  rl_window_map", " rl_config_map", " rl_recv_count_map", " rl_drop_count_map"], "input": ["struct xdp_md *ctx"], "output": "static__always_inlineint", "helper": ["bpf_ktime_get_ns", "bpf_map_update_elem", "XDP_PASS", "bpf_map_lookup_elem", "XDP_DROP"], "compatibleHookpoints": ["xdp"], "source": ["static __always_inline int _xdp_ratelimit (struct xdp_md *ctx)\n", "{\n", "    void *data_end = (void *) (long) ctx->data_end;\n", "    void *data = (void *) (long) ctx->data;\n", "    struct ethhdr *eth = data;\n", "    if (data + sizeof (*eth) > data_end)\n", "        return XDP_DROP;\n", "    uint16_t eth_type = eth->h_proto;\n", "    if (ntohs (eth_type) != ETH_P_IP) {\n", "        return XDP_PASS;\n", "    }\n", "    struct iphdr *iph = data + sizeof (struct ethhdr);\n", "    if (iph + 1 > data_end)\n", "        return XDP_PASS;\n", "    if (iph->protocol != IPPROTO_TCP)\n", "        return XDP_PASS;\n", "    struct tcphdr *tcph = (struct tcphdr *) (iph + 1);\n", "    if (tcph + 1 > data_end)\n", "        return XDP_PASS;\n", "    bpf_printk (\"NEW: TCP Syn : %d\\n\", tcph->syn & TCP_FLAGS);\n", "    if (!(tcph->syn & TCP_FLAGS)) {\n", "        return XDP_PASS;\n", "    }\n", "    if (tcph->ack & TCP_FLAGS)\n", "        return XDP_PASS;\n", "    uint16_t dstport = bpf_ntohs (tcph -> dest);\n", "    uint64_t rkey = 0;\n", "    uint64_t *rate = bpf_map_lookup_elem (&rl_config_map, &rkey);\n", "    if (!rate) {\n", "        bpf_printk (\"Return: rate %d\\n\", rkey);\n", "        return XDP_PASS;\n", "    }\n", "    else {\n", "    }\n", "    bpf_printk (\"Allowed connections rate: %d\\n\", *rate);\n", "    uint64_t tnow = bpf_ktime_get_ns ();\n", "    uint64_t NANO = 1000000000;\n", "    uint64_t MULTIPLIER = 100;\n", "    uint64_t cw_key = (tnow / NANO) * NANO;\n", "    uint64_t pw_key = cw_key - NANO;\n", "    uint64_t *pw_count = bpf_map_lookup_elem (&rl_window_map, &pw_key);\n", "    uint32_t *cw_count = bpf_map_lookup_elem (&rl_window_map, &cw_key);\n", "    uint64_t *in_count = bpf_map_lookup_elem (&rl_recv_count_map, &rkey);\n", "    uint64_t *drop_count = bpf_map_lookup_elem (&rl_drop_count_map, &rkey);\n", "    if (!in_count || !drop_count) {\n", "        bpf_printk (\"count null %d\\n\", rate);\n", "        return XDP_PASS;\n", "    }\n", "    (*in_count)++;\n", "    if (!cw_count) {\n", "        uint64_t init_count = 0;\n", "        bpf_map_update_elem (&rl_window_map, &cw_key, &init_count, BPF_NOEXIST);\n", "        cw_count = bpf_map_lookup_elem (& rl_window_map, & cw_key);\n", "        if (!cw_count)\n", "            return XDP_PASS;\n", "    }\n", "    if (!pw_count) {\n", "        if (*cw_count >= *rate) {\n", "            (*drop_count)++;\n", "            bpf_printk (\"DROPPING CONNECTION: CT  %d\\n\", *cw_count);\n", "            return XDP_DROP;\n", "        }\n", "        (*cw_count)++;\n", "        bpf_printk (\"ALLOWING CONNECTION: CT %d\\n\", *cw_count);\n", "        return XDP_PASS;\n", "    }\n", "    uint64_t pw_weight = MULTIPLIER - (uint64_t) (((tnow - cw_key) * MULTIPLIER) / NANO);\n", "    uint64_t total_count = (uint64_t) ((pw_weight *(* pw_count)) +(*cw_count) * MULTIPLIER);\n", "    bpf_printk (\"tot_ct : %d\\n\", total_count);\n", "    bpf_printk (\"cw1_ct : %d\\n\", *cw_count);\n", "    if (total_count > (*rate)) {\n", "        (*drop_count)++;\n", "        bpf_printk (\"DROPPING CONNECTION: CT  %d\\n\", *cw_count);\n", "        return XDP_DROP;\n", "    }\n", "    (*cw_count)++;\n", "    bpf_printk (\"ALLOWING CONNECTION: CT  %d\\n\", *cw_count);\n", "    return XDP_PASS;\n", "}\n"], "called_function_list": [], "call_depth": 0, "humanFuncDescription": [{}], "AI_func_description": [{"description": "", "author": "", "authorEmail": "", "date": "", "invocationParameters": ""}]}, {"capabilities": [{"capability": "read_sys_info", "read_sys_info": [{"Project": "bcc", "FunctionName": "bpf_ktime_get_ns", "Return Type": "u64", "Description": "u64 bpf_ktime_get_ns(void) Return: u64 number of nanoseconds. Starts at system boot time but stops during suspend. Examples in situ: \"https://github.com/iovisor/bcc/search?q=bpf_ktime_get_ns+path%3Aexamples&type=Code search /examples , \"https://github.com/iovisor/bcc/search?q=bpf_ktime_get_ns+path%3Atools&type=Code search /tools ", "Return": "u64 number of nanoseconds", "Input Prameters": [], "compatible_hookpoints": ["socket_filter", "kprobe", "sched_cls", "sched_act", "tracepoint", "xdp", "perf_event", "cgroup_skb", "cgroup_sock", "lwt_in", "lwt_out", "lwt_xmit", "sock_ops", "sk_skb", "sk_msg", "raw_tracepoint", "cgroup_sock_addr", "lwt_seg6local", "sk_reuseport", "flow_dissector", "raw_tracepoint_writable"], "capabilities": ["read_sys_info"]}]}, {"capability": "pkt_stop_processing_drop_packet", "pkt_stop_processing_drop_packet": [{"Project": "libbpf", "Return Type": "int", "Input Params": [], "Function Name": "TC_ACT_SHOT", "Return": 2, "Description": "instructs the kernel to drop the packet, meaning, upper layers of the networking stack will never see the skb on ingress and similarly the packet will never be submitted for transmission on egress. TC_ACT_SHOT and TC_ACT_STOLEN are both similar in nature with few differences: TC_ACT_SHOT will indicate to the kernel that the skb was released through kfree_skb() and return NET_XMIT_DROP to the callers for immediate feedback, whereas TC_ACT_STOLEN will release the skb through consume_skb() and pretend to upper layers that the transmission was successful through NET_XMIT_SUCCESS. The perf\u2019s drop monitor which records traces of kfree_skb() will therefore also not see any drop indications from TC_ACT_STOLEN since its semantics are such that the skb has been \u201cconsumed\u201d or queued but certainly not \"dropped\".", "compatible_hookpoints": ["sched_cls", "sched_act"], "capabilities": ["pkt_stop_processing_drop_packet"]}]}, {"capability": "map_update", "map_update": [{"Project": "libbpf", "Return Type": "int", "Description": "Add or update the <[ value ]>(IP: 2) of the entry associated to <[ key ]>(IP: 1) in <[ map ]>(IP: 0) with value. <[ flags ]>(IP: 3) is one of: BPF_NOEXIST The entry for <[ key ]>(IP: 1) must not exist in the map. BPF_EXIST The entry for <[ key ]>(IP: 1) must already exist in the map. BPF_ANY No condition on the existence of the entry for key. Flag <[ value ]>(IP: 2) BPF_NOEXIST cannot be used for maps of types BPF_MAP_TYPE_ARRAY or BPF_MAP_TYPE_PERCPU_ARRAY (all elements always exist) , the helper would return an error. ", "Return": " 0 on success, or a negative error in case of failure.", "Function Name": "bpf_map_update_elem", "Input Params": ["{Type: struct bpf_map ,Var: *map}", "{Type:  const void ,Var: *key}", "{Type:  const void ,Var: *value}", "{Type:  u64 ,Var: flags}"], "compatible_hookpoints": ["socket_filter", "kprobe", "sched_cls", "sched_act", "tracepoint", "xdp", "perf_event", "cgroup_skb", "cgroup_sock", "lwt_in", "lwt_out", "lwt_xmit", "sock_ops", "sk_skb", "cgroup_device", "sk_msg", "raw_tracepoint", "cgroup_sock_addr", "lwt_seg6local", "sk_reuseport", "flow_dissector", "cgroup_sysctl", "raw_tracepoint_writable"], "capabilities": ["map_update"]}]}, {"capability": "map_read", "map_read": [{"Project": "libbpf", "Return Type": "void*", "Description": "Perform a lookup in <[ map ]>(IP: 0) for an entry associated to key. ", "Return": " Map value associated to key, or NULL if no entry was found.", "Function Name": "bpf_map_lookup_elem", "Input Params": ["{Type: struct bpf_map ,Var: *map}", "{Type:  const void ,Var: *key}"], "compatible_hookpoints": ["socket_filter", "kprobe", "sched_cls", "sched_act", "tracepoint", "xdp", "perf_event", "cgroup_skb", "cgroup_sock", "lwt_in", "lwt_out", "lwt_xmit", "sock_ops", "sk_skb", "cgroup_device", "sk_msg", "raw_tracepoint", "cgroup_sock_addr", "lwt_seg6local", "sk_reuseport", "flow_dissector", "cgroup_sysctl", "raw_tracepoint_writable"], "capabilities": ["map_read"]}]}, {"capability": "pkt_go_to_next_module", "pkt_go_to_next_module": [{"Project": "libbpf", "Return Type": "int", "Input Params": [], "Function Name": "TC_ACT_OK", "Return": 0, "Description": "will terminate the packet processing pipeline and allows the packet to proceed. Pass the skb onwards either to upper layers of the stack on ingress or down to the networking device driver for transmission on egress, respectively. TC_ACT_OK sets skb->tc_index based on the classid the tc BPF program set. The latter is set out of the tc BPF program itself through skb->tc_classid from the BPF context.", "compatible_hookpoints": ["sched_cls", "sched_act"], "capabilities": ["pkt_go_to_next_module"]}]}], "helperCallParams": {}, "startLine": 64, "endLine": 128, "File": "/home/sayandes/opened_extraction/examples/ebpf-ratelimiter-main/transformed/ratelimiting_kern-TC.c", "funcName": "_xdp_ratelimit", "updateMaps": [" rl_window_map"], "readMaps": [" rl_window_map", " rl_ports_map", "  rl_window_map", " rl_config_map", " rl_recv_count_map", " rl_drop_count_map"], "input": ["struct  __sk_buff *ctx"], "output": "static__always_inlineint", "helper": ["bpf_ktime_get_ns", "TC_ACT_SHOT", "bpf_map_update_elem", "bpf_map_lookup_elem", "TC_ACT_OK"], "compatibleHookpoints": ["sched_act", "sched_cls"], "source": ["static __always_inline int _xdp_ratelimit (struct  __sk_buff *ctx)\n", "{\n", "    void *data_end = (void *) (long) ctx->data_end;\n", "    void *data = (void *) (long) ctx->data;\n", "    struct ethhdr *eth = data;\n", "    if (data + sizeof (*eth) > data_end)\n", "        return TC_ACT_SHOT;\n", "    uint16_t eth_type = ctx->protocol;\n", "    if (ntohs (eth_type) != ETH_P_IP) {\n", "        return TC_ACT_OK;\n", "    }\n", "    struct iphdr *iph = data + sizeof (struct ethhdr);\n", "    if (iph + 1 > data_end)\n", "        return TC_ACT_OK;\n", "    if (iph->protocol != IPPROTO_TCP)\n", "        return TC_ACT_OK;\n", "    struct tcphdr *tcph = (struct tcphdr *) (iph + 1);\n", "    if (tcph + 1 > data_end)\n", "        return TC_ACT_OK;\n", "    if (!(tcph->syn & TCP_FLAGS))\n", "        return TC_ACT_OK;\n", "    if (tcph->ack & TCP_FLAGS)\n", "        return TC_ACT_OK;\n", "    uint16_t dstport = bpf_ntohs (tcph -> dest);\n", "    if (!bpf_map_lookup_elem (&rl_ports_map, &dstport))\n", "        return TC_ACT_OK;\n", "    uint64_t rkey = 0;\n", "    uint64_t *rate = bpf_map_lookup_elem (&rl_config_map, &rkey);\n", "    if (!rate)\n", "        return TC_ACT_OK;\n", "    uint64_t tnow = bpf_ktime_get_ns ();\n", "    uint64_t NANO = 1000000000;\n", "    uint64_t MULTIPLIER = 100;\n", "    uint64_t cw_key = tnow / NANO * NANO;\n", "    uint64_t pw_key = cw_key - NANO;\n", "    uint64_t *pw_count = bpf_map_lookup_elem (&rl_window_map, &pw_key);\n", "    uint32_t *cw_count = bpf_map_lookup_elem (&rl_window_map, &cw_key);\n", "    uint64_t *in_count = bpf_map_lookup_elem (&rl_recv_count_map, &rkey);\n", "    uint64_t *drop_count = bpf_map_lookup_elem (&rl_drop_count_map, &rkey);\n", "    if (!in_count || !drop_count)\n", "        return TC_ACT_OK;\n", "    (*in_count)++;\n", "    if (!cw_count) {\n", "        uint64_t init_count = 0;\n", "        bpf_map_update_elem (&rl_window_map, &cw_key, &init_count, BPF_NOEXIST);\n", "        cw_count = bpf_map_lookup_elem (& rl_window_map, & cw_key);\n", "        if (!cw_count)\n", "            return TC_ACT_OK;\n", "    }\n", "    if (!pw_count) {\n", "        if (*cw_count >= *rate) {\n", "            (*drop_count)++;\n", "            return TC_ACT_SHOT;\n", "        }\n", "        (*cw_count)++;\n", "        return TC_ACT_OK;\n", "    }\n", "    uint64_t pw_weight = MULTIPLIER - (uint64_t) (((tnow - cw_key) * MULTIPLIER) / NANO);\n", "    uint64_t total_count = (uint64_t) ((pw_weight *(* pw_count)) +(*cw_count) * MULTIPLIER);\n", "    if (total_count > ((*rate) * MULTIPLIER)) {\n", "        (*drop_count)++;\n", "        return TC_ACT_SHOT;\n", "    }\n", "    (*cw_count)++;\n", "    return TC_ACT_OK;\n", "}\n"], "called_function_list": [], "call_depth": 0, "humanFuncDescription": [{}], "AI_func_description": [{"description": "", "author": "", "authorEmail": "", "date": "", "invocationParameters": ""}]}], "_xdp_ratelimiting": [{"capabilities": [{"capability": "pkt_go_to_next_module", "pkt_go_to_next_module": [{"Project": "libbpf", "Return Type": "int", "Input Params": [], "Function Name": "XDP_PASS", "Return": 2, "Description": "The XDP_PASS return code means that the packet is allowed to be passed up to the kernel\u2019s networking stack. Meaning, the current CPU that was processing this packet now allocates a skb, populates it, and passes it onwards into the GRO engine. This would be equivalent to the default packet handling behavior without XDP.", "compatible_hookpoints": ["xdp"], "capabilities": ["pkt_go_to_next_module"]}]}, {"capability": "pkt_stop_processing_drop_packet", "pkt_stop_processing_drop_packet": [{"Project": "libbpf", "Return Type": "int", "Input Params": [], "Function Name": "XDP_DROP", "Return": 1, "Description": "will drop the packet right at the driver level without wasting any further resources. This is in particular useful for BPF programs implementing DDoS mitigation mechanisms or firewalling in general.", "compatible_hookpoints": ["xdp"], "capabilities": ["pkt_stop_processing_drop_packet"]}]}], "helperCallParams": {}, "startLine": 279, "endLine": 289, "File": "/home/sayandes/opened_extraction/examples/ebpf-ratelimiter-main/ratelimiting_kern.c", "funcName": "_xdp_ratelimiting", "updateMaps": [], "readMaps": [], "input": ["struct xdp_md *ctx"], "output": "int", "helper": ["XDP_PASS", "XDP_DROP"], "compatibleHookpoints": ["xdp"], "source": ["int _xdp_ratelimiting (struct xdp_md *ctx)\n", "{\n", "    bpf_printk (\"entered xdp_rate_limiter\\n\");\n", "    int rc = _xdp_ratelimit (ctx);\n", "    if (rc == XDP_DROP) {\n", "        return XDP_DROP;\n", "    }\n", "    return XDP_PASS;\n", "}\n"], "called_function_list": ["_xdp_ratelimit"], "call_depth": 1, "humanFuncDescription": [{}], "AI_func_description": [{"description": "", "author": "", "authorEmail": "", "date": "", "invocationParameters": ""}]}, {"capabilities": [{"capability": "pkt_go_to_next_module", "pkt_go_to_next_module": [{"Project": "libbpf", "Return Type": "int", "Input Params": [], "Function Name": "TC_ACT_OK", "Return": 0, "Description": "will terminate the packet processing pipeline and allows the packet to proceed. Pass the skb onwards either to upper layers of the stack on ingress or down to the networking device driver for transmission on egress, respectively. TC_ACT_OK sets skb->tc_index based on the classid the tc BPF program set. The latter is set out of the tc BPF program itself through skb->tc_classid from the BPF context.", "compatible_hookpoints": ["sched_cls", "sched_act"], "capabilities": ["pkt_go_to_next_module"]}]}, {"capability": "pkt_stop_processing_drop_packet", "pkt_stop_processing_drop_packet": [{"Project": "libbpf", "Return Type": "int", "Input Params": [], "Function Name": "TC_ACT_SHOT", "Return": 2, "Description": "instructs the kernel to drop the packet, meaning, upper layers of the networking stack will never see the skb on ingress and similarly the packet will never be submitted for transmission on egress. TC_ACT_SHOT and TC_ACT_STOLEN are both similar in nature with few differences: TC_ACT_SHOT will indicate to the kernel that the skb was released through kfree_skb() and return NET_XMIT_DROP to the callers for immediate feedback, whereas TC_ACT_STOLEN will release the skb through consume_skb() and pretend to upper layers that the transmission was successful through NET_XMIT_SUCCESS. The perf\u2019s drop monitor which records traces of kfree_skb() will therefore also not see any drop indications from TC_ACT_STOLEN since its semantics are such that the skb has been \u201cconsumed\u201d or queued but certainly not \"dropped\".", "compatible_hookpoints": ["sched_cls", "sched_act"], "capabilities": ["pkt_stop_processing_drop_packet"]}]}], "helperCallParams": {}, "startLine": 131, "endLine": 138, "File": "/home/sayandes/opened_extraction/examples/ebpf-ratelimiter-main/transformed/ratelimiting_kern-TC.c", "funcName": "_xdp_ratelimiting", "updateMaps": [], "readMaps": [], "input": ["struct  __sk_buff *ctx"], "output": "int", "helper": ["TC_ACT_OK", "TC_ACT_SHOT", "bpf_tail_call"], "compatibleHookpoints": ["sched_act", "sched_cls"], "source": ["int _xdp_ratelimiting (struct  __sk_buff *ctx)\n", "{\n", "    int rc = _xdp_ratelimit (ctx);\n", "    if (rc == TC_ACT_SHOT) {\n", "        return TC_ACT_SHOT;\n", "    }\n", "    bpf_tail_call (ctx, &xdp_rl_ingress_next_prog, 0);\n", "    return TC_ACT_OK;\n", "}\n"], "called_function_list": ["_xdp_ratelimit"], "call_depth": 1, "humanFuncDescription": [{}], "AI_func_description": [{"description": "", "author": "", "authorEmail": "", "date": "", "invocationParameters": ""}]}], "strsep": [{"capabilities": [], "helperCallParams": {}, "startLine": 38, "endLine": 44, "File": "/home/sayandes/opened_extraction/examples/ebpf-ratelimiter-main/ratelimiting_user.c", "funcName": "strsep", "updateMaps": [], "readMaps": [], "input": ["char **stringp", " const char *delim"], "output": "char", "helper": [], "compatibleHookpoints": ["sched_act", "cgroup_sock_addr", "sk_skb", "sched_cls", "lwt_in", "perf_event", "cgroup_sysctl", "sk_reuseport", "kprobe", "cgroup_sock", "sk_msg", "raw_tracepoint_writable", "lwt_xmit", "cgroup_skb", "sock_ops", "lwt_seg6local", "xdp", "cgroup_device", "tracepoint", "socket_filter", "lwt_out", "raw_tracepoint", "flow_dissector"], "source": ["char *strsep (char **stringp, const char *delim)\n", "{\n", "    static char *next_token = NULL;\n", "    char *input = *stringp;\n", "    *stringp = strtok_s (input, delim, &next_token);\n", "    return input;\n", "}\n"], "called_function_list": [], "call_depth": 0, "humanFuncDescription": [{}], "AI_func_description": [{"description": "", "author": "", "authorEmail": "", "date": "", "invocationParameters": ""}]}], "gettimeofday": [{"capabilities": [], "helperCallParams": {}, "startLine": 47, "endLine": 58, "File": "/home/sayandes/opened_extraction/examples/ebpf-ratelimiter-main/ratelimiting_user.c", "funcName": "gettimeofday", "updateMaps": [], "readMaps": [], "input": ["struct timeval *tv", " struct timezone *tz"], "output": "int", "helper": [], "compatibleHookpoints": ["sched_act", "cgroup_sock_addr", "sk_skb", "sched_cls", "lwt_in", "perf_event", "cgroup_sysctl", "sk_reuseport", "kprobe", "cgroup_sock", "sk_msg", "raw_tracepoint_writable", "lwt_xmit", "cgroup_skb", "sock_ops", "lwt_seg6local", "xdp", "cgroup_device", "tracepoint", "socket_filter", "lwt_out", "raw_tracepoint", "flow_dissector"], "source": ["int gettimeofday (struct timeval *tv, struct timezone *tz)\n", "{\n", "    FILETIME ft;\n", "    ULARGE_INTEGER ui;\n", "    GetSystemTimeAsFileTime (&ft);\n", "    ui.LowPart = ft.dwLowDateTime;\n", "    ui.HighPart = ft.dwHighDateTime;\n", "    ui.QuadPart /= 10;\n", "    tv->tv_sec = (long) (ui.QuadPart / 1000000);\n", "    tv->tv_usec = ui.QuadPart % 1000000;\n", "    return 0;\n", "}\n"], "called_function_list": [], "call_depth": 0, "humanFuncDescription": [{}], "AI_func_description": [{"description": "", "author": "", "authorEmail": "", "date": "", "invocationParameters": ""}]}], "usage": [{"capabilities": [], "helperCallParams": {}, "startLine": 85, "endLine": 104, "File": "/home/sayandes/opened_extraction/examples/ebpf-ratelimiter-main/ratelimiting_user.c", "funcName": "usage", "updateMaps": [], "readMaps": [], "input": ["char *argv []"], "output": "staticvoid", "helper": [], "compatibleHookpoints": ["sched_act", "cgroup_sock_addr", "sk_skb", "sched_cls", "lwt_in", "perf_event", "cgroup_sysctl", "sk_reuseport", "kprobe", "cgroup_sock", "sk_msg", "raw_tracepoint_writable", "lwt_xmit", "cgroup_skb", "sock_ops", "lwt_seg6local", "xdp", "cgroup_device", "tracepoint", "socket_filter", "lwt_out", "raw_tracepoint", "flow_dissector"], "source": ["static void usage (char *argv [])\n", "{\n", "    int i;\n", "    printf (\"\\nDOCUMENTATION:\\n%s\\n\", __doc__);\n", "    printf (\"\\n\");\n", "    printf (\" Usage: %s (options-see-below)\\n\", argv[0]);\n", "    printf (\" Listing options:\\n\");\n", "    for (i = 0; long_options[i].name != 0; i++) {\n", "        printf (\" --%-12s\", long_options[i].name);\n", "        if (long_options[i].flag != NULL)\n", "            printf (\" flag (internal value:%d)\", *long_options[i].flag);\n", "        else\n", "            printf (\" short-option: -%c\", long_options[i].val);\n", "        printf (\"\\n\");\n", "    }\n", "    printf (\"\\n\");\n", "}\n"], "called_function_list": [], "call_depth": 0, "humanFuncDescription": [{}], "AI_func_description": [{"description": "", "author": "", "authorEmail": "", "date": "", "invocationParameters": ""}]}], "log_timestamp": [{"capabilities": [], "helperCallParams": {}, "startLine": 107, "endLine": 118, "File": "/home/sayandes/opened_extraction/examples/ebpf-ratelimiter-main/ratelimiting_user.c", "funcName": "log_timestamp", "updateMaps": [], "readMaps": [], "input": ["char *log_ts"], "output": "void", "helper": [], "compatibleHookpoints": ["sched_act", "cgroup_sock_addr", "sk_skb", "sched_cls", "lwt_in", "perf_event", "cgroup_sysctl", "sk_reuseport", "kprobe", "cgroup_sock", "sk_msg", "raw_tracepoint_writable", "lwt_xmit", "cgroup_skb", "sock_ops", "lwt_seg6local", "xdp", "cgroup_device", "tracepoint", "socket_filter", "lwt_out", "raw_tracepoint", "flow_dissector"], "source": ["void log_timestamp (char *log_ts)\n", "{\n", "    struct timeval tv;\n", "    time_t nowtime;\n", "    struct tm *nowtm;\n", "    char tmbuf [TIMESTAMP_LEN];\n", "    gettimeofday (&tv, NULL);\n", "    nowtime = tv.tv_sec;\n", "    nowtm = localtime (& nowtime);\n", "    strftime (tmbuf, DATE_LEN, \"%Y-%m-%d %H:%M:%S\", nowtm);\n", "    snprintf (log_ts, DATE_LEN + TIMESTAMP_LEN, \"%s.%06ld\", tmbuf, tv.tv_usec);\n", "}\n"], "called_function_list": ["gettimeofday"], "call_depth": 1, "humanFuncDescription": [{}], "AI_func_description": [{"description": "", "author": "", "authorEmail": "", "date": "", "invocationParameters": ""}]}], "get_length": [{"capabilities": [], "helperCallParams": {}, "startLine": 120, "endLine": 129, "File": "/home/sayandes/opened_extraction/examples/ebpf-ratelimiter-main/ratelimiting_user.c", "funcName": "get_length", "updateMaps": [], "readMaps": [], "input": ["const char *str"], "output": "staticint", "helper": [], "compatibleHookpoints": ["sched_act", "cgroup_sock_addr", "sk_skb", "sched_cls", "lwt_in", "perf_event", "cgroup_sysctl", "sk_reuseport", "kprobe", "cgroup_sock", "sk_msg", "raw_tracepoint_writable", "lwt_xmit", "cgroup_skb", "sock_ops", "lwt_seg6local", "xdp", "cgroup_device", "tracepoint", "socket_filter", "lwt_out", "raw_tracepoint", "flow_dissector"], "source": ["static int get_length (const char *str)\n", "{\n", "    int len = 0;\n", "    if (*str == '\\0')\n", "        return 0;\n", "    while (str[len] != '\\0')\n", "        len++;\n", "    return len;\n", "}\n"], "called_function_list": [], "call_depth": 0, "humanFuncDescription": [{}], "AI_func_description": [{"description": "", "author": "", "authorEmail": "", "date": "", "invocationParameters": ""}]}], "set_logfile": [{"capabilities": [], "helperCallParams": {}, "startLine": 132, "endLine": 145, "File": "/home/sayandes/opened_extraction/examples/ebpf-ratelimiter-main/ratelimiting_user.c", "funcName": "set_logfile", "updateMaps": [], "readMaps": [], "input": ["void"], "output": "staticFILE", "helper": [], "compatibleHookpoints": ["sched_act", "cgroup_sock_addr", "sk_skb", "sched_cls", "lwt_in", "perf_event", "cgroup_sysctl", "sk_reuseport", "kprobe", "cgroup_sock", "sk_msg", "raw_tracepoint_writable", "lwt_xmit", "cgroup_skb", "sock_ops", "lwt_seg6local", "xdp", "cgroup_device", "tracepoint", "socket_filter", "lwt_out", "raw_tracepoint", "flow_dissector"], "source": ["static FILE *set_logfile (void)\n", "{\n", "    if (info != NULL) {\n", "        return info;\n", "    }\n", "    info = fopen (DEFAULT_LOGFILE, \"a\");\n", "    if (info == NULL) {\n", "        fprintf (stderr, \"could not open log file \");\n", "        return NULL;\n", "    }\n", "    fprintf (stderr, \"writing errors/warnings/info/debug output to %s \\n\", DEFAULT_LOGFILE);\n", "    return info;\n", "}\n"], "called_function_list": [], "call_depth": 0, "humanFuncDescription": [{}], "AI_func_description": [{"description": "", "author": "", "authorEmail": "", "date": "", "invocationParameters": ""}]}], "xdp_unlink_bpf_chain": [{"capabilities": [{"capability": "map_update", "map_update": [{"Project": "libbpf", "Return Type": "int", "Description": "Delete entry with <[ key ]>(IP: 1) from map. ", "Return": " 0 on success, or a negative error in case of failure.", "Function Name": "bpf_map_delete_elem", "Input Params": ["{Type: struct bpf_map ,Var: *map}", "{Type:  const void ,Var: *key}"], "compatible_hookpoints": ["socket_filter", "kprobe", "sched_cls", "sched_act", "tracepoint", "xdp", "perf_event", "cgroup_skb", "cgroup_sock", "lwt_in", "lwt_out", "lwt_xmit", "sock_ops", "sk_skb", "cgroup_device", "sk_msg", "raw_tracepoint", "cgroup_sock_addr", "lwt_seg6local", "sk_reuseport", "flow_dissector", "cgroup_sysctl", "raw_tracepoint_writable"], "capabilities": ["map_update"]}]}], "helperCallParams": {}, "startLine": 148, "endLine": 167, "File": "/home/sayandes/opened_extraction/examples/ebpf-ratelimiter-main/ratelimiting_user.c", "funcName": "xdp_unlink_bpf_chain", "updateMaps": [" map_fd"], "readMaps": [], "input": ["const char *map_filename"], "output": "staticint", "helper": ["bpf_map_delete_elem"], "compatibleHookpoints": ["sched_act", "cgroup_sock_addr", "sk_skb", "sched_cls", "lwt_in", "perf_event", "cgroup_sysctl", "sk_reuseport", "kprobe", "cgroup_sock", "sk_msg", "raw_tracepoint_writable", "lwt_xmit", "cgroup_skb", "sock_ops", "lwt_seg6local", "xdp", "cgroup_device", "tracepoint", "socket_filter", "lwt_out", "raw_tracepoint", "flow_dissector"], "source": ["static int xdp_unlink_bpf_chain (const char *map_filename)\n", "{\n", "    int ret = 0;\n", "    int key = 0;\n", "    int map_fd = bpf_obj_get (map_filename);\n", "    if (map_fd > 0) {\n", "        ret = bpf_map_delete_elem (map_fd, & key);\n", "        if (ret != 0) {\n", "            log_err (\"Failed to remove XDP program from the chain\");\n", "        }\n", "    }\n", "    else {\n", "        log_err (\"Failed to fetch previous XDP program in the chain\");\n", "    }\n", "    if (remove (xdp_rl_ingress_next_prog) < 0) {\n", "        log_warn (\"Failed to remove link to next XDP program in the chain\");\n", "    }\n", "    return ret;\n", "}\n"], "called_function_list": [], "call_depth": 0, "humanFuncDescription": [{}], "AI_func_description": [{"description": "", "author": "", "authorEmail": "", "date": "", "invocationParameters": ""}]}], "signal_handler": [{"capabilities": [], "helperCallParams": {}, "startLine": 171, "endLine": 182, "File": "/home/sayandes/opened_extraction/examples/ebpf-ratelimiter-main/ratelimiting_user.c", "funcName": "signal_handler", "updateMaps": [], "readMaps": [], "input": ["int signal"], "output": "staticvoid", "helper": [], "compatibleHookpoints": ["sched_act", "cgroup_sock_addr", "sk_skb", "sched_cls", "lwt_in", "perf_event", "cgroup_sysctl", "sk_reuseport", "kprobe", "cgroup_sock", "sk_msg", "raw_tracepoint_writable", "lwt_xmit", "cgroup_skb", "sock_ops", "lwt_seg6local", "xdp", "cgroup_device", "tracepoint", "socket_filter", "lwt_out", "raw_tracepoint", "flow_dissector"], "source": ["static void signal_handler (int signal)\n", "{\n", "    log_info (\"Received signal %d\", signal);\n", "    int i = 0;\n", "    xdp_unlink_bpf_chain (prev_prog_map);\n", "    for (i = 0; i < MAP_COUNT; i++) {\n", "        close (map_fd[i]);\n", "    }\n", "    if (info != NULL)\n", "        fclose (info);\n", "    exit (EXIT_SUCCESS);\n", "}\n"], "called_function_list": ["xdp_unlink_bpf_chain"], "call_depth": 1, "humanFuncDescription": [{}], "AI_func_description": [{"description": "", "author": "", "authorEmail": "", "date": "", "invocationParameters": ""}]}], "time_get_ns": [{"capabilities": [], "helperCallParams": {}, "startLine": 185, "endLine": 199, "File": "/home/sayandes/opened_extraction/examples/ebpf-ratelimiter-main/ratelimiting_user.c", "funcName": "time_get_ns", "updateMaps": [], "readMaps": [], "input": ["void"], "output": "static__u64", "helper": [], "compatibleHookpoints": ["sched_act", "cgroup_sock_addr", "sk_skb", "sched_cls", "lwt_in", "perf_event", "cgroup_sysctl", "sk_reuseport", "kprobe", "cgroup_sock", "sk_msg", "raw_tracepoint_writable", "lwt_xmit", "cgroup_skb", "sock_ops", "lwt_seg6local", "xdp", "cgroup_device", "tracepoint", "socket_filter", "lwt_out", "raw_tracepoint", "flow_dissector"], "source": ["static __u64 time_get_ns (void)\n", "{\n", "\n", "#ifdef __linux__\n", "    struct timespec ts;\n", "    clock_gettime (CLOCK_MONOTONIC, &ts);\n", "    return ts.tv_sec * 1000000000ull + ts.tv_nsec;\n", "\n", "#endif\n", "\n", "#ifdef WIN32\n", "    LARGE_INTEGER frequency, counter;\n", "    QueryPerformanceFrequency (&frequency);\n", "    QueryPerformanceCounter (&counter);\n", "    return (1000000000 * counter.QuadPart) / frequency.QuadPart;\n", "\n", "#endif\n", "}\n"], "called_function_list": [], "call_depth": 0, "humanFuncDescription": [{}], "AI_func_description": [{"description": "", "author": "", "authorEmail": "", "date": "", "invocationParameters": ""}]}], "delete_stale_entries": [{"capabilities": [], "helperCallParams": {}, "startLine": 203, "endLine": 226, "File": "/home/sayandes/opened_extraction/examples/ebpf-ratelimiter-main/ratelimiting_user.c", "funcName": "delete_stale_entries", "updateMaps": [" map_fd[1]"], "readMaps": [], "input": ["void"], "output": "staticvoid", "helper": [], "compatibleHookpoints": ["sched_act", "cgroup_sock_addr", "sk_skb", "sched_cls", "lwt_in", "perf_event", "cgroup_sysctl", "sk_reuseport", "kprobe", "cgroup_sock", "sk_msg", "raw_tracepoint_writable", "lwt_xmit", "cgroup_skb", "sock_ops", "lwt_seg6local", "xdp", "cgroup_device", "tracepoint", "socket_filter", "lwt_out", "raw_tracepoint", "flow_dissector"], "source": ["static void delete_stale_entries (void)\n", "{\n", "    log_debug (\"Deleting stale map entries periodically\");\n", "    if (map_fd[1] < 0) {\n", "        log_info (\"Window map fd not found\");\n", "        exit (EXIT_FAILURE);\n", "    }\n", "    __u64 first_key = 0, next_key = 0;\n", "    __u64 curr_time = time_get_ns ();\n", "    log_debug (\"Current time is %llu\", curr_time);\n", "    while (!bpf_map_get_next_key (map_fd[1], &first_key, &next_key)) {\n", "        if (next_key < (curr_time - buffer_time)) {\n", "            log_debug (\"Deleting stale map entry %llu\", next_key);\n", "            if (bpf_map_delete_elem (map_fd[1], &next_key) != 0) {\n", "                log_info (\"Map element not found\");\n", "            }\n", "        }\n", "        first_key = next_key;\n", "    }\n", "}\n"], "called_function_list": ["time_get_ns"], "call_depth": 1, "humanFuncDescription": [{}], "AI_func_description": [{"description": "", "author": "", "authorEmail": "", "date": "", "invocationParameters": ""}]}], "trim_space": [{"capabilities": [], "helperCallParams": {}, "startLine": 228, "endLine": 242, "File": "/home/sayandes/opened_extraction/examples/ebpf-ratelimiter-main/ratelimiting_user.c", "funcName": "trim_space", "updateMaps": [], "readMaps": [], "input": ["char *str"], "output": "staticchar", "helper": [], "compatibleHookpoints": ["sched_act", "cgroup_sock_addr", "sk_skb", "sched_cls", "lwt_in", "perf_event", "cgroup_sysctl", "sk_reuseport", "kprobe", "cgroup_sock", "sk_msg", "raw_tracepoint_writable", "lwt_xmit", "cgroup_skb", "sock_ops", "lwt_seg6local", "xdp", "cgroup_device", "tracepoint", "socket_filter", "lwt_out", "raw_tracepoint", "flow_dissector"], "source": ["static char *trim_space (char *str)\n", "{\n", "    char *end;\n", "    while (isspace (*str)) {\n", "        str = str + 1;\n", "    }\n", "    end = str + get_length (str) - 1;\n", "    while (end > str && isspace (*end)) {\n", "        end = end - 1;\n", "    }\n", "    *(end + 1) = '\\0';\n", "    return str;\n", "}\n"], "called_function_list": ["get_length"], "call_depth": 1, "humanFuncDescription": [{}], "AI_func_description": [{"description": "", "author": "", "authorEmail": "", "date": "", "invocationParameters": ""}]}], "strtoi": [{"capabilities": [], "helperCallParams": {}, "startLine": 244, "endLine": 255, "File": "/home/sayandes/opened_extraction/examples/ebpf-ratelimiter-main/ratelimiting_user.c", "funcName": "strtoi", "updateMaps": [], "readMaps": [], "input": ["const char *str"], "output": "staticint", "helper": ["strtol"], "compatibleHookpoints": ["cgroup_sysctl"], "source": ["static int strtoi (const char *str)\n", "{\n", "    char *endptr;\n", "    errno = 0;\n", "    long long_var = strtol (str, & endptr, 10);\n", "    if (errno == ERANGE || *endptr != '\\0' || str == endptr) {\n", "        fprintf (stderr, \"out of range\");\n", "    }\n", "    return (int) long_var;\n", "}\n"], "called_function_list": [], "call_depth": 0, "humanFuncDescription": [{}], "AI_func_description": [{"description": "", "author": "", "authorEmail": "", "date": "", "invocationParameters": ""}]}], "update_ports": [{"capabilities": [{"capability": "map_update", "map_update": [{"Project": "libbpf", "Return Type": "int", "Description": "Add or update the <[ value ]>(IP: 2) of the entry associated to <[ key ]>(IP: 1) in <[ map ]>(IP: 0) with value. <[ flags ]>(IP: 3) is one of: BPF_NOEXIST The entry for <[ key ]>(IP: 1) must not exist in the map. BPF_EXIST The entry for <[ key ]>(IP: 1) must already exist in the map. BPF_ANY No condition on the existence of the entry for key. Flag <[ value ]>(IP: 2) BPF_NOEXIST cannot be used for maps of types BPF_MAP_TYPE_ARRAY or BPF_MAP_TYPE_PERCPU_ARRAY (all elements always exist) , the helper would return an error. ", "Return": " 0 on success, or a negative error in case of failure.", "Function Name": "bpf_map_update_elem", "Input Params": ["{Type: struct bpf_map ,Var: *map}", "{Type:  const void ,Var: *key}", "{Type:  const void ,Var: *value}", "{Type:  u64 ,Var: flags}"], "compatible_hookpoints": ["socket_filter", "kprobe", "sched_cls", "sched_act", "tracepoint", "xdp", "perf_event", "cgroup_skb", "cgroup_sock", "lwt_in", "lwt_out", "lwt_xmit", "sock_ops", "sk_skb", "cgroup_device", "sk_msg", "raw_tracepoint", "cgroup_sock_addr", "lwt_seg6local", "sk_reuseport", "flow_dissector", "cgroup_sysctl", "raw_tracepoint_writable"], "capabilities": ["map_update"]}]}], "helperCallParams": {}, "startLine": 257, "endLine": 270, "File": "/home/sayandes/opened_extraction/examples/ebpf-ratelimiter-main/ratelimiting_user.c", "funcName": "update_ports", "updateMaps": [" map_fd[4]"], "readMaps": [], "input": ["char *ports"], "output": "staticvoid", "helper": ["bpf_map_update_elem"], "compatibleHookpoints": ["sched_act", "cgroup_sock_addr", "sk_skb", "sched_cls", "lwt_in", "perf_event", "cgroup_sysctl", "sk_reuseport", "kprobe", "cgroup_sock", "sk_msg", "raw_tracepoint_writable", "lwt_xmit", "cgroup_skb", "sock_ops", "lwt_seg6local", "xdp", "cgroup_device", "tracepoint", "socket_filter", "lwt_out", "raw_tracepoint", "flow_dissector"], "source": ["static void update_ports (char *ports)\n", "{\n", "    char *ptr, *tmp;\n", "    uint16_t port = 0;\n", "    uint8_t pval = 1;\n", "    tmp = strdup (ports);\n", "    while ((ptr = strsep (&tmp, delim)) != NULL) {\n", "        ptr = trim_space (ptr);\n", "        port = (uint16_t) (strtoi (ptr));\n", "        bpf_map_update_elem (map_fd[4], &port, &pval, 0);\n", "    }\n", "    free (tmp);\n", "}\n"], "called_function_list": ["trim_space", "strsep", "strtoi"], "call_depth": 2, "humanFuncDescription": [{}], "AI_func_description": [{"description": "", "author": "", "authorEmail": "", "date": "", "invocationParameters": ""}]}], "main": [{"capabilities": [{"capability": "map_update", "map_update": [{"Project": "libbpf", "Return Type": "int", "Description": "Add or update the <[ value ]>(IP: 2) of the entry associated to <[ key ]>(IP: 1) in <[ map ]>(IP: 0) with value. <[ flags ]>(IP: 3) is one of: BPF_NOEXIST The entry for <[ key ]>(IP: 1) must not exist in the map. BPF_EXIST The entry for <[ key ]>(IP: 1) must already exist in the map. BPF_ANY No condition on the existence of the entry for key. Flag <[ value ]>(IP: 2) BPF_NOEXIST cannot be used for maps of types BPF_MAP_TYPE_ARRAY or BPF_MAP_TYPE_PERCPU_ARRAY (all elements always exist) , the helper would return an error. ", "Return": " 0 on success, or a negative error in case of failure.", "Function Name": "bpf_map_update_elem", "Input Params": ["{Type: struct bpf_map ,Var: *map}", "{Type:  const void ,Var: *key}", "{Type:  const void ,Var: *value}", "{Type:  u64 ,Var: flags}"], "compatible_hookpoints": ["socket_filter", "kprobe", "sched_cls", "sched_act", "tracepoint", "xdp", "perf_event", "cgroup_skb", "cgroup_sock", "lwt_in", "lwt_out", "lwt_xmit", "sock_ops", "sk_skb", "cgroup_device", "sk_msg", "raw_tracepoint", "cgroup_sock_addr", "lwt_seg6local", "sk_reuseport", "flow_dissector", "cgroup_sysctl", "raw_tracepoint_writable"], "capabilities": ["map_update"]}]}], "helperCallParams": {}, "startLine": 272, "endLine": 423, "File": "/home/sayandes/opened_extraction/examples/ebpf-ratelimiter-main/ratelimiting_user.c", "funcName": "main", "updateMaps": [" map_fd [2]", " map_fd [3]", " map_fd [0]", " prev_prog_map_fd"], "readMaps": [], "input": ["int argc", " char **argv"], "output": "int", "helper": ["bpf_map_update_elem"], "compatibleHookpoints": ["sched_act", "cgroup_sock_addr", "sk_skb", "sched_cls", "lwt_in", "perf_event", "cgroup_sysctl", "sk_reuseport", "kprobe", "cgroup_sock", "sk_msg", "raw_tracepoint_writable", "lwt_xmit", "cgroup_skb", "sock_ops", "lwt_seg6local", "xdp", "cgroup_device", "tracepoint", "socket_filter", "lwt_out", "raw_tracepoint", "flow_dissector"], "source": ["int main (int argc, char **argv)\n", "{\n", "    int longindex = 0, rate = 0, opt;\n", "    int ret = EXIT_SUCCESS;\n", "    char bpf_obj_file [256];\n", "    char ports [2048];\n", "    verbosity = LOG_INFO;\n", "\n", "#ifdef __linux__\n", "    struct rlimit r = {RLIM_INFINITY, RLIM_INFINITY}\n", "    ;\n", "\n", "#endif\n", "    int len = 0;\n", "    snprintf (bpf_obj_file, sizeof (bpf_obj_file), \"%s_kern.o\", argv[0]);\n", "    memset (&ports, 0, 2048);\n", "    while ((opt = getopt_long (argc, argv, \"h\", long_options, &longindex)) != -1) {\n", "        switch (opt) {\n", "        case 'r' :\n", "            rate = strtoi (optarg);\n", "            break;\n", "        case 'i' :\n", "            ifindex = if_nametoindex (optarg);\n", "            break;\n", "        case 'v' :\n", "            if (optarg) {\n", "                verbosity = strtoi (optarg);\n", "            }\n", "            break;\n", "        case 'm' :\n", "            if (optarg) {\n", "                len = get_length (optarg);\n", "                strncpy (prev_prog_map, optarg, len);\n", "                prev_prog_map[len] = '\\0';\n", "            }\n", "            break;\n", "        case 'p' :\n", "            if (optarg) {\n", "                len = get_length (optarg);\n", "                strncpy (ports, optarg, len);\n", "                ports[len] = '\\0';\n", "            }\n", "            break;\n", "        case 'd' :\n", "            break;\n", "        case 'h' :\n", "        default :\n", "            usage (argv);\n", "            return EXIT_FAILURE;\n", "        }\n", "    }\n", "\n", "#ifdef __linux__\n", "    if (setrlimit (RLIMIT_MEMLOCK, &r)) {\n", "        perror (\"setrlimit(RLIMIT_MEMLOCK)\");\n", "        exit (EXIT_FAILURE);\n", "    }\n", "\n", "#endif\n", "    set_logfile ();\n", "    __u64 ckey = 0, rkey = 0, dkey = 0, pkey = 0;\n", "    __u64 recv_count = 0, drop_count = 0;\n", "    if (load_bpf_file (bpf_obj_file)) {\n", "        log_err (\"Failed to load bpf program\");\n", "        return 1;\n", "    }\n", "    if (!prog_fd[0]) {\n", "        log_err (\"Failed to get bpf program fd\")\n", "        return 1;\n", "    }\n", "    int prev_prog_map_fd = bpf_obj_get (prev_prog_map);\n", "    if (prev_prog_map_fd < 0) {\n", "        log_err (\"Failed to fetch previous xdp function in the chain\");\n", "        exit (EXIT_FAILURE);\n", "    }\n", "    if (bpf_map_update_elem (prev_prog_map_fd, &pkey, &(prog_fd[0]), 0)) {\n", "        log_err (\"Failed to update prog fd in the chain\");\n", "        exit (EXIT_FAILURE);\n", "    }\n", "    close (prev_prog_map_fd);\n", "    int next_prog_map_fd = bpf_obj_get (xdp_rl_ingress_next_prog);\n", "    if (next_prog_map_fd < 0) {\n", "        log_info (\"Failed to fetch next prog map fd, creating one\");\n", "        if (bpf_obj_pin (map_fd[5], xdp_rl_ingress_next_prog)) {\n", "            log_info (\"Failed to pin next prog fd map\");\n", "            exit (EXIT_FAILURE);\n", "        }\n", "    }\n", "    if (!map_fd[0]) {\n", "        log_err (\"Failed to fetch config map\");\n", "        return -1;\n", "    }\n", "    ret = bpf_map_update_elem (map_fd [0], & ckey, & rate, 0);\n", "    if (ret) {\n", "        perror (\"Failed to update config map\");\n", "        return 1;\n", "    }\n", "    if (!map_fd[2]) {\n", "        log_err (\"Failed to fetch receive count map\");\n", "        return -1;\n", "    }\n", "    ret = bpf_map_update_elem (map_fd [2], & rkey, & recv_count, 0);\n", "    if (ret) {\n", "        perror (\"Failed to update receive count map\");\n", "        return 1;\n", "    }\n", "    if (!map_fd[3]) {\n", "        log_err (\"Failed to fetch drop count map\");\n", "        return -1;\n", "    }\n", "    ret = bpf_map_update_elem (map_fd [3], & dkey, & drop_count, 0);\n", "    if (ret) {\n", "        perror (\"Failed to update drop count map\");\n", "        return 1;\n", "    }\n", "    if (get_length (ports)) {\n", "        log_info (\"Configured port list is %s\\n\", ports);\n", "        update_ports (ports);\n", "    }\n", "    signal (SIGINT, signal_handler);\n", "    signal (SIGTERM, signal_handler);\n", "\n", "#ifdef __linux__\n", "    signal (SIGHUP, signal_handler);\n", "\n", "#endif\n", "    while (1) {\n", "        sleep (60);\n", "        delete_stale_entries ();\n", "        fflush (info);\n", "    }\n", "}\n"], "called_function_list": ["strtoi", "usage", "set_logfile", "get_length", "delete_stale_entries", "update_ports"], "call_depth": 3, "humanFuncDescription": [{}], "AI_func_description": [{"description": "", "author": "", "authorEmail": "", "date": "", "invocationParameters": ""}]}]}