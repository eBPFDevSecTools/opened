{"_default": {"1": {"author": "BU Course Project", "authorEmail": "course@bu.edu", "date": "2023-01-19", " File": " /home/sayandes/codequery/katran/healthchecking_ipip.c", " Startline": " 88", " Endline": " 157", " Funcname": " healthcheck_encap", " Input": " (struct __sk_buff *skb)", " Output": " int", " Helpers": " [bpf_redirect,bpf_skb_set_tunnel_key,bpf_map_lookup_elem,]", " Read_maps": " [ hc_ctrl_map, hc_reals_map, hc_stats_map,]", " Update_maps": " []", " Func Description": " Performs healthcheck for ip-in-ip encapsulated packets."}, "2": {"author": "BU Course Project", "authorEmail": "course@bu.edu", "date": "2023-01-19", " File": " /home/sayandes/codequery/katran/x.c", " Startline": " 8", " Endline": " 13", " Funcname": " xdp_prog_simple", " Input": " (struct xdp_md *ctx)", " Output": " int", " Helpers": " []", " Read_maps": " []", " Update_maps": " []", " Func Description": " Same as decap_kern, it decaps the packet and pass it to the tcp/ip stack."}, "3": {"author": "BU Course Project", "authorEmail": "course@bu.edu", "date": "2023-01-19", " File": " /home/sayandes/codequery/katran/xdp_root.c", " Startline": " 30", " Endline": " 37", " Funcname": " xdp_root", " Input": " (struct xdp_md *ctx)", " Output": " \\xdp\\)", " Helpers": " [bpf_tail_call,]", " Read_maps": " []", " Update_maps": " []", " Func Description": " Input (struct xdp_md* ctx) is user accessible metadata for XDP packet hook"}, "4": {"author": "BU Course Project", "authorEmail": "course@bu.edu", "date": "2023-01-19", " File": " /home/sayandes/codequery/katran/xdp_root.c", " Startline": " 40", " Endline": " 47", " Funcname": " xdp_val", " Input": " (struct xdp_md *ctx)", " Output": " \\xdp\\)", " Helpers": " [bpf_tail_call,]", " Read_maps": " []", " Update_maps": " []", " Func Description": " Input (struct xdp_md* ctx) is user accessible metadata for XDP packet hook"}, "5": {"author": "BU Course Project", "authorEmail": "course@bu.edu", "date": "2023-01-19", " File": " /home/sayandes/codequery/katran/healthchecking_kern.c", " Startline": " 33", " Endline": " 139", " Funcname": " healthcheck_encap", " Input": " (struct __sk_buff *skb)", " Output": " int", " Helpers": " [bpf_map_lookup_elem,bpf_redirect,]", " Read_maps": " [ hc_ctrl_map, per_hckey_stats, hc_reals_map, hc_key_map, hc_stats_map, hc_pckt_macs,]", " Update_maps": " []", " Func Description": " Input is user accessible mirror of in-kernel sk_buff"}, "6": {"author": "BU Course Project", "authorEmail": "course@bu.edu", "date": "2023-01-19", " File": " /home/sayandes/codequery/katran/balancer_kern.c", " Startline": " 24", " Endline": " 50 ", " Funcname": " is_under_flood ", " Input": " (__u64 *cur_time) ", " Output": " bool ", " Helpers": " [bpf_map_lookup_elem,bpf_ktime_get_ns,] ", " Read_maps": " [ stats,] ", " Update_maps": " [] ", " Func Description": " Check how many connection have been made within the last one second(or other"}, "7": {"author": "BU Course Project", "authorEmail": "course@bu.edu", "date": "2023-01-19", " File": " /home/sayandes/codequery/katran/balancer_kern.c", " Startline": " 52", " Endline": " 131 ", " Funcname": " get_packet_dst ", " Input": " (struct real_definition **real, struct packet_description *pckt, struct vip_meta *vip_info, bool is_ipv6, void *lru_map) ", " Output": " bool ", " Helpers": " [bpf_map_update_elem,bpf_map_lookup_elem,] ", " Read_maps": " [ stats, lpm_src_v6, ch_rings, reals, lpm_src_v4,] ", " Update_maps": " [ lru_map,] ", " Func Description": " This function checks the source routing for new connections."}, "8": {"author": "BU Course Project", "authorEmail": "course@bu.edu", "date": "2023-01-19", " File": " /home/sayandes/codequery/katran/balancer_kern.c", " Startline": " 133", " Endline": " 156 ", " Funcname": " connection_table_lookup ", " Input": " (struct real_definition **real, struct packet_description *pckt, void *lru_map, bool isGlobalLru) ", " Output": " void ", " Helpers": " [bpf_map_lookup_elem,bpf_ktime_get_ns,] ", " Read_maps": " [ lru_map, reals,] ", " Update_maps": " [] ", " Func Description": " First check if the packet flow exists in lru_map and whether this connection is legal regarding"}, "9": {"author": "BU Course Project", "authorEmail": "course@bu.edu", "date": "2023-01-19", " File": " /home/sayandes/codequery/katran/balancer_kern.c", " Startline": " 158", " Endline": " 230 ", " Funcname": " process_l3_headers ", " Input": " (struct packet_description *pckt, __u8 *protocol, __u64 off, __u16 *pkt_bytes, void *data, void *data_end, bool is_ipv6) ", " Output": " int ", " Helpers": " [] ", " Read_maps": " [] ", " Update_maps": " [] ", " Func Description": " Function processes the packet based on protocol and stores information in packet_description structure "}, "10": {"author": "BU Course Project", "authorEmail": "course@bu.edu", "date": "2023-01-19", " File": " /home/sayandes/codequery/katran/balancer_kern.c", " Startline": " 233", " Endline": " 255 ", " Funcname": " check_decap_dst ", " Input": " (struct packet_description *pckt, bool is_ipv6, bool *pass) ", " Output": " int ", " Helpers": " [bpf_map_lookup_elem,] ", " Read_maps": " [ stats, decap_dst,] ", " Update_maps": " [] ", " Func Description": " Given input \"pckt\", check if its flow's dst is legal. if it does, increase the coresponding stats's amount"}, "11": {"author": "BU Course Project", "authorEmail": "course@bu.edu", "date": "2023-01-19", " File": " /home/sayandes/codequery/katran/balancer_kern.c", " Startline": " 261", " Endline": " 277 ", " Funcname": " reals_have_same_addr ", " Input": " (struct real_definition *a, struct real_definition *b) ", " Output": " bool ", " Helpers": " [] ", " Read_maps": " [] ", " Update_maps": " [] ", " Func Description": " Function checks the input 2 backend servers have the same dst addresses"}, "12": {"author": "BU Course Project", "authorEmail": "course@bu.edu", "date": "2023-01-19", " File": " /home/sayandes/codequery/katran/balancer_kern.c", " Startline": " 279", " Endline": " 335 ", " Funcname": " perform_global_lru_lookup ", " Input": " (struct real_definition **dst, struct packet_description *pckt, __u32 cpu_num, struct vip_meta *vip_info, bool is_ipv6) ", " Output": " int ", " Helpers": " [bpf_map_lookup_elem,] ", " Read_maps": " [ stats, global_lru_maps,] ", " Update_maps": " [] ", " Func Description": " (can't understand) find the lru_map from global cache based on gicen cpu_num,"}, "13": {"author": "BU Course Project", "authorEmail": "course@bu.edu", "date": "2023-01-19", " File": " /home/sayandes/codequery/katran/balancer_kern.c", " Startline": " 340", " Endline": " 387 ", " Funcname": " process_encaped_ipip_pckt ", " Input": " (void **data, void **data_end, struct xdp_md *xdp, bool *is_ipv6, __u8 *protocol, bool pass) ", " Output": " int ", " Helpers": " [] ", " Read_maps": " [] ", " Update_maps": " [] ", " Func Description": " Used for IPIP packets, Based on the encapsulate packet protocol type, "}, "14": {"author": "BU Course Project", "authorEmail": "course@bu.edu", "date": "2023-01-19", " File": " /home/sayandes/codequery/katran/balancer_kern.c", " Startline": " 391", " Endline": " 441 ", " Funcname": " process_encaped_gue_pckt ", " Input": " (void **data, void **data_end, struct xdp_md *xdp, bool is_ipv6, bool pass) ", " Output": " int ", " Helpers": " [] ", " Read_maps": " [] ", " Update_maps": " [] ", " Func Description": " Used for GUE packets,Based on the encapsulate packet protocol type, "}, "15": {"author": "BU Course Project", "authorEmail": "course@bu.edu", "date": "2023-01-19", " File": " /home/sayandes/codequery/katran/balancer_kern.c", " Startline": " 444", " Endline": " 457 ", " Funcname": " increment_quic_cid_version_stats ", " Input": " (int host_id) ", " Output": " void ", " Helpers": " [bpf_map_lookup_elem,] ", " Read_maps": " [ stats,] ", " Update_maps": " [] ", " Func Description": " Function updates quic protocol stats"}, "16": {"author": "BU Course Project", "authorEmail": "course@bu.edu", "date": "2023-01-19", " File": " /home/sayandes/codequery/katran/balancer_kern.c", " Startline": " 459", " Endline": " 468 ", " Funcname": " increment_quic_cid_drop_no_real ", " Input": " () ", " Output": " void ", " Helpers": " [bpf_map_lookup_elem,] ", " Read_maps": " [ stats,] ", " Update_maps": " [] ", " Func Description": " lookup stats by QUIC_CID_DROP_STATS, increment stats v1 by 1"}, "17": {"author": "BU Course Project", "authorEmail": "course@bu.edu", "date": "2023-01-19", " File": " /home/sayandes/codequery/katran/balancer_kern.c", " Startline": " 470", " Endline": " 478 ", " Funcname": " increment_quic_cid_drop_real_0 ", " Input": " () ", " Output": " void ", " Helpers": " [bpf_map_lookup_elem,] ", " Read_maps": " [ stats,] ", " Update_maps": " [] ", " Func Description": " lookup stats by QUIC_CID_DROP_STATS, update Corresponding stats's v2"}, "18": {"author": "BU Course Project", "authorEmail": "course@bu.edu", "date": "2023-01-19", " File": " /home/sayandes/codequery/katran/balancer_kern.c", " Startline": " 480", " Endline": " 791 ", " Funcname": " process_packet ", " Input": " (struct xdp_md *xdp, __u64 off, bool is_ipv6) ", " Output": " int ", " Helpers": " [bpf_map_lookup_elem,bpf_get_smp_processor_id,] ", " Read_maps": " [ lru_mapping, server_id_map, stats, reals, ctl_array, vip_map, reals_stats,] ", " Update_maps": " [] ", " Func Description": " This function process the packet based on the protocol and updates corresponding stats."}, "19": {"author": "BU Course Project", "authorEmail": "course@bu.edu", "date": "2023-01-19", " File": " /home/sayandes/codequery/katran/balancer_kern.c", " Startline": " 793", " Endline": " 817 ", " Funcname": " balancer_ingress ", " Input": " (struct xdp_md *ctx) ", " Output": " int ", " Helpers": " [] ", " Read_maps": " [] ", " Update_maps": " [] ", " Func Description": " process the input ctx packet"}, "20": {"author": "BU Course Project", "authorEmail": "course@bu.edu", "date": "2023-01-19", " File": " /home/sayandes/codequery/katran/balancer_kern.c", " Startline": " 818", " Endline": " 827 ", " Funcname": " get_packet_hash ", " Input": " (struct packet_description *pckt, bool hash_16bytes) ", " Output": " __u32 ", " Helpers": " [] ", " Read_maps": " [] ", " Update_maps": " [] ", " Func Description": " return the hash value of input packet"}, "21": {"author": "BU Course Project", "authorEmail": "course@bu.edu", "date": "2023-01-19", " File": " /home/sayandes/codequery/katran/decap_kern.c", " Startline": " 34", " Endline": " 83", " Funcname": " process_l3_headers", " Input": " (struct packet_description *pckt, __u8 *protocol, __u64 off, __u16 *pkt_bytes, void *data, void *data_end, bool is_ipv6)", " Output": " int", " Helpers": " [bpf_ntohs]", " Read_maps": " []", " Update_maps": " []", "  Func Description": " Process layer 3 headers. Drop the packet if it is 1)bogus packet, len less than minimum ethernet frame size, 2)fragmented, 3)ipv4 header not equals to 20 bytes,"}, "22": {"author": "BU Course Project", "authorEmail": "course@bu.edu", "date": "2023-01-19", " File": " /home/sayandes/codequery/katran/decap_kern.c", " Startline": " 85", " Endline": " 120", " Funcname": " process_encaped_ipip_pckt", " Input": " (void **data, void **data_end, struct xdp_md *xdp, bool *is_ipv6, struct packet_description *pckt, __u8 *protocol, __u64 off, __u16 *pkt_bytes)", " Output": " int", " Helpers": " []", " Read_maps": " []", " Update_maps": " []", " Func Description": " Process ip-in-ip encaped packet, drop the packet if"}, "23": {"author": "BU Course Project", "authorEmail": "course@bu.edu", "date": "2023-01-19", " File": " /home/sayandes/codequery/katran/decap_kern.c", " Startline": " 123", " Endline": " 161", " Funcname": " process_encaped_gue_pckt", " Input": " (void **data, void **data_end, struct xdp_md *xdp, bool is_ipv6)", " Output": " int", " Helpers": " []", " Read_maps": " []", " Update_maps": " []", " Func Description": " Decapsulate the outer header of the packet based on whether the inner-outer combo is ipv6 or ipv4.", "                   Drop the packet if": " 1) bogus packet, len less than minimum ethernet frame size, 2) not decaped succesfully."}, "24": {"author": "BU Course Project", "authorEmail": "course@bu.edu", "date": "2023-01-19", " File": " /home/sayandes/codequery/katran/decap_kern.c", " Startline": " 164", " Endline": " 221", " Funcname": " process_packet", " Input": " (void *data, __u64 off, void *data_end, bool is_ipv6, struct xdp_md *xdp)", " Output": " int", " Helpers": " [bpf_map_lookup_elem, bpf_htons]", " Read_maps": " [ decap_counters,]", " Update_maps": " []", " Func Description": " This is a function which assembles the previous 3 functions"}, "25": {"author": "BU Course Project", "authorEmail": "course@bu.edu", "date": "2023-01-19", " File": " /home/sayandes/codequery/katran/decap_kern.c", " Startline": " 223", " Endline": " 247", " Funcname": " xdpdecap", " Input": " (struct xdp_md *ctx)", " Output": " int", " Helpers": " []", " Read_maps": " []", " Update_maps": " []", " Func Description": " This is wrapper function which decapsulates the packet packet header for all types. After processing the packet, pass it to tcp/ip stack."}}}