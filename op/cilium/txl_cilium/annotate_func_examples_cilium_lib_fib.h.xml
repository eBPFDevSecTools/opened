<?xml version="1.0"?>
<doc>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/fib.h" funcheader="static __always_inline int redirect_direct_v6 (struct  __ctx_buff * ctx __maybe_unused, int l3_off __maybe_unused, struct ipv6hdr * ip6 __maybe_unused)" startline="14" endline="66">
static __always_inline int redirect_direct_v6 (struct  __ctx_buff * ctx __maybe_unused, int l3_off __maybe_unused, struct ipv6hdr * ip6 __maybe_unused)
{
    bool no_neigh = is_defined (ENABLE_SKIP_FIB);
    int ret, oif = DIRECT_ROUTING_DEV_IFINDEX;
    struct bpf_redir_neigh *nh = NULL;

# ifndef ENABLE_SKIP_FIB
    struct bpf_redir_neigh nh_params;
    struct bpf_fib_lookup fib_params = {
        .family = AF_INET6,
        .ifindex = ctx->ingress_ifindex,}
    ;
    ipv6_addr_copy ((union v6addr *) &fib_params.ipv6_src, (union v6addr *) &ip6->saddr);
    ipv6_addr_copy ((union v6addr *) &fib_params.ipv6_dst, (union v6addr *) &ip6->daddr);
    ret = fib_lookup (ctx, & fib_params, sizeof (fib_params), BPF_FIB_LOOKUP_DIRECT);
    switch (ret) {
    case BPF_FIB_LKUP_RET_SUCCESS :
        break;
    case BPF_FIB_LKUP_RET_NO_NEIGH :
        nh_params.nh_family = fib_params.family;
        __bpf_memcpy_builtin (&nh_params.ipv6_nh, &fib_params.ipv6_dst, sizeof (nh_params.ipv6_nh));
        no_neigh = true;
        nh = &nh_params;
        break;
    default :
        return CTX_ACT_DROP;
    }
    oif = fib_params.ifindex;

# endif /* ENABLE_SKIP_FIB */
    ret = ipv6_l3 (ctx, l3_off, NULL, NULL, METRIC_EGRESS);
    if (unlikely (ret != CTX_ACT_OK))
        return ret;
    if (no_neigh)
        return redirect_neigh (oif, nh, nh ? sizeof (*nh) : 0, 0);

# ifndef ENABLE_SKIP_FIB
    if (eth_store_daddr (ctx, fib_params.dmac, 0) < 0)
        return CTX_ACT_DROP;
    if (eth_store_saddr (ctx, fib_params.smac, 0) < 0)
        return CTX_ACT_DROP;
    return ctx_redirect (ctx, oif, 0);

# endif /* ENABLE_SKIP_FIB */
    return CTX_ACT_DROP;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/fib.h" funcheader="static __always_inline int redirect_direct_v4 (struct  __ctx_buff * ctx __maybe_unused, int l3_off __maybe_unused, struct iphdr * ip4 __maybe_unused)" startline="70" endline="126">
static __always_inline int redirect_direct_v4 (struct  __ctx_buff * ctx __maybe_unused, int l3_off __maybe_unused, struct iphdr * ip4 __maybe_unused)
{
    bool no_neigh = is_defined (ENABLE_SKIP_FIB);
    int ret, oif = DIRECT_ROUTING_DEV_IFINDEX;
    struct bpf_redir_neigh *nh = NULL;

# ifndef ENABLE_SKIP_FIB
    struct bpf_redir_neigh nh_params;
    struct bpf_fib_lookup fib_params = {
        .family = AF_INET,
        .ifindex = ctx->ingress_ifindex,
        .ipv4_src = ip4->saddr,
        .ipv4_dst = ip4->daddr,}
    ;
    ret = fib_lookup (ctx, & fib_params, sizeof (fib_params), BPF_FIB_LOOKUP_DIRECT);
    switch (ret) {
    case BPF_FIB_LKUP_RET_SUCCESS :
        break;
    case BPF_FIB_LKUP_RET_NO_NEIGH :
        nh_params.nh_family = fib_params.family;
        __bpf_memcpy_builtin (&nh_params.ipv6_nh, &fib_params.ipv6_dst, sizeof (nh_params.ipv6_nh));
        no_neigh = true;
        nh = &nh_params;
        break;
    default :
        return CTX_ACT_DROP;
    }
    oif = fib_params.ifindex;

# endif /* ENABLE_SKIP_FIB */
    ret = ipv4_l3 (ctx, l3_off, NULL, NULL, ip4);
    if (unlikely (ret != CTX_ACT_OK))
        return ret;
    if (no_neigh)
        return redirect_neigh (oif, nh, nh ? sizeof (*nh) : 0, 0);

# ifndef ENABLE_SKIP_FIB
    if (eth_store_daddr (ctx, fib_params.dmac, 0) < 0)
        return CTX_ACT_DROP;
    if (eth_store_saddr (ctx, fib_params.smac, 0) < 0)
        return CTX_ACT_DROP;
    return ctx_redirect (ctx, oif, 0);

# endif /* ENABLE_SKIP_FIB */
    return CTX_ACT_DROP;
}
</source>
</doc>
