<?xml version="1.0"?>
<doc>
<source file="/home/sayandes/opened_extraction/examples/cilium/lib/eps.h" funcheader="static __always_inline __maybe_unused struct endpoint_info *__lookup_ip6_endpoint (const union v6addr *ip6)" startline="12" endline="21">
static __always_inline __maybe_unused struct endpoint_info *__lookup_ip6_endpoint (const union v6addr *ip6)
{
    struct endpoint_key key = {}
    ;
    key.ip6 = *ip6;
    key.family = ENDPOINT_KEY_IPV6;
    return map_lookup_elem (&ENDPOINTS_MAP, &key);
}
</source>
<source file="/home/sayandes/opened_extraction/examples/cilium/lib/eps.h" funcheader="static __always_inline __maybe_unused struct endpoint_info *lookup_ip6_endpoint (const struct ipv6hdr *ip6)" startline="23" endline="27">
static __always_inline __maybe_unused struct endpoint_info *lookup_ip6_endpoint (const struct ipv6hdr *ip6)
{
    return __lookup_ip6_endpoint ((union v6addr *) &ip6->daddr);
}
</source>
<source file="/home/sayandes/opened_extraction/examples/cilium/lib/eps.h" funcheader="static __always_inline __maybe_unused struct endpoint_info *__lookup_ip4_endpoint (__u32 ip)" startline="29" endline="38">
static __always_inline __maybe_unused struct endpoint_info *__lookup_ip4_endpoint (__u32 ip)
{
    struct endpoint_key key = {}
    ;
    key.ip4 = ip;
    key.family = ENDPOINT_KEY_IPV4;
    return map_lookup_elem (&ENDPOINTS_MAP, &key);
}
</source>
<source file="/home/sayandes/opened_extraction/examples/cilium/lib/eps.h" funcheader="static __always_inline __maybe_unused struct endpoint_info *lookup_ip4_endpoint (const struct iphdr *ip4)" startline="40" endline="44">
static __always_inline __maybe_unused struct endpoint_info *lookup_ip4_endpoint (const struct iphdr *ip4)
{
    return __lookup_ip4_endpoint (ip4->daddr);
}
</source>
<source file="/home/sayandes/opened_extraction/examples/cilium/lib/eps.h" funcheader="static __always_inline void *lookup_ip4_endpoint_policy_map (__u32 ip)" startline="47" endline="56">
static __always_inline void *lookup_ip4_endpoint_policy_map (__u32 ip)
{
    struct endpoint_key key = {}
    ;
    key.ip4 = ip;
    key.family = ENDPOINT_KEY_IPV4;
    return map_lookup_elem (&EP_POLICY_MAP, &key);
}
</source>
<source file="/home/sayandes/opened_extraction/examples/cilium/lib/eps.h" funcheader="static __always_inline __maybe_unused struct remote_endpoint_info *ipcache_lookup6 (const void *map, const union v6addr *addr, __u32 prefix)" startline="67" endline="78">
static __always_inline __maybe_unused struct remote_endpoint_info *ipcache_lookup6 (const void *map, const union v6addr *addr, __u32 prefix)
{
    struct ipcache_key key = {
        .lpm_key = {IPCACHE_PREFIX_LEN (prefix),
            {}},
        .family = ENDPOINT_KEY_IPV6,
        .ip6 = *addr,}
    ;
    ipv6_addr_clear_suffix (&key.ip6, prefix);
    return map_lookup_elem (map, &key);
}
</source>
<source file="/home/sayandes/opened_extraction/examples/cilium/lib/eps.h" funcheader="static __always_inline __maybe_unused struct remote_endpoint_info *ipcache_lookup4 (const void *map, __be32 addr, __u32 prefix)" startline="82" endline="92">
static __always_inline __maybe_unused struct remote_endpoint_info *ipcache_lookup4 (const void *map, __be32 addr, __u32 prefix)
{
    struct ipcache_key key = {
        .lpm_key = {IPCACHE_PREFIX_LEN (prefix),
            {}},
        .family = ENDPOINT_KEY_IPV4,
        .ip4 = addr,}
    ;
    key.ip4 &= GET_PREFIX (prefix);
    return map_lookup_elem (map, &key);
}
</source>
</doc>
