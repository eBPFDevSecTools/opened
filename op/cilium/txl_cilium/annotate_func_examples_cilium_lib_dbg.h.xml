<?xml version="1.0"?>
<doc>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/dbg.h" funcheader="static __always_inline void cilium_dbg (struct  __ctx_buff *ctx, __u8 type, __u32 arg1, __u32 arg2)" startline="183" endline="194">
static __always_inline void cilium_dbg (struct  __ctx_buff *ctx, __u8 type, __u32 arg1, __u32 arg2)
{
    struct debug_msg msg = {__notify_common_hdr (CILIUM_NOTIFY_DBG_MSG, type),
        .arg1 = arg1,
        .arg2 = arg2,}
    ;
    ctx_event_output (ctx, &EVENTS_MAP, BPF_F_CURRENT_CPU, &msg, sizeof (msg));
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/dbg.h" funcheader="static __always_inline void cilium_dbg3 (struct  __ctx_buff *ctx, __u8 type, __u32 arg1, __u32 arg2, __u32 arg3)" startline="196" endline="208">
static __always_inline void cilium_dbg3 (struct  __ctx_buff *ctx, __u8 type, __u32 arg1, __u32 arg2, __u32 arg3)
{
    struct debug_msg msg = {__notify_common_hdr (CILIUM_NOTIFY_DBG_MSG, type),
        .arg1 = arg1,
        .arg2 = arg2,
        .arg3 = arg3,}
    ;
    ctx_event_output (ctx, &EVENTS_MAP, BPF_F_CURRENT_CPU, &msg, sizeof (msg));
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/dbg.h" funcheader="static __always_inline void cilium_dbg_capture2 (struct  __ctx_buff *ctx, __u8 type, __u32 arg1, __u32 arg2)" startline="216" endline="231">
static __always_inline void cilium_dbg_capture2 (struct  __ctx_buff *ctx, __u8 type, __u32 arg1, __u32 arg2)
{
    __u64 ctx_len = ctx_full_len (ctx);
    __u64 cap_len = min_t (__u64, TRACE_PAYLOAD_LEN, ctx_len);
    struct debug_capture_msg msg = {__notify_common_hdr (CILIUM_NOTIFY_DBG_CAPTURE, type), __notify_pktcap_hdr (ctx_len, (__u16) cap_len),
        .arg1 = arg1,
        .arg2 = arg2,}
    ;
    ctx_event_output (ctx, &EVENTS_MAP, (cap_len << 32) | BPF_F_CURRENT_CPU, &msg, sizeof (msg));
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/dbg.h" funcheader="static __always_inline void cilium_dbg_capture (struct  __ctx_buff *ctx, __u8 type, __u32 arg1)" startline="233" endline="237">
static __always_inline void cilium_dbg_capture (struct  __ctx_buff *ctx, __u8 type, __u32 arg1)
{
    cilium_dbg_capture2 (ctx, type, arg1, 0);
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/dbg.h" funcheader="static __always_inline void cilium_dbg (struct  __ctx_buff * ctx __maybe_unused, __u8 type __maybe_unused, __u32 arg1 __maybe_unused, __u32 arg2 __maybe_unused)" startline="242" endline="246">
static __always_inline void cilium_dbg (struct  __ctx_buff * ctx __maybe_unused, __u8 type __maybe_unused, __u32 arg1 __maybe_unused, __u32 arg2 __maybe_unused)
{
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/dbg.h" funcheader="static __always_inline void cilium_dbg3 (struct  __ctx_buff * ctx __maybe_unused, __u8 type __maybe_unused, __u32 arg1 __maybe_unused, __u32 arg2 __maybe_unused, __u32 arg3 __maybe_unused)" startline="248" endline="253">
static __always_inline void cilium_dbg3 (struct  __ctx_buff * ctx __maybe_unused, __u8 type __maybe_unused, __u32 arg1 __maybe_unused, __u32 arg2 __maybe_unused, __u32 arg3 __maybe_unused)
{
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/dbg.h" funcheader="static __always_inline void cilium_dbg_capture (struct  __ctx_buff * ctx __maybe_unused, __u8 type __maybe_unused, __u32 arg1 __maybe_unused)" startline="255" endline="259">
static __always_inline void cilium_dbg_capture (struct  __ctx_buff * ctx __maybe_unused, __u8 type __maybe_unused, __u32 arg1 __maybe_unused)
{
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/dbg.h" funcheader="static __always_inline void cilium_dbg_capture2 (struct  __ctx_buff * ctx __maybe_unused, __u8 type __maybe_unused, __u32 arg1 __maybe_unused, __u32 arg2 __maybe_unused)" startline="261" endline="266">
static __always_inline void cilium_dbg_capture2 (struct  __ctx_buff * ctx __maybe_unused, __u8 type __maybe_unused, __u32 arg1 __maybe_unused, __u32 arg2 __maybe_unused)
{
}
</source>
</doc>
