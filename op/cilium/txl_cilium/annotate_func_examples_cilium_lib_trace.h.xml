<?xml version="1.0"?>
<doc>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/trace.h" funcheader="static __always_inline void update_trace_metrics (struct  __ctx_buff *ctx, enum trace_point obs_point, enum trace_reason reason)" startline="80" endline="124">
static __always_inline void update_trace_metrics (struct  __ctx_buff *ctx, enum trace_point obs_point, enum trace_reason reason)
{
    __u8 encrypted;
    switch (obs_point) {
    case TRACE_TO_LXC :
        update_metrics (ctx_full_len (ctx), METRIC_INGRESS, REASON_FORWARDED);
        break;
    case TRACE_TO_HOST :
    case TRACE_TO_STACK :
    case TRACE_TO_OVERLAY :
    case TRACE_TO_NETWORK :
        update_metrics (ctx_full_len (ctx), METRIC_EGRESS, REASON_FORWARDED);
        break;
    case TRACE_FROM_HOST :
    case TRACE_FROM_STACK :
    case TRACE_FROM_OVERLAY :
    case TRACE_FROM_NETWORK :
        encrypted = reason & TRACE_REASON_ENCRYPTED;
        if (!encrypted)
            update_metrics (ctx_full_len (ctx), METRIC_INGRESS, REASON_PLAINTEXT);
        else
            update_metrics (ctx_full_len (ctx), METRIC_INGRESS, REASON_DECRYPT);
        break;
    case TRACE_FROM_LXC :
    case TRACE_FROM_PROXY :
    case TRACE_TO_PROXY :
        break;
    }
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/trace.h" funcheader="static __always_inline bool emit_trace_notify (enum trace_point obs_point, __u32 monitor)" startline="154" endline="182">
static __always_inline bool emit_trace_notify (enum trace_point obs_point, __u32 monitor)
{
    if (MONITOR_AGGREGATION >= TRACE_AGGREGATE_RX) {
        switch (obs_point) {
        case TRACE_FROM_LXC :
        case TRACE_FROM_PROXY :
        case TRACE_FROM_HOST :
        case TRACE_FROM_STACK :
        case TRACE_FROM_OVERLAY :
        case TRACE_FROM_NETWORK :
            return false;
        default :
            break;
        }
    }
    if (MONITOR_AGGREGATION >= TRACE_AGGREGATE_ACTIVE_CT && !monitor)
        return false;
    return true;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/trace.h" funcheader="static __always_inline void send_trace_notify (struct  __ctx_buff *ctx, enum trace_point obs_point, __u32 src, __u32 dst, __u16 dst_id, __u32 ifindex, enum trace_reason reason, __u32 monitor)" startline="184" endline="213">
static __always_inline void send_trace_notify (struct  __ctx_buff *ctx, enum trace_point obs_point, __u32 src, __u32 dst, __u16 dst_id, __u32 ifindex, enum trace_reason reason, __u32 monitor)
{
    __u64 ctx_len = ctx_full_len (ctx);
    __u64 cap_len = min_t (__u64, monitor ? : TRACE_PAYLOAD_LEN, ctx_len);
    struct trace_notify msg __align_stack_8;
    update_trace_metrics (ctx, obs_point, reason);
    if (!emit_trace_notify (obs_point, monitor))
        return;
    msg = (typeof (msg)) {__notify_common_hdr (CILIUM_NOTIFY_TRACE, obs_point), __notify_pktcap_hdr (ctx_len, (__u16) cap_len),
        .src_label = src,
        .dst_label = dst,
        .dst_id = dst_id,
        .reason = reason,
        .ifindex = ifindex,};
    memset (&msg.orig_ip6, 0, sizeof (union v6addr));
    ctx_event_output (ctx, &EVENTS_MAP, (cap_len << 32) | BPF_F_CURRENT_CPU, &msg, sizeof (msg));
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/trace.h" funcheader="static __always_inline void send_trace_notify4 (struct  __ctx_buff *ctx, enum trace_point obs_point, __u32 src, __u32 dst, __be32 orig_addr, __u16 dst_id, __u32 ifindex, enum trace_reason reason, __u32 monitor)" startline="215" endline="245">
static __always_inline void send_trace_notify4 (struct  __ctx_buff *ctx, enum trace_point obs_point, __u32 src, __u32 dst, __be32 orig_addr, __u16 dst_id, __u32 ifindex, enum trace_reason reason, __u32 monitor)
{
    __u64 ctx_len = ctx_full_len (ctx);
    __u64 cap_len = min_t (__u64, monitor ? : TRACE_PAYLOAD_LEN, ctx_len);
    struct trace_notify msg;
    update_trace_metrics (ctx, obs_point, reason);
    if (!emit_trace_notify (obs_point, monitor))
        return;
    msg = (typeof (msg)) {__notify_common_hdr (CILIUM_NOTIFY_TRACE, obs_point), __notify_pktcap_hdr (ctx_len, (__u16) cap_len),
        .src_label = src,
        .dst_label = dst,
        .dst_id = dst_id,
        .reason = reason,
        .ifindex = ifindex,
        .ipv6 = 0,
        .orig_ip4 = orig_addr,};
    ctx_event_output (ctx, &EVENTS_MAP, (cap_len << 32) | BPF_F_CURRENT_CPU, &msg, sizeof (msg));
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/trace.h" funcheader="static __always_inline void send_trace_notify6 (struct  __ctx_buff *ctx, enum trace_point obs_point, __u32 src, __u32 dst, const union v6addr *orig_addr, __u16 dst_id, __u32 ifindex, enum trace_reason reason, __u32 monitor)" startline="247" endline="279">
static __always_inline void send_trace_notify6 (struct  __ctx_buff *ctx, enum trace_point obs_point, __u32 src, __u32 dst, const union v6addr *orig_addr, __u16 dst_id, __u32 ifindex, enum trace_reason reason, __u32 monitor)
{
    __u64 ctx_len = ctx_full_len (ctx);
    __u64 cap_len = min_t (__u64, monitor ? : TRACE_PAYLOAD_LEN, ctx_len);
    struct trace_notify msg;
    update_trace_metrics (ctx, obs_point, reason);
    if (!emit_trace_notify (obs_point, monitor))
        return;
    msg = (typeof (msg)) {__notify_common_hdr (CILIUM_NOTIFY_TRACE, obs_point), __notify_pktcap_hdr (ctx_len, (__u16) cap_len),
        .src_label = src,
        .dst_label = dst,
        .dst_id = dst_id,
        .reason = reason,
        .ifindex = ifindex,
        .ipv6 = 1,};
    ipv6_addr_copy (&msg.orig_ip6, orig_addr);
    ctx_event_output (ctx, &EVENTS_MAP, (cap_len << 32) | BPF_F_CURRENT_CPU, &msg, sizeof (msg));
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/trace.h" funcheader="static __always_inline void send_trace_notify (struct  __ctx_buff *ctx, enum trace_point obs_point, __u32 src __maybe_unused, __u32 dst __maybe_unused, __u16 dst_id __maybe_unused, __u32 ifindex __maybe_unused, enum trace_reason reason, __u32 monitor __maybe_unused)" startline="281" endline="288">
static __always_inline void send_trace_notify (struct  __ctx_buff *ctx, enum trace_point obs_point, __u32 src __maybe_unused, __u32 dst __maybe_unused, __u16 dst_id __maybe_unused, __u32 ifindex __maybe_unused, enum trace_reason reason, __u32 monitor __maybe_unused)
{
    update_trace_metrics (ctx, obs_point, reason);
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/trace.h" funcheader="static __always_inline void send_trace_notify4 (struct  __ctx_buff *ctx, enum trace_point obs_point, __u32 src __maybe_unused, __u32 dst __maybe_unused, __be32 orig_addr __maybe_unused, __u16 dst_id __maybe_unused, __u32 ifindex __maybe_unused, enum trace_reason reason, __u32 monitor __maybe_unused)" startline="290" endline="298">
static __always_inline void send_trace_notify4 (struct  __ctx_buff *ctx, enum trace_point obs_point, __u32 src __maybe_unused, __u32 dst __maybe_unused, __be32 orig_addr __maybe_unused, __u16 dst_id __maybe_unused, __u32 ifindex __maybe_unused, enum trace_reason reason, __u32 monitor __maybe_unused)
{
    update_trace_metrics (ctx, obs_point, reason);
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/trace.h" funcheader="static __always_inline void send_trace_notify6 (struct  __ctx_buff *ctx, enum trace_point obs_point, __u32 src __maybe_unused, __u32 dst __maybe_unused, union v6addr * orig_addr __maybe_unused, __u16 dst_id __maybe_unused, __u32 ifindex __maybe_unused, enum trace_reason reason, __u32 monitor __maybe_unused)" startline="300" endline="308">
static __always_inline void send_trace_notify6 (struct  __ctx_buff *ctx, enum trace_point obs_point, __u32 src __maybe_unused, __u32 dst __maybe_unused, union v6addr * orig_addr __maybe_unused, __u16 dst_id __maybe_unused, __u32 ifindex __maybe_unused, enum trace_reason reason, __u32 monitor __maybe_unused)
{
    update_trace_metrics (ctx, obs_point, reason);
}
</source>
</doc>
