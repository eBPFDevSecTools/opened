<?xml version="1.0"?>
<doc>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/icmp6.h" funcheader="static __always_inline __u8 icmp6_load_type (struct  __ctx_buff *ctx, int nh_off)" startline="43" endline="49">
static __always_inline __u8 icmp6_load_type (struct  __ctx_buff *ctx, int nh_off)
{
    __u8 type;
    ctx_load_bytes (ctx, nh_off + ICMP6_TYPE_OFFSET, &type, sizeof (type));
    return type;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/icmp6.h" funcheader="static __always_inline int icmp6_send_reply (struct  __ctx_buff *ctx, int nh_off)" startline="51" endline="90">
static __always_inline int icmp6_send_reply (struct  __ctx_buff *ctx, int nh_off)
{
    union macaddr smac, dmac = NODE_MAC;
    const int csum_off = nh_off + ICMP6_CSUM_OFFSET;
    union v6addr sip, dip, router_ip;
    __be32 sum;
    if (ipv6_load_saddr (ctx, nh_off, &sip) < 0 || ipv6_load_daddr (ctx, nh_off, &dip) < 0)
        return DROP_INVALID;
    BPF_V6 (router_ip, ROUTER_IP);
    if (ipv6_store_saddr (ctx, router_ip.addr, nh_off) < 0)
        return DROP_WRITE_ERROR;
    if (ipv6_store_daddr (ctx, sip.addr, nh_off) < 0)
        return DROP_WRITE_ERROR;
    sum = csum_diff (sip.addr, 16, router_ip.addr, 16, 0);
    if (l4_csum_replace (ctx, csum_off, 0, sum, BPF_F_PSEUDO_HDR) < 0)
        return DROP_CSUM_L4;
    sum = csum_diff (dip.addr, 16, sip.addr, 16, 0);
    if (l4_csum_replace (ctx, csum_off, 0, sum, BPF_F_PSEUDO_HDR) < 0)
        return DROP_CSUM_L4;
    if (eth_load_saddr (ctx, smac.addr, 0) < 0)
        return DROP_INVALID;
    if (eth_store_daddr (ctx, smac.addr, 0) < 0 || eth_store_saddr (ctx, dmac.addr, 0) < 0)
        return DROP_WRITE_ERROR;
    cilium_dbg_capture (ctx, DBG_CAPTURE_DELIVERY, ctx_get_ifindex (ctx));
    return redirect_self (ctx);
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/icmp6.h" funcheader="static __always_inline int __icmp6_send_echo_reply (struct  __ctx_buff *ctx, int nh_off)" startline="92" endline="125">
static __always_inline int __icmp6_send_echo_reply (struct  __ctx_buff *ctx, int nh_off)
{
    struct icmp6hdr icmp6hdr __align_stack_8 = {}, icmp6hdr_old  __align_stack_8;
    int csum_off = nh_off + ICMP6_CSUM_OFFSET;
    __be32 sum;
    cilium_dbg (ctx, DBG_ICMP6_REQUEST, nh_off, 0);
    if (ctx_load_bytes (ctx, nh_off + sizeof (struct ipv6hdr), &icmp6hdr_old, sizeof (icmp6hdr_old)) < 0)
        return DROP_INVALID;
    icmp6hdr.icmp6_type = 129;
    icmp6hdr.icmp6_code = 0;
    icmp6hdr.icmp6_cksum = icmp6hdr_old.icmp6_cksum;
    icmp6hdr.icmp6_dataun.un_data32[0] = 0;
    icmp6hdr.icmp6_identifier = icmp6hdr_old.icmp6_identifier;
    icmp6hdr.icmp6_sequence = icmp6hdr_old.icmp6_sequence;
    if (ctx_store_bytes (ctx, nh_off + sizeof (struct ipv6hdr), &icmp6hdr, sizeof (icmp6hdr), 0) < 0)
        return DROP_WRITE_ERROR;
    sum = csum_diff (& icmp6hdr_old, sizeof (icmp6hdr_old), & icmp6hdr, sizeof (icmp6hdr), 0);
    if (l4_csum_replace (ctx, csum_off, 0, sum, BPF_F_PSEUDO_HDR) < 0)
        return DROP_CSUM_L4;
    return icmp6_send_reply (ctx, nh_off);
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/icmp6.h" funcheader="int tail_icmp6_send_echo_reply (struct  __ctx_buff *ctx)" startline="129" endline="139">
int tail_icmp6_send_echo_reply (struct  __ctx_buff *ctx)
{
    int ret, nh_off = ctx_load_meta (ctx, 0);
    enum metric_dir direction = (enum metric_dir) ctx_load_meta (ctx, 1);
    ctx_store_meta (ctx, 0, 0);
    ret = __icmp6_send_echo_reply (ctx, nh_off);
    if (IS_ERR (ret))
        return send_drop_notify_error (ctx, 0, ret, CTX_ACT_DROP, direction);
    return ret;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/icmp6.h" funcheader="static __always_inline int icmp6_send_echo_reply (struct  __ctx_buff *ctx, int nh_off, enum metric_dir direction)" startline="151" endline="160">
static __always_inline int icmp6_send_echo_reply (struct  __ctx_buff *ctx, int nh_off, enum metric_dir direction)
{
    ctx_store_meta (ctx, 0, nh_off);
    ctx_store_meta (ctx, 1, direction);
    ep_tail_call (ctx, CILIUM_CALL_SEND_ICMP6_ECHO_REPLY);
    return DROP_MISSED_TAIL_CALL;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/icmp6.h" funcheader="static __always_inline int send_icmp6_ndisc_adv (struct  __ctx_buff *ctx, int nh_off, union macaddr *mac, bool to_router)" startline="171" endline="232">
static __always_inline int send_icmp6_ndisc_adv (struct  __ctx_buff *ctx, int nh_off, union macaddr *mac, bool to_router)
{
    struct icmp6hdr icmp6hdr __align_stack_8 = {}, icmp6hdr_old  __align_stack_8;
    __u8 opts [8], opts_old [8];
    const int csum_off = nh_off + ICMP6_CSUM_OFFSET;
    __be32 sum;
    if (ctx_load_bytes (ctx, nh_off + sizeof (struct ipv6hdr), &icmp6hdr_old, sizeof (icmp6hdr_old)) < 0)
        return DROP_INVALID;
    icmp6hdr.icmp6_type = 136;
    icmp6hdr.icmp6_code = 0;
    icmp6hdr.icmp6_cksum = icmp6hdr_old.icmp6_cksum;
    icmp6hdr.icmp6_dataun.un_data32[0] = 0;
    if (to_router) {
        icmp6hdr.icmp6_router = 1;
        icmp6hdr.icmp6_solicited = 1;
        icmp6hdr.icmp6_override = 0;
    }
    else {
        icmp6hdr.icmp6_router = 0;
        icmp6hdr.icmp6_solicited = 1;
        icmp6hdr.icmp6_override = 1;
    }
    if (ctx_store_bytes (ctx, nh_off + sizeof (struct ipv6hdr), &icmp6hdr, sizeof (icmp6hdr), 0) < 0)
        return DROP_WRITE_ERROR;
    sum = csum_diff (& icmp6hdr_old, sizeof (icmp6hdr_old), & icmp6hdr, sizeof (icmp6hdr), 0);
    if (l4_csum_replace (ctx, csum_off, 0, sum, BPF_F_PSEUDO_HDR) < 0)
        return DROP_CSUM_L4;
    if (ctx_load_bytes (ctx, nh_off + ICMP6_ND_OPTS, opts_old, sizeof (opts_old)) < 0)
        return DROP_INVALID;
    opts[0] = 2;
    opts[1] = 1;
    opts[2] = mac->addr[0];
    opts[3] = mac->addr[1];
    opts[4] = mac->addr[2];
    opts[5] = mac->addr[3];
    opts[6] = mac->addr[4];
    opts[7] = mac->addr[5];
    if (ctx_store_bytes (ctx, nh_off + ICMP6_ND_OPTS, opts, sizeof (opts), 0) < 0)
        return DROP_WRITE_ERROR;
    sum = csum_diff (opts_old, sizeof (opts_old), opts, sizeof (opts), 0);
    if (l4_csum_replace (ctx, csum_off, 0, sum, BPF_F_PSEUDO_HDR) < 0)
        return DROP_CSUM_L4;
    return icmp6_send_reply (ctx, nh_off);
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/icmp6.h" funcheader="static __always_inline __be32 compute_icmp6_csum (char data [80], __u16 payload_len, struct ipv6hdr *ipv6hdr)" startline="234" endline="244">
static __always_inline __be32 compute_icmp6_csum (char data [80], __u16 payload_len, struct ipv6hdr *ipv6hdr)
{
    __be32 sum;
    sum = csum_diff (NULL, 0, data, payload_len, 0);
    sum = ipv6_pseudohdr_checksum (ipv6hdr, IPPROTO_ICMPV6, payload_len, sum);
    return sum;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/icmp6.h" funcheader="static __always_inline int __icmp6_send_time_exceeded (struct  __ctx_buff *ctx, int nh_off)" startline="247" endline="327">
static __always_inline int __icmp6_send_time_exceeded (struct  __ctx_buff *ctx, int nh_off)
{
    char data [80] = {};
    struct icmp6hdr *icmp6hoplim;
    struct ipv6hdr *ipv6hdr;
    char *upper;
    const int csum_off = nh_off + ICMP6_CSUM_OFFSET;
    __be32 sum = 0;
    __u16 payload_len = 0;
    __u8 icmp6_nexthdr = IPPROTO_ICMPV6;
    int trimlen;
    icmp6hoplim = (struct icmp6hdr *) data;
    ipv6hdr = (struct ipv6hdr *) (data + 8);
    upper = (data + 48);
    icmp6hoplim->icmp6_type = 3;
    icmp6hoplim->icmp6_code = 0;
    icmp6hoplim->icmp6_cksum = 0;
    icmp6hoplim->icmp6_dataun.un_data32[0] = 0;
    cilium_dbg (ctx, DBG_ICMP6_TIME_EXCEEDED, 0, 0);
    if (ctx_load_bytes (ctx, nh_off, ipv6hdr, sizeof (*ipv6hdr)) < 0)
        return DROP_INVALID;
    if (ipv6_store_nexthdr (ctx, &icmp6_nexthdr, nh_off) < 0)
        return DROP_WRITE_ERROR;
    switch (ipv6hdr->nexthdr) {
    case IPPROTO_ICMPV6 :
    case IPPROTO_UDP :
        if (ctx_load_bytes (ctx, nh_off + sizeof (struct ipv6hdr), upper, 8) < 0)
            return DROP_INVALID;
        sum = compute_icmp6_csum (data, 56, ipv6hdr);
        payload_len = bpf_htons (56);
        trimlen = 56 - bpf_ntohs (ipv6hdr->payload_len);
        if (ctx_change_tail (ctx, ctx_full_len (ctx) + trimlen, 0) < 0)
            return DROP_WRITE_ERROR;
        if (ctx_store_bytes (ctx, nh_off + sizeof (struct ipv6hdr), data, 56, 0) < 0)
            return DROP_WRITE_ERROR;
        if (ipv6_store_paylen (ctx, nh_off, &payload_len) < 0)
            return DROP_WRITE_ERROR;
        break;
    case IPPROTO_TCP :
        if (ctx_load_bytes (ctx, nh_off + sizeof (struct ipv6hdr), upper, 20) < 0)
            return DROP_INVALID;
        sum = compute_icmp6_csum (data, 68, ipv6hdr);
        payload_len = bpf_htons (68);
        trimlen = 68 - bpf_ntohs (ipv6hdr->payload_len);
        if (ctx_change_tail (ctx, ctx_full_len (ctx) + trimlen, 0) < 0)
            return DROP_WRITE_ERROR;
        if (ctx_store_bytes (ctx, nh_off + sizeof (struct ipv6hdr), data, 68, 0) < 0)
            return DROP_WRITE_ERROR;
        if (ipv6_store_paylen (ctx, nh_off, &payload_len) < 0)
            return DROP_WRITE_ERROR;
        break;
    default :
        return DROP_UNKNOWN_L4;
    }
    if (l4_csum_replace (ctx, csum_off, 0, sum, BPF_F_PSEUDO_HDR) < 0)
        return DROP_CSUM_L4;
    return icmp6_send_reply (ctx, nh_off);
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/icmp6.h" funcheader="int tail_icmp6_send_time_exceeded (struct  __ctx_buff * ctx __maybe_unused)" startline="332" endline="347">
int tail_icmp6_send_time_exceeded (struct  __ctx_buff * ctx __maybe_unused)
{

# ifdef BPF_HAVE_CHANGE_TAIL
    int ret, nh_off = ctx_load_meta (ctx, 0);
    enum metric_dir direction = (enum metric_dir) ctx_load_meta (ctx, 1);
    ctx_store_meta (ctx, 0, 0);
    ret = __icmp6_send_time_exceeded (ctx, nh_off);
    if (IS_ERR (ret))
        return send_drop_notify_error (ctx, 0, ret, CTX_ACT_DROP, direction);
    return ret;

# else
    return 0;

# endif
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/icmp6.h" funcheader="static __always_inline int icmp6_send_time_exceeded (struct  __ctx_buff *ctx, int nh_off, enum metric_dir direction)" startline="359" endline="368">
static __always_inline int icmp6_send_time_exceeded (struct  __ctx_buff *ctx, int nh_off, enum metric_dir direction)
{
    ctx_store_meta (ctx, 0, nh_off);
    ctx_store_meta (ctx, 1, direction);
    ep_tail_call (ctx, CILIUM_CALL_SEND_ICMP6_TIME_EXCEEDED);
    return DROP_MISSED_TAIL_CALL;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/icmp6.h" funcheader="static __always_inline int __icmp6_handle_ns (struct  __ctx_buff *ctx, int nh_off)" startline="370" endline="398">
static __always_inline int __icmp6_handle_ns (struct  __ctx_buff *ctx, int nh_off)
{
    union v6addr target, router;
    struct endpoint_info *ep;
    if (ctx_load_bytes (ctx, nh_off + ICMP6_ND_TARGET_OFFSET, target.addr, sizeof (((struct ipv6hdr *) NULL)->saddr)) < 0)
        return DROP_INVALID;
    cilium_dbg (ctx, DBG_ICMP6_NS, target.p3, target.p4);
    BPF_V6 (router, ROUTER_IP);
    if (ipv6_addrcmp (&target, &router) == 0) {
        union macaddr router_mac = NODE_MAC;
        return send_icmp6_ndisc_adv (ctx, nh_off, &router_mac, true);
    }
    ep = __lookup_ip6_endpoint (& target);
    if (ep) {
        union macaddr router_mac = NODE_MAC;
        return send_icmp6_ndisc_adv (ctx, nh_off, &router_mac, false);
    }
    return ACTION_UNKNOWN_ICMP6_NS;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/icmp6.h" funcheader="int tail_icmp6_handle_ns (struct  __ctx_buff *ctx)" startline="402" endline="412">
int tail_icmp6_handle_ns (struct  __ctx_buff *ctx)
{
    int ret, nh_off = ctx_load_meta (ctx, 0);
    enum metric_dir direction = (enum metric_dir) ctx_load_meta (ctx, 1);
    ctx_store_meta (ctx, 0, 0);
    ret = __icmp6_handle_ns (ctx, nh_off);
    if (IS_ERR (ret))
        return send_drop_notify_error (ctx, 0, ret, CTX_ACT_DROP, direction);
    return ret;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/icmp6.h" funcheader="static __always_inline int icmp6_handle_ns (struct  __ctx_buff *ctx, int nh_off, enum metric_dir direction)" startline="425" endline="434">
static __always_inline int icmp6_handle_ns (struct  __ctx_buff *ctx, int nh_off, enum metric_dir direction)
{
    ctx_store_meta (ctx, 0, nh_off);
    ctx_store_meta (ctx, 1, direction);
    ep_tail_call (ctx, CILIUM_CALL_HANDLE_ICMP6_NS);
    return DROP_MISSED_TAIL_CALL;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/icmp6.h" funcheader="static __always_inline int icmp6_handle (struct  __ctx_buff *ctx, int nh_off, struct ipv6hdr *ip6, enum metric_dir direction)" startline="436" endline="458">
static __always_inline int icmp6_handle (struct  __ctx_buff *ctx, int nh_off, struct ipv6hdr *ip6, enum metric_dir direction)
{
    union v6addr router_ip;
    __u8 type = icmp6_load_type (ctx, nh_off);
    cilium_dbg (ctx, DBG_ICMP6_HANDLE, type, 0);
    BPF_V6 (router_ip, ROUTER_IP);
    switch (type) {
    case ICMP6_NS_MSG_TYPE :
        return icmp6_handle_ns (ctx, nh_off, direction);
    case ICMPV6_ECHO_REQUEST :
        if (!ipv6_addrcmp ((union v6addr *) &ip6->daddr, &router_ip))
            return icmp6_send_echo_reply (ctx, nh_off, direction);
        break;
    }
    return 0;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/icmp6.h" funcheader="static __always_inline int icmp6_host_handle (struct  __ctx_buff * ctx __maybe_unused)" startline="460" endline="531">
static __always_inline int icmp6_host_handle (struct  __ctx_buff * ctx __maybe_unused)
{
    __u8 type __maybe_unused;
    type = icmp6_load_type (ctx, ETH_HLEN);
    if (type == ICMP6_NS_MSG_TYPE)
        return icmp6_handle_ns (ctx, ETH_HLEN, METRIC_INGRESS);

#ifdef ENABLE_HOST_FIREWALL
    if (type == ICMP6_ECHO_REQUEST_MSG_TYPE || type == ICMP6_ECHO_REPLY_MSG_TYPE)
        return CTX_ACT_OK;
    if ((ICMP6_UNREACH_MSG_TYPE <= type && type <= ICMP6_PARAM_ERR_MSG_TYPE) || (ICMP6_MULT_LIST_QUERY_TYPE <= type && type <= ICMP6_NA_MSG_TYPE) || (ICMP6_INV_NS_MSG_TYPE <= type && type <= ICMP6_MULT_LIST_REPORT_V2_TYPE) || (ICMP6_SEND_NS_MSG_TYPE <= type && type <= ICMP6_SEND_NA_MSG_TYPE) || (ICMP6_MULT_RA_MSG_TYPE <= type && type <= ICMP6_MULT_RT_MSG_TYPE))
        return SKIP_HOST_FIREWALL;
    return DROP_FORBIDDEN_ICMP6;

#else
    return CTX_ACT_OK;

#endif /* ENABLE_HOST_FIREWALL */
}
</source>
</doc>
