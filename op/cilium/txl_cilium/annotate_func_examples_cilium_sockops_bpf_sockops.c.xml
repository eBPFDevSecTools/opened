<?xml version="1.0"?>
<doc>
<source file="/home/sayandes/opened_extraction/examples/cilium/sockops/bpf_sockops.c" funcheader="static __always_inline void sk_extract4_key (const struct bpf_sock_ops *ops, struct sock_key *key)" startline="26" endline="40">
static __always_inline void sk_extract4_key (const struct bpf_sock_ops *ops, struct sock_key *key)
{
    key->dip4 = ops->remote_ip4;
    key->sip4 = ops->local_ip4;
    key->family = ENDPOINT_KEY_IPV4;
    key->sport = (bpf_ntohl (ops->local_port) >> 16);
    key->dport = READ_ONCE (ops->remote_port) >> 16;
}
</source>
<source file="/home/sayandes/opened_extraction/examples/cilium/sockops/bpf_sockops.c" funcheader="static __always_inline void sk_lb4_key (struct lb4_key *lb4, const struct sock_key *key)" startline="42" endline="48">
static __always_inline void sk_lb4_key (struct lb4_key *lb4, const struct sock_key *key)
{
    lb4->address = key->dip4;
    lb4->dport = (__u16) key->dport;
}
</source>
<source file="/home/sayandes/opened_extraction/examples/cilium/sockops/bpf_sockops.c" funcheader="static __always_inline bool redirect_to_proxy (int verdict)" startline="50" endline="53">
static __always_inline bool redirect_to_proxy (int verdict)
{
    return verdict > 0;
}
</source>
<source file="/home/sayandes/opened_extraction/examples/cilium/sockops/bpf_sockops.c" funcheader="static inline void bpf_sock_ops_ipv4 (struct bpf_sock_ops *skops)" startline="55" endline="118">
static inline void bpf_sock_ops_ipv4 (struct bpf_sock_ops *skops)
{
    struct lb4_key lb4_key = {}
    ;
    __u32 dip4, dport, dst_id = 0;
    struct endpoint_info *exists;
    struct lb4_service *svc;
    struct sock_key key = {}
    ;
    int verdict;
    sk_extract4_key (skops, &key);
    sk_lb4_key (&lb4_key, &key);
    svc = lb4_lookup_service (& lb4_key, true);
    if (svc)
        return;
    if (1) {
        struct remote_endpoint_info *info;
        info = lookup_ip4_remote_endpoint (key.dip4);
        if (info != NULL && info->sec_label)
            dst_id = info->sec_label;
        else
            dst_id = WORLD_ID;
    }
    verdict = policy_sk_egress (dst_id, key.sip4, (__u16) key.dport);
    if (redirect_to_proxy (verdict)) {
        __be32 host_ip = IPV4_GATEWAY;
        key.dip4 = key.sip4;
        key.dport = key.sport;
        key.sip4 = host_ip;
        key.sport = verdict;
        sock_hash_update (skops, &SOCK_OPS_MAP, &key, BPF_NOEXIST);
        return;
    }
    exists = __lookup_ip4_endpoint (key.dip4);
    if (!exists)
        return;
    dip4 = key.dip4;
    dport = key.dport;
    key.dip4 = key.sip4;
    key.dport = key.sport;
    key.sip4 = dip4;
    key.sport = dport;
    sock_hash_update (skops, &SOCK_OPS_MAP, &key, BPF_NOEXIST);
}
</source>
<source file="/home/sayandes/opened_extraction/examples/cilium/sockops/bpf_sockops.c" funcheader="static inline void bpf_sock_ops_ipv6 (struct bpf_sock_ops *skops)" startline="122" endline="126">
static inline void bpf_sock_ops_ipv6 (struct bpf_sock_ops *skops)
{
    if (skops->remote_ip4)
        bpf_sock_ops_ipv4 (skops);
}
</source>
<source file="/home/sayandes/opened_extraction/examples/cilium/sockops/bpf_sockops.c" funcheader="int bpf_sockmap (struct bpf_sock_ops *skops)" startline="130" endline="154">
int bpf_sockmap (struct bpf_sock_ops *skops)
{
    __u32 family, op;
    family = skops->family;
    op = skops->op;
    switch (op) {
    case BPF_SOCK_OPS_PASSIVE_ESTABLISHED_CB :
    case BPF_SOCK_OPS_ACTIVE_ESTABLISHED_CB :

#ifdef ENABLE_IPV6
        if (family == AF_INET6)
            bpf_sock_ops_ipv6 (skops);

#endif

#ifdef ENABLE_IPV4
        if (family == AF_INET)
            bpf_sock_ops_ipv4 (skops);

#endif
        break;
    default :
        break;
    }
    return 0;
}
</source>
</doc>
