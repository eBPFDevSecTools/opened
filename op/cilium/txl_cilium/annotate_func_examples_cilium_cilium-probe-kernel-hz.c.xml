<?xml version="1.0"?>
<doc>
<source file="/home/palani/github/opened_extraction/examples/cilium/cilium-probe-kernel-hz.c" funcheader="static int pin_to_cpu (int cpu)" startline="30" endline="38">
static int pin_to_cpu (int cpu)
{
    cpu_set_t set;
    CPU_ZERO (&set);
    CPU_SET (cpu, &set);
    return sched_setaffinity (0, sizeof (set), &set);
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/cilium-probe-kernel-hz.c" funcheader="static int fix_priority (void)" startline="40" endline="47">
static int fix_priority (void)
{
    struct sched_param sp = {
        .sched_priority = sched_get_priority_max (SCHED_FIFO),}
    ;
    return sched_setscheduler (0, SCHED_FIFO, &sp);
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/cilium-probe-kernel-hz.c" funcheader="static FILE *timer_list_open (void)" startline="49" endline="52">
static FILE *timer_list_open (void)
{
    return fopen ("/proc/timer_list", "r");
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/cilium-probe-kernel-hz.c" funcheader="static void timer_list_close (FILE *fp)" startline="54" endline="57">
static void timer_list_close (FILE *fp)
{
    fclose (fp);
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/cilium-probe-kernel-hz.c" funcheader="static int prep_kern_jiffies (struct cpu_jiffies *before, struct cpu_jiffies *after)" startline="59" endline="92">
static int prep_kern_jiffies (struct cpu_jiffies *before, struct cpu_jiffies *after)
{
    uint64_t jiffies = 0;
    char buff [512];
    int cpus = 0;
    FILE *fp;
    fp = timer_list_open ();
    while (fp && fgets (buff, sizeof (buff), fp)) {
        if (sscanf (buff, "jiffies: %lu\n", &jiffies) == 1)
            cpus++;
    }
    timer_list_close (fp);
    if (!cpus) {
        fprintf (stderr, "No procfs support?\n");
        return -EIO;
    }
    before->cpus = after->cpus = cpus;
    before->jiffies = calloc (cpus, sizeof (*before->jiffies));
    after->jiffies = calloc (cpus, sizeof (*before->jiffies));
    if (!before->jiffies || !after->jiffies) {
        free (before->jiffies);
        free (after->jiffies);
        fprintf (stderr, "Error allocating per CPU jiffies: %s\n", strerror (errno));
        return -EIO;
    }
    return 0;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/cilium-probe-kernel-hz.c" funcheader="static int fetch_kern_jiffies (const struct cpu_jiffies *curr)" startline="94" endline="113">
static int fetch_kern_jiffies (const struct cpu_jiffies *curr)
{
    char buff [512];
    int cpus = 0;
    FILE *fp;
    fp = timer_list_open ();
    while (fp && fgets (buff, sizeof (buff), fp) && cpus < curr->cpus) {
        if (sscanf (buff, "jiffies: %lu\n", &curr->jiffies[cpus]) == 1)
            cpus++;
    }
    timer_list_close (fp);
    if (cpus != curr->cpus) {
        fprintf (stderr, "CPU mismatch when fetching jiffies\n");
        return -EIO;
    }
    return 0;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/cilium-probe-kernel-hz.c" funcheader="static int dump_kern_jiffies (const struct cpu_jiffies *fixed, const struct cpu_jiffies *result, bool macro)" startline="115" endline="150">
static int dump_kern_jiffies (const struct cpu_jiffies *fixed, const struct cpu_jiffies *result, bool macro)
{
    uint64_t delta, warp = 0;
    int i, j, ret = -1;
    int64_t x;
    for (i = 0; i < result->cpus; i++) {
        result->jiffies[i] -= fixed->jiffies[i];
        for (j = 0, delta = ~0; j < ARRAY_SIZE (kernel_hz); j++) {
            x = abs ((int64_t) (kernel_hz [j] - result -> jiffies [i]));
            if (x < delta) {
                delta = x;
                fixed->jiffies[i] = kernel_hz[j];
            }
        }
        if (delta > warp)
            warp = delta;
        if (fixed->jiffies[i] != fixed->jiffies[0]) {
            fprintf (stderr, "Probed jiffies mismatch: %lu vs %lu HZ\n", fixed->jiffies[i], fixed->jiffies[0]);
            goto out;
        }
    }
    if (macro)
        printf ("#define KERNEL_HZ %lu\t/* warp: %lu jiffies */\n", fixed->jiffies[0], warp);
    else
        printf ("%lu, %lu\n", fixed->jiffies[0], warp);
    ret = 0;
out :
    free (fixed->jiffies);
    free (result->jiffies);
    return ret;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/cilium-probe-kernel-hz.c" funcheader="int main (int argc, char **argv)" startline="152" endline="194">
int main (int argc, char **argv)
{
    struct cpu_jiffies before, after;
    struct timespec tv = {
        .tv_sec = 1,
        .tv_nsec = 0,}
    ;
    int opt, sig, ret, tries = 4;
    bool macro = false;
    while ((opt = getopt (argc, argv, "m")) != -1) {
        switch (opt) {
        case 'm' :
            macro = true;
            break;
        default :
            return -1;
        }
    }
    if (pin_to_cpu (0)) {
        fprintf (stderr, "Cannot pin to CPU 0: %s\n", strerror (errno));
        return -1;
    }
    if (fix_priority ()) {
        fprintf (stderr, "Cannot set priority: %s\n", strerror (errno));
        return -1;
    }
    if (prep_kern_jiffies (&before, &after)) {
        fprintf (stderr, "Cannot prep jiffies: %s\n", strerror (errno));
        return -1;
    }
    do {
        ret = fetch_kern_jiffies (& before);
        sig = nanosleep (& tv, NULL);
        ret += fetch_kern_jiffies (&after);
    }
    while (!ret && sig && errno == EINTR && --tries >= 0);
    if (!ret && !sig)
        ret = dump_kern_jiffies (&before, &after, macro);
    return ret;
}
</source>
</doc>
