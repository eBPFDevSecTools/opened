<?xml version="1.0"?>
<doc>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/identity.h" funcheader="static __always_inline bool identity_in_range (__u32 identity, __u32 range_start, __u32 range_end)" startline="9" endline="12">
static __always_inline bool identity_in_range (__u32 identity, __u32 range_start, __u32 range_end)
{
    return range_start <= identity && identity <= range_end;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/identity.h" funcheader="static __always_inline bool identity_is_remote_node (__u32 identity)" startline="14" endline="32">
static __always_inline bool identity_is_remote_node (__u32 identity)
{
    return identity == REMOTE_NODE_ID || identity == KUBE_APISERVER_NODE_ID;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/identity.h" funcheader="static __always_inline bool identity_is_node (__u32 identity)" startline="34" endline="37">
static __always_inline bool identity_is_node (__u32 identity)
{
    return identity == HOST_ID || identity_is_remote_node (identity);
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/identity.h" funcheader="static __always_inline bool identity_is_reserved (__u32 identity)" startline="57" endline="60">
static __always_inline bool identity_is_reserved (__u32 identity)
{
    return identity < UNMANAGED_ID || identity_is_remote_node (identity);
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/identity.h" funcheader="static __always_inline bool identity_is_cluster (__u32 identity)" startline="80" endline="90">
static __always_inline bool identity_is_cluster (__u32 identity)
{
    if (identity == WORLD_ID)
        return false;
    if (identity_in_range (identity, CIDR_IDENTITY_RANGE_START, CIDR_IDENTITY_RANGE_END))
        return false;
    return true;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/identity.h" funcheader="static __always_inline __u32 inherit_identity_from_host (struct  __ctx_buff *ctx, __u32 *identity)" startline="93" endline="137">
static __always_inline __u32 inherit_identity_from_host (struct  __ctx_buff *ctx, __u32 *identity)
{
    __u32 magic = ctx->mark & MARK_MAGIC_HOST_MASK;
    if (magic == MARK_MAGIC_PROXY_INGRESS) {
        *identity = get_identity (ctx);
        ctx->tc_index |= TC_INDEX_F_SKIP_INGRESS_PROXY;
    }
    else if (magic == MARK_MAGIC_PROXY_EGRESS) {
        *identity = get_identity (ctx);
        ctx->tc_index |= TC_INDEX_F_SKIP_EGRESS_PROXY;
    }
    else if (magic == MARK_MAGIC_IDENTITY) {
        *identity = get_identity (ctx);
    }
    else if (magic == MARK_MAGIC_HOST) {
        *identity = HOST_ID;
    }
    else if (magic == MARK_MAGIC_ENCRYPT) {
        *identity = get_identity (ctx);

#if defined(ENABLE_L7_LB)
    }
    else if (magic == MARK_MAGIC_PROXY_EGRESS_EPID) {
        *identity = get_epid (ctx);

#endif
    }
    else {
        *identity = WORLD_ID;
    }
    ctx->mark = 0;

#if defined(ENABLE_L7_LB)
    if (magic != MARK_MAGIC_PROXY_EGRESS_EPID)

#endif
        cilium_dbg (ctx, DBG_INHERIT_IDENTITY, *identity, 0);
    return magic;
}
</source>
</doc>
