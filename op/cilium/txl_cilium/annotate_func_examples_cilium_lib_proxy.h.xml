<?xml version="1.0"?>
<doc>
<source file="/home/sayandes/opened_extraction/examples/cilium/lib/proxy.h" funcheader="static __always_inline int assign_socket_tcp (struct  __ctx_buff *ctx, struct bpf_sock_tuple *tuple, __u32 len, bool established)" startline="14" endline="42">
static __always_inline int assign_socket_tcp (struct  __ctx_buff *ctx, struct bpf_sock_tuple *tuple, __u32 len, bool established)
{
    int result = DROP_PROXY_LOOKUP_FAILED;
    struct bpf_sock *sk;
    __u32 dbg_ctx;
    sk = skc_lookup_tcp (ctx, tuple, len, BPF_F_CURRENT_NETNS, 0);
    if (!sk)
        goto out;
    if (established && sk->state == BPF_TCP_TIME_WAIT)
        goto release;
    if (established && sk->state == BPF_TCP_LISTEN)
        goto release;
    dbg_ctx = sk->family << 16 | ctx->protocol;
    result = sk_assign (ctx, sk, 0);
    cilium_dbg (ctx, DBG_SK_ASSIGN, -result, dbg_ctx);
    if (result == 0)
        result = CTX_ACT_OK;
    else
        result = DROP_PROXY_SET_FAILED;
release :
    sk_release (sk);
out :
    return result;
}
</source>
<source file="/home/sayandes/opened_extraction/examples/cilium/lib/proxy.h" funcheader="static __always_inline int assign_socket_udp (struct  __ctx_buff *ctx, struct bpf_sock_tuple *tuple, __u32 len, bool established __maybe_unused)" startline="44" endline="67">
static __always_inline int assign_socket_udp (struct  __ctx_buff *ctx, struct bpf_sock_tuple *tuple, __u32 len, bool established __maybe_unused)
{
    int result = DROP_PROXY_LOOKUP_FAILED;
    struct bpf_sock *sk;
    __u32 dbg_ctx;
    sk = sk_lookup_udp (ctx, tuple, len, BPF_F_CURRENT_NETNS, 0);
    if (!sk)
        goto out;
    dbg_ctx = sk->family << 16 | ctx->protocol;
    result = sk_assign (ctx, sk, 0);
    cilium_dbg (ctx, DBG_SK_ASSIGN, -result, dbg_ctx);
    if (result == 0)
        result = CTX_ACT_OK;
    else
        result = DROP_PROXY_SET_FAILED;
    sk_release (sk);
out :
    return result;
}
</source>
<source file="/home/sayandes/opened_extraction/examples/cilium/lib/proxy.h" funcheader="static __always_inline int assign_socket (struct  __ctx_buff *ctx, struct bpf_sock_tuple *tuple, __u32 len, __u8 nexthdr, bool established)" startline="69" endline="86">
static __always_inline int assign_socket (struct  __ctx_buff *ctx, struct bpf_sock_tuple *tuple, __u32 len, __u8 nexthdr, bool established)
{
    switch (nexthdr) {
    case IPPROTO_TCP :
        return assign_socket_tcp (ctx, tuple, len, established);
    case IPPROTO_UDP :
        return assign_socket_udp (ctx, tuple, len, established);
    }
    return DROP_PROXY_UNKNOWN_PROTO;
}
</source>
<source file="/home/sayandes/opened_extraction/examples/cilium/lib/proxy.h" funcheader="static __always_inline __u32 combine_ports (__u16 dport, __u16 sport)" startline="92" endline="96">
static __always_inline __u32 combine_ports (__u16 dport, __u16 sport)
{
    return (bpf_ntohs (dport) << 16) | bpf_ntohs (sport);
}
</source>
<source file="/home/sayandes/opened_extraction/examples/cilium/lib/proxy.h" funcheader="static __always_inline int __ctx_redirect_to_proxy (struct  __ctx_buff *ctx, void * tuple __maybe_unused, __be16 proxy_port, bool from_host __maybe_unused, bool ipv4 __maybe_unused)" startline="190" endline="220">
static __always_inline int __ctx_redirect_to_proxy (struct  __ctx_buff *ctx, void * tuple __maybe_unused, __be16 proxy_port, bool from_host __maybe_unused, bool ipv4 __maybe_unused)
{
    int result __maybe_unused = CTX_ACT_OK;

#ifdef ENABLE_TPROXY
    if (!from_host)
        ctx->mark |= MARK_MAGIC_TO_PROXY;
    else

#endif
        ctx->mark = MARK_MAGIC_TO_PROXY | proxy_port << 16;
    cilium_dbg (ctx, DBG_CAPTURE_PROXY_PRE, proxy_port, 0);

#ifdef ENABLE_TPROXY
    if (proxy_port && !from_host) {

#ifdef ENABLE_IPV4
        if (ipv4)
            result = ctx_redirect_to_proxy_ingress4 (ctx, tuple, proxy_port);

#endif /* ENABLE_IPV4 */

#ifdef ENABLE_IPV6
        if (!ipv4)
            result = ctx_redirect_to_proxy_ingress6 (ctx, tuple, proxy_port);

#endif /* ENABLE_IPV6 */
    }

#endif /* ENABLE_TPROXY */
    ctx_change_type (ctx, PACKET_HOST);
    return result;
}
</source>
<source file="/home/sayandes/opened_extraction/examples/cilium/lib/proxy.h" funcheader="static __always_inline int ctx_redirect_to_proxy4 (struct  __ctx_buff *ctx, void * tuple __maybe_unused, __be16 proxy_port, bool from_host __maybe_unused)" startline="223" endline="228">
static __always_inline int ctx_redirect_to_proxy4 (struct  __ctx_buff *ctx, void * tuple __maybe_unused, __be16 proxy_port, bool from_host __maybe_unused)
{
    return __ctx_redirect_to_proxy (ctx, tuple, proxy_port, from_host, true);
}
</source>
<source file="/home/sayandes/opened_extraction/examples/cilium/lib/proxy.h" funcheader="static __always_inline int ctx_redirect_to_proxy6 (struct  __ctx_buff *ctx, void * tuple __maybe_unused, __be16 proxy_port, bool from_host __maybe_unused)" startline="232" endline="237">
static __always_inline int ctx_redirect_to_proxy6 (struct  __ctx_buff *ctx, void * tuple __maybe_unused, __be16 proxy_port, bool from_host __maybe_unused)
{
    return __ctx_redirect_to_proxy (ctx, tuple, proxy_port, from_host, false);
}
</source>
<source file="/home/sayandes/opened_extraction/examples/cilium/lib/proxy.h" funcheader="static __always_inline int ctx_redirect_to_proxy_first (struct  __ctx_buff *ctx, __be16 proxy_port)" startline="280" endline="337">
static __always_inline int ctx_redirect_to_proxy_first (struct  __ctx_buff *ctx, __be16 proxy_port)
{
    int ret = CTX_ACT_OK;

#if defined(ENABLE_TPROXY)
    __u16 proto;
    if (!proxy_port)
        goto mark;
    if (!validate_ethertype (ctx, &proto))
        return DROP_UNSUPPORTED_L2;
    ret = DROP_UNKNOWN_L3;
    switch (proto) {

#ifdef ENABLE_IPV6
    case bpf_htons (ETH_P_IPV6) :
        {
            struct ipv6_ct_tuple tuple;
            ret = extract_tuple6 (ctx, & tuple);
            if (ret < 0)
                return ret;
            ret = ctx_redirect_to_proxy_ingress6 (ctx, & tuple, proxy_port);
            break;
        }

#endif /* ENABLE_IPV6 */

#ifdef ENABLE_IPV4
    case bpf_htons (ETH_P_IP) :
        {
            struct ipv4_ct_tuple tuple;
            ret = extract_tuple4 (ctx, & tuple);
            if (ret < 0)
                return ret;
            ret = ctx_redirect_to_proxy_ingress4 (ctx, & tuple, proxy_port);
            break;
        }

#endif /* ENABLE_IPV4 */
    default :
        goto out;
    }

#endif /* ENABLE_TPROXY */
mark :
    __maybe_unused cilium_dbg (ctx, DBG_CAPTURE_PROXY_POST, proxy_port, 0);
    ctx->mark = MARK_MAGIC_TO_PROXY | (proxy_port << 16);
    ctx_change_type (ctx, PACKET_HOST);
out :
    __maybe_unused
    return ret;
}
</source>
<source file="/home/sayandes/opened_extraction/examples/cilium/lib/proxy.h" funcheader="static __always_inline bool tc_index_skip_ingress_proxy (struct  __ctx_buff *ctx)" startline="342" endline="351">
static __always_inline bool tc_index_skip_ingress_proxy (struct  __ctx_buff *ctx)
{
    volatile __u32 tc_index = ctx->tc_index;

#ifdef DEBUG
    if (tc_index & TC_INDEX_F_SKIP_INGRESS_PROXY)
        cilium_dbg (ctx, DBG_SKIP_PROXY, tc_index, 0);

#endif
    return tc_index & TC_INDEX_F_SKIP_INGRESS_PROXY;
}
</source>
<source file="/home/sayandes/opened_extraction/examples/cilium/lib/proxy.h" funcheader="static __always_inline bool tc_index_skip_egress_proxy (struct  __ctx_buff *ctx)" startline="356" endline="365">
static __always_inline bool tc_index_skip_egress_proxy (struct  __ctx_buff *ctx)
{
    volatile __u32 tc_index = ctx->tc_index;

#ifdef DEBUG
    if (tc_index & TC_INDEX_F_SKIP_EGRESS_PROXY)
        cilium_dbg (ctx, DBG_SKIP_PROXY, tc_index, 0);

#endif
    return tc_index & TC_INDEX_F_SKIP_EGRESS_PROXY;
}
</source>
</doc>
