<?xml version="1.0"?>
<doc>
<source file="/home/palani/github/opened_extraction/examples/cilium/bpf_sock.c" funcheader="static __always_inline __maybe_unused bool is_v4_loopback (__be32 daddr)" startline="27" endline="31">
static __always_inline __maybe_unused bool is_v4_loopback (__be32 daddr)
{
    return (daddr & bpf_htonl (0x7f000000)) == bpf_htonl (0x7f000000);
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/bpf_sock.c" funcheader="static __always_inline __maybe_unused bool is_v6_loopback (const union v6addr *daddr)" startline="33" endline="39">
static __always_inline __maybe_unused bool is_v6_loopback (const union v6addr *daddr)
{
    union v6addr loopback = {
        .addr [15] = 1,}
    ;
    return ipv6_addrcmp (&loopback, daddr) == 0;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/bpf_sock.c" funcheader="static __always_inline __maybe_unused __be16 ctx_dst_port (const struct bpf_sock_addr *ctx)" startline="42" endline="48">
static __always_inline __maybe_unused __be16 ctx_dst_port (const struct bpf_sock_addr *ctx)
{
    volatile __u32 dport = ctx->user_port;
    return (__be16) dport;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/bpf_sock.c" funcheader="static __always_inline __maybe_unused __be16 ctx_src_port (const struct bpf_sock *ctx)" startline="50" endline="56">
static __always_inline __maybe_unused __be16 ctx_src_port (const struct bpf_sock *ctx)
{
    volatile __u16 sport = (__u16) ctx->src_port;
    return (__be16) bpf_htons (sport);
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/bpf_sock.c" funcheader="static __always_inline __maybe_unused void ctx_set_port (struct bpf_sock_addr *ctx, __be16 dport)" startline="58" endline="62">
static __always_inline __maybe_unused void ctx_set_port (struct bpf_sock_addr *ctx, __be16 dport)
{
    ctx->user_port = (__u32) dport;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/bpf_sock.c" funcheader="static __always_inline __maybe_unused bool task_in_extended_hostns (void)" startline="64" endline="72">
static __always_inline __maybe_unused bool task_in_extended_hostns (void)
{

#ifdef ENABLE_MKE
    return get_cgroup_classid () == MKE_HOST;

#else
    return false;

#endif
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/bpf_sock.c" funcheader="static __always_inline __maybe_unused bool ctx_in_hostns (void * ctx __maybe_unused, __net_cookie *cookie)" startline="74" endline="89">
static __always_inline __maybe_unused bool ctx_in_hostns (void * ctx __maybe_unused, __net_cookie *cookie)
{

#ifdef BPF_HAVE_NETNS_COOKIE
    __net_cookie own_cookie = get_netns_cookie (ctx);
    if (cookie)
        *cookie = own_cookie;
    return own_cookie == HOST_NETNS_COOKIE || task_in_extended_hostns ();

#else
    if (cookie)
        *cookie = 0;
    return true;

#endif
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/bpf_sock.c" funcheader="static __always_inline __maybe_unused __sock_cookie sock_local_cookie (struct bpf_sock_addr *ctx)" startline="91" endline="119">
static __always_inline __maybe_unused __sock_cookie sock_local_cookie (struct bpf_sock_addr *ctx)
{

#ifdef BPF_HAVE_SOCKET_COOKIE
    return get_socket_cookie (ctx);

#else
    return ctx->protocol == IPPROTO_TCP ? get_prandom_u32 () : 0;

#endif
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/bpf_sock.c" funcheader="static __always_inline __maybe_unused bool sock_is_health_check (struct bpf_sock_addr * ctx __maybe_unused)" startline="121" endline="131">
static __always_inline __maybe_unused bool sock_is_health_check (struct bpf_sock_addr * ctx __maybe_unused)
{

#ifdef ENABLE_HEALTH_CHECK
    int val;
    if (!get_socket_opt (ctx, SOL_SOCKET, SO_MARK, &val, sizeof (val)))
        return val == MARK_MAGIC_HEALTH;

#endif
    return false;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/bpf_sock.c" funcheader="static __always_inline __maybe_unused __u64 sock_select_slot (struct bpf_sock_addr *ctx)" startline="133" endline="138">
static __always_inline __maybe_unused __u64 sock_select_slot (struct bpf_sock_addr *ctx)
{
    return ctx->protocol == IPPROTO_TCP ? get_prandom_u32 () : sock_local_cookie (ctx);
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/bpf_sock.c" funcheader="static __always_inline __maybe_unused bool sock_proto_enabled (__u32 proto)" startline="140" endline="156">
static __always_inline __maybe_unused bool sock_proto_enabled (__u32 proto)
{
    switch (proto) {

#ifdef ENABLE_SOCKET_LB_TCP
    case IPPROTO_TCP :
        return true;

#endif /* ENABLE_SOCKET_LB_TCP */

#ifdef ENABLE_SOCKET_LB_UDP
    case IPPROTO_UDPLITE :
    case IPPROTO_UDP :
        return true;

#endif /* ENABLE_SOCKET_LB_UDP */
    default :
        return false;
    }
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/bpf_sock.c" funcheader="static __always_inline int sock4_update_revnat (struct bpf_sock_addr *ctx, const struct lb4_backend *backend, const struct lb4_key *orig_key, __u16 rev_nat_id)" startline="168" endline="190">
static __always_inline int sock4_update_revnat (struct bpf_sock_addr *ctx, const struct lb4_backend *backend, const struct lb4_key *orig_key, __u16 rev_nat_id)
{
    struct ipv4_revnat_entry val = {}, *tmp;
    struct ipv4_revnat_tuple key = {}
    ;
    int ret = 0;
    key.cookie = sock_local_cookie (ctx);
    key.address = backend->address;
    key.port = backend->port;
    val.address = orig_key->address;
    val.port = orig_key->dport;
    val.rev_nat_index = rev_nat_id;
    tmp = map_lookup_elem (& LB4_REVERSE_NAT_SK_MAP, & key);
    if (!tmp || memcmp (tmp, &val, sizeof (val)))
        ret = map_update_elem (&LB4_REVERSE_NAT_SK_MAP, &key, &val, 0);
    return ret;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/bpf_sock.c" funcheader="static __always_inline int sock4_update_revnat (struct bpf_sock_addr * ctx __maybe_unused, struct lb4_backend * backend __maybe_unused, struct lb4_key * orig_key __maybe_unused, __u16 rev_nat_id __maybe_unused)" startline="192" endline="199">
static __always_inline int sock4_update_revnat (struct bpf_sock_addr * ctx __maybe_unused, struct lb4_backend * backend __maybe_unused, struct lb4_key * orig_key __maybe_unused, __u16 rev_nat_id __maybe_unused)
{
    return 0;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/bpf_sock.c" funcheader="static __always_inline bool sock4_skip_xlate (struct lb4_service *svc, __be32 address)" startline="202" endline="218">
static __always_inline bool sock4_skip_xlate (struct lb4_service *svc, __be32 address)
{
    if (lb4_to_lb6_service (svc))
        return true;
    if (lb4_svc_is_external_ip (svc) || (lb4_svc_is_hostport (svc) && !is_v4_loopback (address))) {
        struct remote_endpoint_info *info;
        info = ipcache_lookup4 (& IPCACHE_MAP, address, V4_CACHE_KEY_LEN);
        if (info == NULL || info->sec_label != HOST_ID)
            return true;
    }
    return false;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/bpf_sock.c" funcheader="static __always_inline struct lb4_service *sock4_wildcard_lookup (struct lb4_key * key __maybe_unused, const bool include_remote_hosts __maybe_unused, const bool inv_match __maybe_unused, const bool in_hostns __maybe_unused)" startline="221" endline="251">
static __always_inline struct lb4_service *sock4_wildcard_lookup (struct lb4_key * key __maybe_unused, const bool include_remote_hosts __maybe_unused, const bool inv_match __maybe_unused, const bool in_hostns __maybe_unused)
{
    struct remote_endpoint_info *info;
    __u16 service_port;
    service_port = bpf_ntohs (key -> dport);
    if ((service_port < NODEPORT_PORT_MIN || service_port > NODEPORT_PORT_MAX) ^ inv_match)
        return NULL;
    if (in_hostns && is_v4_loopback (key->address))
        goto wildcard_lookup;
    info = ipcache_lookup4 (& IPCACHE_MAP, key -> address, V4_CACHE_KEY_LEN);
    if (info != NULL && (info->sec_label == HOST_ID || (include_remote_hosts && identity_is_remote_node (info->sec_label))))
        goto wildcard_lookup;
    return NULL;
wildcard_lookup :
    key->address = 0;
    return lb4_lookup_service (key, true);
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/bpf_sock.c" funcheader="static __always_inline struct lb4_service *sock4_wildcard_lookup_full (struct lb4_key * key __maybe_unused, const bool in_hostns __maybe_unused)" startline="254" endline="272">
static __always_inline struct lb4_service *sock4_wildcard_lookup_full (struct lb4_key * key __maybe_unused, const bool in_hostns __maybe_unused)
{
    struct lb4_service *svc = NULL;

#ifdef ENABLE_NODEPORT
    svc = sock4_wildcard_lookup (key, true, false, in_hostns);
    if (svc && !lb4_svc_is_nodeport (svc))
        svc = NULL;
    if (!svc) {
        svc = sock4_wildcard_lookup (key, false, true, in_hostns);
        if (svc && !lb4_svc_is_hostport (svc))
            svc = NULL;
    }

#endif /* ENABLE_NODEPORT */
    return svc;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/bpf_sock.c" funcheader="static __always_inline bool sock4_skip_xlate_if_same_netns (struct bpf_sock_addr * ctx __maybe_unused, const struct lb4_backend * backend __maybe_unused)" startline="293" endline="321">
static __always_inline bool sock4_skip_xlate_if_same_netns (struct bpf_sock_addr * ctx __maybe_unused, const struct lb4_backend * backend __maybe_unused)
{

#ifdef BPF_HAVE_SOCKET_LOOKUP
    struct bpf_sock_tuple tuple = {
        .ipv4.daddr = backend->address,
        .ipv4.dport = backend->port,}
    ;
    struct bpf_sock *sk = NULL;
    switch (ctx->protocol) {
    case IPPROTO_TCP :
        sk = sk_lookup_tcp (ctx, &tuple, sizeof (tuple.ipv4), BPF_F_CURRENT_NETNS, 0);
        break;
    case IPPROTO_UDP :
        sk = sk_lookup_udp (ctx, &tuple, sizeof (tuple.ipv4), BPF_F_CURRENT_NETNS, 0);
        break;
    }
    if (sk) {
        sk_release (sk);
        return true;
    }

#endif /* BPF_HAVE_SOCKET_LOOKUP */
    return false;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/bpf_sock.c" funcheader="static __always_inline int __sock4_xlate_fwd (struct bpf_sock_addr *ctx, struct bpf_sock_addr *ctx_full, const bool udp_only)" startline="323" endline="458">
static __always_inline int __sock4_xlate_fwd (struct bpf_sock_addr *ctx, struct bpf_sock_addr *ctx_full, const bool udp_only)
{
    union lb4_affinity_client_id id;
    const bool in_hostns = ctx_in_hostns (ctx_full, & id.client_cookie);
    struct lb4_backend *backend;
    struct lb4_service *svc;
    struct lb4_key key = {
        .address = ctx->user_ip4,
        .dport = ctx_dst_port (ctx),}, orig_key = key;
    struct lb4_service *backend_slot;
    bool backend_from_affinity = false;
    __u32 backend_id = 0;

#ifdef ENABLE_L7_LB
    struct lb4_backend l7backend;

#endif
    if (is_defined (ENABLE_SOCKET_LB_HOST_ONLY) && !in_hostns)
        return -ENXIO;
    if (!udp_only && !sock_proto_enabled (ctx->protocol))
        return -ENOTSUP;
    svc = lb4_lookup_service (& key, true);
    if (!svc)
        svc = sock4_wildcard_lookup_full (&key, in_hostns);
    if (!svc)
        return -ENXIO;
    if (sock4_skip_xlate (svc, orig_key.address))
        return -EPERM;

#ifdef ENABLE_L7_LB
    if (lb4_svc_is_l7loadbalancer (svc)) {
        if (is_defined (BPF_HAVE_NETNS_COOKIE) && in_hostns) {
            l7backend.address = bpf_htonl (0x7f000001);
            l7backend.port = (__be16) svc->l7_lb_proxy_port;
            l7backend.proto = 0;
            l7backend.flags = 0;
            backend = &l7backend;
            goto out;
        }
        return 0;
    }

#endif /* ENABLE_L7_LB */
    if (lb4_svc_is_affinity (svc)) {
        backend_id = lb4_affinity_backend_id_by_netns (svc, & id);
        backend_from_affinity = true;
        if (backend_id != 0) {
            backend = __lb4_lookup_backend (backend_id);
            if (!backend)
                backend_id = 0;
        }
    }
    if (backend_id == 0) {
        backend_from_affinity = false;
        key.backend_slot = (sock_select_slot (ctx_full) % svc->count) + 1;
        backend_slot = __lb4_lookup_backend_slot (& key);
        if (!backend_slot) {
            update_metrics (0, METRIC_EGRESS, REASON_LB_NO_BACKEND_SLOT);
            return -ENOENT;
        }
        backend_id = backend_slot->backend_id;
        backend = __lb4_lookup_backend (backend_id);
    }
    if (!backend) {
        update_metrics (0, METRIC_EGRESS, REASON_LB_NO_BACKEND);
        return -ENOENT;
    }
    if (lb4_svc_is_localredirect (svc) && sock4_skip_xlate_if_same_netns (ctx_full, backend))
        return -ENXIO;
    if (lb4_svc_is_affinity (svc) && !backend_from_affinity)
        lb4_update_affinity_by_netns (svc, &id, backend_id);

#ifdef ENABLE_L7_LB
out :

#endif
    if (sock4_update_revnat (ctx_full, backend, &orig_key, svc->rev_nat_index) < 0) {
        update_metrics (0, METRIC_EGRESS, REASON_LB_REVNAT_UPDATE);
        return -ENOMEM;
    }
    ctx->user_ip4 = backend->address;
    ctx_set_port (ctx, backend->port);
    return 0;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/bpf_sock.c" funcheader="static __always_inline int __sock4_health_fwd (struct bpf_sock_addr * ctx __maybe_unused)" startline="460" endline="476">
static __always_inline int __sock4_health_fwd (struct bpf_sock_addr * ctx __maybe_unused)
{
    int ret = lb_skip_l4_dnat () ? SYS_PROCEED : SYS_REJECT;

#ifdef ENABLE_HEALTH_CHECK
    __sock_cookie key = get_socket_cookie (ctx);
    struct lb4_health *val = NULL;
    if (!lb_skip_l4_dnat ())
        val = map_lookup_elem (&LB4_HEALTH_MAP, &key);
    if (val) {
        ctx_set_port (ctx, val->peer.port);
        ret = SYS_PROCEED;
    }

#endif /* ENABLE_HEALTH_CHECK */
    return ret;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/bpf_sock.c" funcheader="int sock4_connect (struct bpf_sock_addr *ctx)" startline="479" endline="486">
int sock4_connect (struct bpf_sock_addr *ctx)
{
    if (sock_is_health_check (ctx))
        return __sock4_health_fwd (ctx);
    __sock4_xlate_fwd (ctx, ctx, false);
    return SYS_PROCEED;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/bpf_sock.c" funcheader="static __always_inline int __sock4_post_bind (struct bpf_sock *ctx, struct bpf_sock *ctx_full)" startline="489" endline="520">
static __always_inline int __sock4_post_bind (struct bpf_sock *ctx, struct bpf_sock *ctx_full)
{
    struct lb4_service *svc;
    struct lb4_key key = {
        .address = ctx->src_ip4,
        .dport = ctx_src_port (ctx),}
    ;
    if (!sock_proto_enabled (ctx->protocol) || !ctx_in_hostns (ctx_full, NULL))
        return 0;
    svc = lb4_lookup_service (& key, true);
    if (!svc)
        svc = sock4_wildcard_lookup (&key, false, false, true);
    if (svc && (lb4_svc_is_nodeport (svc) || lb4_svc_is_external_ip (svc) || lb4_svc_is_loadbalancer (svc)))
        return -EADDRINUSE;
    return 0;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/bpf_sock.c" funcheader="int sock4_post_bind (struct bpf_sock *ctx)" startline="523" endline="529">
int sock4_post_bind (struct bpf_sock *ctx)
{
    if (__sock4_post_bind (ctx, ctx) < 0)
        return SYS_REJECT;
    return SYS_PROCEED;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/bpf_sock.c" funcheader="static __always_inline void sock4_auto_bind (struct bpf_sock_addr *ctx)" startline="533" endline="537">
static __always_inline void sock4_auto_bind (struct bpf_sock_addr *ctx)
{
    ctx->user_ip4 = 0;
    ctx_set_port (ctx, 0);
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/bpf_sock.c" funcheader="static __always_inline int __sock4_pre_bind (struct bpf_sock_addr *ctx, struct bpf_sock_addr *ctx_full)" startline="539" endline="559">
static __always_inline int __sock4_pre_bind (struct bpf_sock_addr *ctx, struct bpf_sock_addr *ctx_full)
{
    __sock_cookie key = get_socket_cookie (ctx_full);
    struct lb4_health val = {
        .peer = {
            .address = ctx->user_ip4,
            .port = ctx_dst_port (ctx),
            .proto = (__u8) ctx->protocol,},}
    ;
    int ret;
    ret = map_update_elem (& LB4_HEALTH_MAP, & key, & val, 0);
    if (!ret)
        sock4_auto_bind (ctx);
    return ret;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/bpf_sock.c" funcheader="int sock4_pre_bind (struct bpf_sock_addr *ctx)" startline="562" endline="573">
int sock4_pre_bind (struct bpf_sock_addr *ctx)
{
    int ret = SYS_PROCEED;
    if (!sock_proto_enabled (ctx->protocol) || !ctx_in_hostns (ctx, NULL))
        return ret;
    if (sock_is_health_check (ctx) && __sock4_pre_bind (ctx, ctx))
        ret = SYS_REJECT;
    return ret;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/bpf_sock.c" funcheader="static __always_inline int __sock4_xlate_rev (struct bpf_sock_addr *ctx, struct bpf_sock_addr *ctx_full)" startline="577" endline="611">
static __always_inline int __sock4_xlate_rev (struct bpf_sock_addr *ctx, struct bpf_sock_addr *ctx_full)
{
    struct ipv4_revnat_entry *val;
    struct ipv4_revnat_tuple key = {
        .cookie = sock_local_cookie (ctx_full),
        .address = ctx->user_ip4,
        .port = ctx_dst_port (ctx),}
    ;
    val = map_lookup_elem (& LB4_REVERSE_NAT_SK_MAP, & key);
    if (val) {
        struct lb4_service *svc;
        struct lb4_key svc_key = {
            .address = val->address,
            .dport = val->port,}
        ;
        svc = lb4_lookup_service (& svc_key, true);
        if (!svc)
            svc = sock4_wildcard_lookup_full (&svc_key, ctx_in_hostns (ctx_full, NULL));
        if (!svc || svc->rev_nat_index != val->rev_nat_index) {
            map_delete_elem (&LB4_REVERSE_NAT_SK_MAP, &key);
            update_metrics (0, METRIC_INGRESS, REASON_LB_REVNAT_STALE);
            return -ENOENT;
        }
        ctx->user_ip4 = val->address;
        ctx_set_port (ctx, val->port);
        return 0;
    }
    return -ENXIO;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/bpf_sock.c" funcheader="int sock4_sendmsg (struct bpf_sock_addr *ctx)" startline="614" endline="618">
int sock4_sendmsg (struct bpf_sock_addr *ctx)
{
    __sock4_xlate_fwd (ctx, ctx, true);
    return SYS_PROCEED;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/bpf_sock.c" funcheader="int sock4_recvmsg (struct bpf_sock_addr *ctx)" startline="621" endline="625">
int sock4_recvmsg (struct bpf_sock_addr *ctx)
{
    __sock4_xlate_rev (ctx, ctx);
    return SYS_PROCEED;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/bpf_sock.c" funcheader="int sock4_getpeername (struct bpf_sock_addr *ctx)" startline="628" endline="632">
int sock4_getpeername (struct bpf_sock_addr *ctx)
{
    __sock4_xlate_rev (ctx, ctx);
    return SYS_PROCEED;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/bpf_sock.c" funcheader="static __always_inline int sock6_update_revnat (struct bpf_sock_addr *ctx, const struct lb6_backend *backend, const struct lb6_key *orig_key, __u16 rev_nat_index)" startline="647" endline="669">
static __always_inline int sock6_update_revnat (struct bpf_sock_addr *ctx, const struct lb6_backend *backend, const struct lb6_key *orig_key, __u16 rev_nat_index)
{
    struct ipv6_revnat_entry val = {}, *tmp;
    struct ipv6_revnat_tuple key = {}
    ;
    int ret = 0;
    key.cookie = sock_local_cookie (ctx);
    key.address = backend->address;
    key.port = backend->port;
    val.address = orig_key->address;
    val.port = orig_key->dport;
    val.rev_nat_index = rev_nat_index;
    tmp = map_lookup_elem (& LB6_REVERSE_NAT_SK_MAP, & key);
    if (!tmp || memcmp (tmp, &val, sizeof (val)))
        ret = map_update_elem (&LB6_REVERSE_NAT_SK_MAP, &key, &val, 0);
    return ret;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/bpf_sock.c" funcheader="static __always_inline int sock6_update_revnat (struct bpf_sock_addr * ctx __maybe_unused, struct lb6_backend * backend __maybe_unused, struct lb6_key * orig_key __maybe_unused, __u16 rev_nat_index __maybe_unused)" startline="671" endline="678">
static __always_inline int sock6_update_revnat (struct bpf_sock_addr * ctx __maybe_unused, struct lb6_backend * backend __maybe_unused, struct lb6_key * orig_key __maybe_unused, __u16 rev_nat_index __maybe_unused)
{
    return 0;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/bpf_sock.c" funcheader="static __always_inline void ctx_get_v6_address (const struct bpf_sock_addr *ctx, union v6addr *addr)" startline="682" endline="693">
static __always_inline void ctx_get_v6_address (const struct bpf_sock_addr *ctx, union v6addr *addr)
{
    addr->p1 = ctx->user_ip6[0];
    barrier ();
    addr->p2 = ctx->user_ip6[1];
    barrier ();
    addr->p3 = ctx->user_ip6[2];
    barrier ();
    addr->p4 = ctx->user_ip6[3];
    barrier ();
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/bpf_sock.c" funcheader="static __always_inline void ctx_get_v6_src_address (const struct bpf_sock *ctx, union v6addr *addr)" startline="696" endline="707">
static __always_inline void ctx_get_v6_src_address (const struct bpf_sock *ctx, union v6addr *addr)
{
    addr->p1 = ctx->src_ip6[0];
    barrier ();
    addr->p2 = ctx->src_ip6[1];
    barrier ();
    addr->p3 = ctx->src_ip6[2];
    barrier ();
    addr->p4 = ctx->src_ip6[3];
    barrier ();
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/bpf_sock.c" funcheader="static __always_inline void ctx_set_v6_address (struct bpf_sock_addr *ctx, const union v6addr *addr)" startline="710" endline="721">
static __always_inline void ctx_set_v6_address (struct bpf_sock_addr *ctx, const union v6addr *addr)
{
    ctx->user_ip6[0] = addr->p1;
    barrier ();
    ctx->user_ip6[1] = addr->p2;
    barrier ();
    ctx->user_ip6[2] = addr->p3;
    barrier ();
    ctx->user_ip6[3] = addr->p4;
    barrier ();
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/bpf_sock.c" funcheader="static __always_inline __maybe_unused bool sock6_skip_xlate (struct lb6_service *svc, const union v6addr *address)" startline="723" endline="739">
static __always_inline __maybe_unused bool sock6_skip_xlate (struct lb6_service *svc, const union v6addr *address)
{
    if (lb6_to_lb4_service (svc))
        return true;
    if (lb6_svc_is_external_ip (svc) || (lb6_svc_is_hostport (svc) && !is_v6_loopback (address))) {
        struct remote_endpoint_info *info;
        info = ipcache_lookup6 (& IPCACHE_MAP, address, V6_CACHE_KEY_LEN);
        if (info == NULL || info->sec_label != HOST_ID)
            return true;
    }
    return false;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/bpf_sock.c" funcheader="static __always_inline __maybe_unused struct lb6_service *sock6_wildcard_lookup (struct lb6_key * key __maybe_unused, const bool include_remote_hosts __maybe_unused, const bool inv_match __maybe_unused, const bool in_hostns __maybe_unused)" startline="742" endline="772">
static __always_inline __maybe_unused struct lb6_service *sock6_wildcard_lookup (struct lb6_key * key __maybe_unused, const bool include_remote_hosts __maybe_unused, const bool inv_match __maybe_unused, const bool in_hostns __maybe_unused)
{
    struct remote_endpoint_info *info;
    __u16 service_port;
    service_port = bpf_ntohs (key -> dport);
    if ((service_port < NODEPORT_PORT_MIN || service_port > NODEPORT_PORT_MAX) ^ inv_match)
        return NULL;
    if (in_hostns && is_v6_loopback (&key->address))
        goto wildcard_lookup;
    info = ipcache_lookup6 (& IPCACHE_MAP, & key -> address, V6_CACHE_KEY_LEN);
    if (info != NULL && (info->sec_label == HOST_ID || (include_remote_hosts && identity_is_remote_node (info->sec_label))))
        goto wildcard_lookup;
    return NULL;
wildcard_lookup :
    memset (&key->address, 0, sizeof (key->address));
    return lb6_lookup_service (key, true);
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/bpf_sock.c" funcheader="static __always_inline __maybe_unused struct lb6_service *sock6_wildcard_lookup_full (struct lb6_key * key __maybe_unused, const bool in_hostns __maybe_unused)" startline="775" endline="793">
static __always_inline __maybe_unused struct lb6_service *sock6_wildcard_lookup_full (struct lb6_key * key __maybe_unused, const bool in_hostns __maybe_unused)
{
    struct lb6_service *svc = NULL;

#ifdef ENABLE_NODEPORT
    svc = sock6_wildcard_lookup (key, true, false, in_hostns);
    if (svc && !lb6_svc_is_nodeport (svc))
        svc = NULL;
    if (!svc) {
        svc = sock6_wildcard_lookup (key, false, true, in_hostns);
        if (svc && !lb6_svc_is_hostport (svc))
            svc = NULL;
    }

#endif /* ENABLE_NODEPORT */
    return svc;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/bpf_sock.c" funcheader="static __always_inline int sock6_xlate_v4_in_v6 (struct bpf_sock_addr * ctx __maybe_unused, const bool udp_only __maybe_unused)" startline="795" endline="824">
static __always_inline int sock6_xlate_v4_in_v6 (struct bpf_sock_addr * ctx __maybe_unused, const bool udp_only __maybe_unused)
{

#ifdef ENABLE_IPV4
    struct bpf_sock_addr fake_ctx;
    union v6addr addr6;
    int ret;
    ctx_get_v6_address (ctx, &addr6);
    if (!is_v4_in_v6 (&addr6))
        return -ENXIO;
    memset (&fake_ctx, 0, sizeof (fake_ctx));
    fake_ctx.protocol = ctx->protocol;
    fake_ctx.user_ip4 = addr6.p4;
    fake_ctx.user_port = ctx_dst_port (ctx);
    ret = __sock4_xlate_fwd (& fake_ctx, ctx, udp_only);
    if (ret < 0)
        return ret;
    build_v4_in_v6 (&addr6, fake_ctx.user_ip4);
    ctx_set_v6_address (ctx, &addr6);
    ctx_set_port (ctx, (__u16) fake_ctx.user_port);
    return 0;

#endif /* ENABLE_IPV4 */
    return -ENXIO;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/bpf_sock.c" funcheader="static __always_inline int sock6_post_bind_v4_in_v6 (struct bpf_sock * ctx __maybe_unused)" startline="827" endline="846">
static __always_inline int sock6_post_bind_v4_in_v6 (struct bpf_sock * ctx __maybe_unused)
{

#ifdef ENABLE_IPV4
    struct bpf_sock fake_ctx;
    union v6addr addr6;
    ctx_get_v6_src_address (ctx, &addr6);
    if (!is_v4_in_v6 (&addr6))
        return 0;
    memset (&fake_ctx, 0, sizeof (fake_ctx));
    fake_ctx.protocol = ctx->protocol;
    fake_ctx.src_ip4 = addr6.p4;
    fake_ctx.src_port = ctx->src_port;
    return __sock4_post_bind (&fake_ctx, ctx);

#endif /* ENABLE_IPV4 */
    return 0;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/bpf_sock.c" funcheader="static __always_inline int __sock6_post_bind (struct bpf_sock *ctx)" startline="848" endline="874">
static __always_inline int __sock6_post_bind (struct bpf_sock *ctx)
{
    struct lb6_service *svc;
    struct lb6_key key = {
        .dport = ctx_src_port (ctx),}
    ;
    if (!sock_proto_enabled (ctx->protocol) || !ctx_in_hostns (ctx, NULL))
        return 0;
    ctx_get_v6_src_address (ctx, &key.address);
    svc = lb6_lookup_service (& key, true);
    if (!svc) {
        svc = sock6_wildcard_lookup (& key, false, false, true);
        if (!svc)
            return sock6_post_bind_v4_in_v6 (ctx);
    }
    if (svc && (lb6_svc_is_nodeport (svc) || lb6_svc_is_external_ip (svc) || lb6_svc_is_loadbalancer (svc)))
        return -EADDRINUSE;
    return 0;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/bpf_sock.c" funcheader="int sock6_post_bind (struct bpf_sock *ctx)" startline="877" endline="883">
int sock6_post_bind (struct bpf_sock *ctx)
{
    if (__sock6_post_bind (ctx) < 0)
        return SYS_REJECT;
    return SYS_PROCEED;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/bpf_sock.c" funcheader="static __always_inline int sock6_pre_bind_v4_in_v6 (struct bpf_sock_addr * ctx __maybe_unused)" startline="887" endline="911">
static __always_inline int sock6_pre_bind_v4_in_v6 (struct bpf_sock_addr * ctx __maybe_unused)
{

#ifdef ENABLE_IPV4
    struct bpf_sock_addr fake_ctx;
    union v6addr addr6;
    int ret;
    ctx_get_v6_address (ctx, &addr6);
    memset (&fake_ctx, 0, sizeof (fake_ctx));
    fake_ctx.protocol = ctx->protocol;
    fake_ctx.user_ip4 = addr6.p4;
    fake_ctx.user_port = ctx_dst_port (ctx);
    ret = __sock4_pre_bind (& fake_ctx, ctx);
    if (ret < 0)
        return ret;
    build_v4_in_v6 (&addr6, fake_ctx.user_ip4);
    ctx_set_v6_address (ctx, &addr6);
    ctx_set_port (ctx, (__u16) fake_ctx.user_port);

#endif /* ENABLE_IPV4 */
    return 0;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/bpf_sock.c" funcheader="static __always_inline void sock6_auto_bind (struct bpf_sock_addr *ctx)" startline="914" endline="920">
static __always_inline void sock6_auto_bind (struct bpf_sock_addr *ctx)
{
    union v6addr zero = {}
    ;
    ctx_set_v6_address (ctx, &zero);
    ctx_set_port (ctx, 0);
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/bpf_sock.c" funcheader="static __always_inline int __sock6_pre_bind (struct bpf_sock_addr *ctx)" startline="923" endline="944">
static __always_inline int __sock6_pre_bind (struct bpf_sock_addr *ctx)
{
    __sock_cookie key __maybe_unused;
    struct lb6_health val = {
        .peer = {
            .port = ctx_dst_port (ctx),
            .proto = (__u8) ctx->protocol,},}
    ;
    int ret = 0;
    ctx_get_v6_address (ctx, &val.peer.address);
    if (is_v4_in_v6 (&val.peer.address))
        return sock6_pre_bind_v4_in_v6 (ctx);

#ifdef ENABLE_IPV6
    key = get_socket_cookie (ctx);
    ret = map_update_elem (& LB6_HEALTH_MAP, & key, & val, 0);
    if (!ret)
        sock6_auto_bind (ctx);

#endif
    return ret;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/bpf_sock.c" funcheader="int sock6_pre_bind (struct bpf_sock_addr *ctx)" startline="947" endline="958">
int sock6_pre_bind (struct bpf_sock_addr *ctx)
{
    int ret = SYS_PROCEED;
    if (!sock_proto_enabled (ctx->protocol) || !ctx_in_hostns (ctx, NULL))
        return ret;
    if (sock_is_health_check (ctx) && __sock6_pre_bind (ctx))
        ret = SYS_REJECT;
    return ret;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/bpf_sock.c" funcheader="static __always_inline int __sock6_xlate_fwd (struct bpf_sock_addr *ctx, const bool udp_only)" startline="961" endline="1062">
static __always_inline int __sock6_xlate_fwd (struct bpf_sock_addr *ctx, const bool udp_only)
{

#ifdef ENABLE_IPV6
    union lb6_affinity_client_id id;
    const bool in_hostns = ctx_in_hostns (ctx, & id.client_cookie);
    struct lb6_backend *backend;
    struct lb6_service *svc;
    struct lb6_key key = {
        .dport = ctx_dst_port (ctx),}, orig_key;
    struct lb6_service *backend_slot;
    bool backend_from_affinity = false;
    __u32 backend_id = 0;

#ifdef ENABLE_L7_LB
    struct lb6_backend l7backend;

#endif
    if (is_defined (ENABLE_SOCKET_LB_HOST_ONLY) && !in_hostns)
        return -ENXIO;
    if (!udp_only && !sock_proto_enabled (ctx->protocol))
        return -ENOTSUP;
    ctx_get_v6_address (ctx, &key.address);
    memcpy (&orig_key, &key, sizeof (key));
    svc = lb6_lookup_service (& key, true);
    if (!svc)
        svc = sock6_wildcard_lookup_full (&key, in_hostns);
    if (!svc)
        return sock6_xlate_v4_in_v6 (ctx, udp_only);
    if (sock6_skip_xlate (svc, &orig_key.address))
        return -EPERM;

#ifdef ENABLE_L7_LB
    if (lb6_svc_is_l7loadbalancer (svc)) {
        if (is_defined (BPF_HAVE_NETNS_COOKIE) && in_hostns) {
            union v6addr loopback = {
                .addr [15] = 1,}
            ;
            l7backend.address = loopback;
            l7backend.port = (__be16) svc->l7_lb_proxy_port;
            l7backend.proto = 0;
            l7backend.flags = 0;
            backend = &l7backend;
            goto out;
        }
        return 0;
    }

#endif /* ENABLE_L7_LB */
    if (lb6_svc_is_affinity (svc)) {
        backend_id = lb6_affinity_backend_id_by_netns (svc, & id);
        backend_from_affinity = true;
        if (backend_id != 0) {
            backend = __lb6_lookup_backend (backend_id);
            if (!backend)
                backend_id = 0;
        }
    }
    if (backend_id == 0) {
        backend_from_affinity = false;
        key.backend_slot = (sock_select_slot (ctx) % svc->count) + 1;
        backend_slot = __lb6_lookup_backend_slot (& key);
        if (!backend_slot) {
            update_metrics (0, METRIC_EGRESS, REASON_LB_NO_BACKEND_SLOT);
            return -ENOENT;
        }
        backend_id = backend_slot->backend_id;
        backend = __lb6_lookup_backend (backend_id);
    }
    if (!backend) {
        update_metrics (0, METRIC_EGRESS, REASON_LB_NO_BACKEND);
        return -ENOENT;
    }
    if (lb6_svc_is_affinity (svc) && !backend_from_affinity)
        lb6_update_affinity_by_netns (svc, &id, backend_id);

#ifdef ENABLE_L7_LB
out :

#endif
    if (sock6_update_revnat (ctx, backend, &orig_key, svc->rev_nat_index) < 0) {
        update_metrics (0, METRIC_EGRESS, REASON_LB_REVNAT_UPDATE);
        return -ENOMEM;
    }
    ctx_set_v6_address (ctx, &backend->address);
    ctx_set_port (ctx, backend->port);
    return 0;

#else
    return sock6_xlate_v4_in_v6 (ctx, udp_only);

#endif /* ENABLE_IPV6 */
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/bpf_sock.c" funcheader="static __always_inline int __sock6_health_fwd (struct bpf_sock_addr * ctx __maybe_unused)" startline="1064" endline="1089">
static __always_inline int __sock6_health_fwd (struct bpf_sock_addr * ctx __maybe_unused)
{
    int ret = lb_skip_l4_dnat () ? SYS_PROCEED : SYS_REJECT;

#ifdef ENABLE_HEALTH_CHECK
    union v6addr addr6;
    ctx_get_v6_address (ctx, &addr6);
    if (is_v4_in_v6 (&addr6)) {
        return __sock4_health_fwd (ctx);
    }
    else {

#ifdef ENABLE_IPV6
        __sock_cookie key = get_socket_cookie (ctx);
        struct lb6_health *val = NULL;
        if (!lb_skip_l4_dnat ())
            val = map_lookup_elem (&LB6_HEALTH_MAP, &key);
        if (val) {
            ctx_set_port (ctx, val->peer.port);
            ret = SYS_PROCEED;
        }

#endif /* ENABLE_IPV6 */
    }

#endif /* ENABLE_HEALTH_CHECK */
    return ret;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/bpf_sock.c" funcheader="int sock6_connect (struct bpf_sock_addr *ctx)" startline="1092" endline="1099">
int sock6_connect (struct bpf_sock_addr *ctx)
{
    if (sock_is_health_check (ctx))
        return __sock6_health_fwd (ctx);
    __sock6_xlate_fwd (ctx, false);
    return SYS_PROCEED;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/bpf_sock.c" funcheader="static __always_inline int sock6_xlate_rev_v4_in_v6 (struct bpf_sock_addr * ctx __maybe_unused)" startline="1102" endline="1130">
static __always_inline int sock6_xlate_rev_v4_in_v6 (struct bpf_sock_addr * ctx __maybe_unused)
{

#ifdef ENABLE_IPV4
    struct bpf_sock_addr fake_ctx;
    union v6addr addr6;
    int ret;
    ctx_get_v6_address (ctx, &addr6);
    if (!is_v4_in_v6 (&addr6))
        return -ENXIO;
    memset (&fake_ctx, 0, sizeof (fake_ctx));
    fake_ctx.protocol = ctx->protocol;
    fake_ctx.user_ip4 = addr6.p4;
    fake_ctx.user_port = ctx_dst_port (ctx);
    ret = __sock4_xlate_rev (& fake_ctx, ctx);
    if (ret < 0)
        return ret;
    build_v4_in_v6 (&addr6, fake_ctx.user_ip4);
    ctx_set_v6_address (ctx, &addr6);
    ctx_set_port (ctx, (__u16) fake_ctx.user_port);
    return 0;

#endif /* ENABLE_IPV4 */
    return -ENXIO;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/bpf_sock.c" funcheader="static __always_inline int __sock6_xlate_rev (struct bpf_sock_addr *ctx)" startline="1132" endline="1167">
static __always_inline int __sock6_xlate_rev (struct bpf_sock_addr *ctx)
{

#ifdef ENABLE_IPV6
    struct ipv6_revnat_tuple key = {}
    ;
    struct ipv6_revnat_entry *val;
    key.cookie = sock_local_cookie (ctx);
    key.port = ctx_dst_port (ctx);
    ctx_get_v6_address (ctx, &key.address);
    val = map_lookup_elem (& LB6_REVERSE_NAT_SK_MAP, & key);
    if (val) {
        struct lb6_service *svc;
        struct lb6_key svc_key = {
            .address = val->address,
            .dport = val->port,}
        ;
        svc = lb6_lookup_service (& svc_key, true);
        if (!svc)
            svc = sock6_wildcard_lookup_full (&svc_key, ctx_in_hostns (ctx, NULL));
        if (!svc || svc->rev_nat_index != val->rev_nat_index) {
            map_delete_elem (&LB6_REVERSE_NAT_SK_MAP, &key);
            update_metrics (0, METRIC_INGRESS, REASON_LB_REVNAT_STALE);
            return -ENOENT;
        }
        ctx_set_v6_address (ctx, &val->address);
        ctx_set_port (ctx, val->port);
        return 0;
    }

#endif /* ENABLE_IPV6 */
    return sock6_xlate_rev_v4_in_v6 (ctx);
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/bpf_sock.c" funcheader="int sock6_sendmsg (struct bpf_sock_addr *ctx)" startline="1170" endline="1174">
int sock6_sendmsg (struct bpf_sock_addr *ctx)
{
    __sock6_xlate_fwd (ctx, true);
    return SYS_PROCEED;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/bpf_sock.c" funcheader="int sock6_recvmsg (struct bpf_sock_addr *ctx)" startline="1177" endline="1181">
int sock6_recvmsg (struct bpf_sock_addr *ctx)
{
    __sock6_xlate_rev (ctx);
    return SYS_PROCEED;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/bpf_sock.c" funcheader="int sock6_getpeername (struct bpf_sock_addr *ctx)" startline="1184" endline="1188">
int sock6_getpeername (struct bpf_sock_addr *ctx)
{
    __sock6_xlate_rev (ctx);
    return SYS_PROCEED;
}
</source>
</doc>
