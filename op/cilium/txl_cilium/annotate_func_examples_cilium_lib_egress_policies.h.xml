<?xml version="1.0"?>
<doc>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/egress_policies.h" funcheader="static __always_inline struct egress_gw_policy_entry *lookup_ip4_egress_gw_policy (__be32 saddr, __be32 daddr)" startline="20" endline="29">
static __always_inline struct egress_gw_policy_entry *lookup_ip4_egress_gw_policy (__be32 saddr, __be32 daddr)
{
    struct egress_gw_policy_key key = {
        .lpm_key = {EGRESS_IPV4_PREFIX,
            {}},
        .saddr = saddr,
        .daddr = daddr,}
    ;
    return map_lookup_elem (&EGRESS_POLICY_MAP, &key);
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/egress_policies.h" funcheader="static __always_inline __u32 *srv6_lookup_vrf4 (__be32 sip, __be32 dip)" startline="44" endline="53">
static __always_inline __u32 *srv6_lookup_vrf4 (__be32 sip, __be32 dip)
{
    struct srv6_vrf_key4 key = {
        .lpm = {SRV6_VRF_IPV4_PREFIX,
            {}},
        .src_ip = sip,
        .dst_cidr = dip,}
    ;
    return map_lookup_elem (&SRV6_VRF_MAP4, &key);
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/egress_policies.h" funcheader="static __always_inline union v6addr *srv6_lookup_policy4 (__u32 vrf_id, __be32 dip)" startline="63" endline="72">
static __always_inline union v6addr *srv6_lookup_policy4 (__u32 vrf_id, __be32 dip)
{
    struct srv6_policy_key4 key = {
        .lpm = {SRV6_POLICY_IPV4_PREFIX,
            {}},
        .vrf_id = vrf_id,
        .dst_cidr = dip,}
    ;
    return map_lookup_elem (&SRV6_POLICY_MAP4, &key);
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/egress_policies.h" funcheader="static __always_inline __u32 *srv6_lookup_vrf6 (const struct in6_addr *sip, const struct in6_addr *dip)" startline="83" endline="92">
static __always_inline __u32 *srv6_lookup_vrf6 (const struct in6_addr *sip, const struct in6_addr *dip)
{
    struct srv6_vrf_key6 key = {
        .lpm = {SRV6_VRF_IPV6_PREFIX,
            {}},
        .src_ip = *(unionv6addr*) sip,
        .dst_cidr = *(unionv6addr*) dip,}
    ;
    return map_lookup_elem (&SRV6_VRF_MAP6, &key);
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/egress_policies.h" funcheader="static __always_inline union v6addr *srv6_lookup_policy6 (__u32 vrf_id, const struct in6_addr *dip)" startline="103" endline="112">
static __always_inline union v6addr *srv6_lookup_policy6 (__u32 vrf_id, const struct in6_addr *dip)
{
    struct srv6_policy_key6 key = {
        .lpm = {SRV6_POLICY_IPV6_PREFIX,
            {}},
        .vrf_id = vrf_id,
        .dst_cidr = *(unionv6addr*) dip,}
    ;
    return map_lookup_elem (&SRV6_POLICY_MAP6, &key);
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/egress_policies.h" funcheader="static __always_inline __u32 srv6_lookup_sid (const struct in6_addr *sid)" startline="114" endline="123">
static __always_inline __u32 srv6_lookup_sid (const struct in6_addr *sid)
{
    __u32 *vrf_id;
    vrf_id = map_lookup_elem (& SRV6_SID_MAP, sid);
    if (vrf_id)
        return *vrf_id;
    return 0;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/egress_policies.h" funcheader="static __always_inline bool is_srv6_packet (const struct ipv6hdr *ip6)" startline="125" endline="134">
static __always_inline bool is_srv6_packet (const struct ipv6hdr *ip6)
{

#ifndef ENABLE_SRV6_REDUCED_ENCAP
    if (ip6->nexthdr == NEXTHDR_ROUTING)
        return true;

#endif
    return ip6->nexthdr == IPPROTO_IPIP || ip6->nexthdr == IPPROTO_IPV6;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/egress_policies.h" funcheader="static __always_inline __u64 ctx_adjust_hroom_flags (void)" startline="137" endline="144">
static __always_inline __u64 ctx_adjust_hroom_flags (void)
{

#ifdef BPF_HAVE_CSUM_LEVEL
    return BPF_F_ADJ_ROOM_NO_CSUM_RESET;

#else
    return 0;

#endif
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/egress_policies.h" funcheader="static __always_inline int srv6_encapsulation (struct  __ctx_buff *ctx, int growth, __u16 new_payload_len, __u8 nexthdr, union v6addr *saddr, struct in6_addr *sid)" startline="146" endline="171">
static __always_inline int srv6_encapsulation (struct  __ctx_buff *ctx, int growth, __u16 new_payload_len, __u8 nexthdr, union v6addr *saddr, struct in6_addr *sid)
{
    __u32 len = sizeof (struct ipv6hdr) - 2 * sizeof (struct in6_addr);
    struct ipv6hdr new_ip6 = {
        .version = 0x6,
        .payload_len = bpf_htons (new_payload_len),
        .nexthdr = nexthdr,
        .hop_limit = IPDEFTTL,}
    ;
    if (ctx_adjust_hroom (ctx, growth, BPF_ADJ_ROOM_MAC, ctx_adjust_hroom_flags ()))
        return DROP_INVALID;
    if (ctx_store_bytes (ctx, ETH_HLEN, &new_ip6, len, 0) < 0)
        return DROP_WRITE_ERROR;
    if (ctx_store_bytes (ctx, ETH_HLEN + offsetof (struct ipv6hdr, saddr), saddr, sizeof (union v6addr), 0) < 0)
        return DROP_WRITE_ERROR;
    if (ctx_store_bytes (ctx, ETH_HLEN + offsetof (struct ipv6hdr, daddr), sid, sizeof (struct in6_addr), 0) < 0)
        return DROP_WRITE_ERROR;
    return 0;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/egress_policies.h" funcheader="static __always_inline int srv6_decapsulation (struct  __ctx_buff *ctx)" startline="173" endline="210">
static __always_inline int srv6_decapsulation (struct  __ctx_buff *ctx)
{
    __u16 new_proto = bpf_htons (ETH_P_IP);
    void *data, *data_end;
    struct ipv6hdr *ip6;
    int shrink;
    if (!revalidate_data (ctx, &data, &data_end, &ip6))
        return DROP_INVALID;
    switch (ip6->nexthdr) {
    case IPPROTO_IPIP :
        if (ctx_change_proto (ctx, new_proto, 0) < 0)
            return DROP_WRITE_ERROR;
        if (ctx_store_bytes (ctx, offsetof (struct ethhdr, h_proto), &new_proto, sizeof (new_proto), 0) < 0)
            return DROP_WRITE_ERROR;
        shrink = sizeof (struct iphdr);
        break;
    case IPPROTO_IPV6 :
        shrink = sizeof (struct ipv6hdr);
        break;
    default :
        return DROP_INVALID;
    }
    if (ctx_adjust_hroom (ctx, -shrink, BPF_ADJ_ROOM_MAC, ctx_adjust_hroom_flags ()))
        return DROP_INVALID;
    return 0;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/egress_policies.h" funcheader="static __always_inline int srv6_create_state_entry (struct  __ctx_buff *ctx)" startline="212" endline="252">
static __always_inline int srv6_create_state_entry (struct  __ctx_buff *ctx)
{
    struct srv6_ipv6_2tuple *outer_ips;
    void *data, *data_end;
    struct ipv6hdr *ip6;
    if (!revalidate_data (ctx, &data, &data_end, &ip6))
        return DROP_INVALID;
    outer_ips = (struct srv6_ipv6_2tuple *) &ip6->saddr;
    switch (ip6->nexthdr) {
    case IPPROTO_IPV6 :
        {
            struct ipv6hdr *inner = ip6 + 1;
            struct srv6_ipv6_2tuple *inner_ips;
            if ((void *) inner + sizeof (*inner) > data_end)
                return DROP_INVALID;
            inner_ips = (struct srv6_ipv6_2tuple *) &inner->saddr;
            if (map_update_elem (&SRV6_STATE_MAP6, inner_ips, outer_ips, 0) < 0)
                return DROP_INVALID;
        }

#  ifdef ENABLE_IPV4
    case IPPROTO_IPIP :
        {
            struct iphdr *inner = (struct iphdr *) (ip6 + 1);
            struct srv6_ipv4_2tuple *inner_ips;
            if ((void *) inner + sizeof (*inner) > data_end)
                return DROP_INVALID;
            inner_ips = (struct srv6_ipv4_2tuple *) &inner->saddr;
            if (map_update_elem (&SRV6_STATE_MAP4, inner_ips, outer_ips, 0) < 0)
                return DROP_INVALID;
        }

#  endif /* ENABLE_IPV4 */
    }
    return 0;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/egress_policies.h" funcheader="static __always_inline struct srv6_ipv6_2tuple *srv6_lookup_state_entry4 (struct iphdr *ip4)" startline="255" endline="260">
static __always_inline struct srv6_ipv6_2tuple *srv6_lookup_state_entry4 (struct iphdr *ip4)
{
    return map_lookup_elem (&SRV6_STATE_MAP4, (struct srv6_ipv4_2tuple *) &ip4->saddr);
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/egress_policies.h" funcheader="static __always_inline struct srv6_ipv6_2tuple *srv6_lookup_state_entry6 (struct ipv6hdr *ip6)" startline="263" endline="268">
static __always_inline struct srv6_ipv6_2tuple *srv6_lookup_state_entry6 (struct ipv6hdr *ip6)
{
    return map_lookup_elem (&SRV6_STATE_MAP6, (struct srv6_ipv6_2tuple *) &ip6->saddr);
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/egress_policies.h" funcheader="static __always_inline int srv6_handling4 (struct  __ctx_buff *ctx, union v6addr *src_sid, struct in6_addr *dst_sid)" startline="270" endline="310">
static __always_inline int srv6_handling4 (struct  __ctx_buff *ctx, union v6addr *src_sid, struct in6_addr *dst_sid)
{
    __u16 new_payload_len, outer_proto = bpf_htons (ETH_P_IPV6);
    void *data, *data_end;
    struct iphdr *ip4;
    __u8 nexthdr;
    int growth;
    if (!revalidate_data (ctx, &data, &data_end, &ip4))
        return DROP_INVALID;
    nexthdr = IPPROTO_IPIP;
    new_payload_len = bpf_ntohs (ip4->tot_len) - (__u16) (ip4->ihl << 2) + sizeof (struct iphdr);
    if (ctx_change_proto (ctx, outer_proto, 0) < 0)
        return DROP_WRITE_ERROR;
    if (ctx_store_bytes (ctx, offsetof (struct ethhdr, h_proto), &outer_proto, sizeof (outer_proto), 0) < 0)
        return DROP_WRITE_ERROR;
    growth = sizeof (struct iphdr);
    return srv6_encapsulation (ctx, growth, new_payload_len, nexthdr, src_sid, dst_sid);
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/egress_policies.h" funcheader="static __always_inline int srv6_handling6 (struct  __ctx_buff *ctx, union v6addr *src_sid, struct in6_addr *dst_sid)" startline="312" endline="331">
static __always_inline int srv6_handling6 (struct  __ctx_buff *ctx, union v6addr *src_sid, struct in6_addr *dst_sid)
{
    __u16 new_payload_len;
    void *data, *data_end;
    struct ipv6hdr *ip6;
    __u8 nexthdr;
    int growth;
    if (!revalidate_data (ctx, &data, &data_end, &ip6))
        return DROP_INVALID;
    nexthdr = IPPROTO_IPV6;
    new_payload_len = bpf_ntohs (ip6->payload_len) + sizeof (struct ipv6hdr);
    growth = sizeof (struct ipv6hdr);
    return srv6_encapsulation (ctx, growth, new_payload_len, nexthdr, src_sid, dst_sid);
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/egress_policies.h" funcheader="static __always_inline int srv6_handling (struct  __ctx_buff *ctx, __u32 vrf_id, struct in6_addr *dst_sid)" startline="333" endline="373">
static __always_inline int srv6_handling (struct  __ctx_buff *ctx, __u32 vrf_id, struct in6_addr *dst_sid)
{
    union v6addr *src_sid;
    void *data, *data_end;
    __u16 inner_proto;
    if (!validate_ethertype (ctx, &inner_proto))
        return DROP_UNSUPPORTED_L2;
    switch (inner_proto) {

#  ifdef ENABLE_IPV6
    case bpf_htons (ETH_P_IPV6) :
        {
            struct ipv6hdr *ip6;
            if (!revalidate_data (ctx, &data, &data_end, &ip6))
                return DROP_INVALID;
            src_sid = srv6_lookup_policy6 (vrf_id, & ip6 -> saddr);
            if (!src_sid)
                return DROP_NO_SID;
            return srv6_handling6 (ctx, src_sid, dst_sid);
        }

#  endif /* ENABLE_IPV6 */

#  ifdef ENABLE_IPV4
    case bpf_htons (ETH_P_IP) :
        {
            struct iphdr *ip4;
            if (!revalidate_data (ctx, &data, &data_end, &ip4))
                return DROP_INVALID;
            src_sid = srv6_lookup_policy4 (vrf_id, ip4 -> saddr);
            if (!src_sid)
                return DROP_NO_SID;
            return srv6_handling4 (ctx, src_sid, dst_sid);
        }

#  endif /* ENABLE_IPV4 */
    default :
        return DROP_INVALID;
    }
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/egress_policies.h" funcheader="static __always_inline int srv6_reply (struct  __ctx_buff *ctx)" startline="375" endline="413">
static __always_inline int srv6_reply (struct  __ctx_buff *ctx)
{
    struct srv6_ipv6_2tuple *outer_ips;
    struct iphdr * ip4 __maybe_unused;
    void *data, *data_end;
    struct ipv6hdr *ip6;
    __u16 proto;
    if (!validate_ethertype (ctx, &proto))
        return DROP_UNSUPPORTED_L2;
    switch (proto) {
    case bpf_htons (ETH_P_IPV6) :
        if (!revalidate_data (ctx, &data, &data_end, &ip6))
            return DROP_INVALID;
        outer_ips = srv6_lookup_state_entry6 (ip6);
        if (!outer_ips)
            return DROP_MISSING_SRV6_STATE;
        return srv6_handling6 (ctx, &outer_ips->src, (struct in6_addr *) &outer_ips->dst);

#  ifdef ENABLE_IPV4
    case bpf_htons (ETH_P_IP) :
        if (!revalidate_data (ctx, &data, &data_end, &ip4))
            return DROP_INVALID;
        outer_ips = srv6_lookup_state_entry4 (ip4);
        if (!outer_ips)
            return DROP_MISSING_SRV6_STATE;
        return srv6_handling4 (ctx, &outer_ips->src, (struct in6_addr *) &outer_ips->dst);

#  endif /* ENABLE_IPV4 */
    }
    return CTX_ACT_OK;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/egress_policies.h" funcheader="static __always_inline void srv6_load_meta_sid (struct  __ctx_buff *ctx, struct in6_addr *sid)" startline="415" endline="422">
static __always_inline void srv6_load_meta_sid (struct  __ctx_buff *ctx, struct in6_addr *sid)
{
    sid->s6_addr32[0] = ctx_load_meta (ctx, CB_SRV6_SID_1);
    sid->s6_addr32[1] = ctx_load_meta (ctx, CB_SRV6_SID_2);
    sid->s6_addr32[2] = ctx_load_meta (ctx, CB_SRV6_SID_3);
    sid->s6_addr32[3] = ctx_load_meta (ctx, CB_SRV6_SID_4);
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/egress_policies.h" funcheader="static __always_inline void srv6_store_meta_sid (struct  __ctx_buff *ctx, const union v6addr *sid)" startline="424" endline="431">
static __always_inline void srv6_store_meta_sid (struct  __ctx_buff *ctx, const union v6addr *sid)
{
    ctx_store_meta (ctx, CB_SRV6_SID_1, sid->p1);
    ctx_store_meta (ctx, CB_SRV6_SID_2, sid->p2);
    ctx_store_meta (ctx, CB_SRV6_SID_3, sid->p3);
    ctx_store_meta (ctx, CB_SRV6_SID_4, sid->p4);
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/egress_policies.h" funcheader="int tail_srv6_encap (struct  __ctx_buff *ctx)" startline="434" endline="452">
int tail_srv6_encap (struct  __ctx_buff *ctx)
{
    struct in6_addr dst_sid;
    __u32 vrf_id;
    int ret = 0;
    srv6_load_meta_sid (ctx, &dst_sid);
    vrf_id = ctx_load_meta (ctx, CB_SRV6_VRF_ID);
    ret = srv6_handling (ctx, vrf_id, & dst_sid);
    if (ret < 0)
        return send_drop_notify_error (ctx, SECLABEL, ret, CTX_ACT_DROP, METRIC_EGRESS);
    send_trace_notify (ctx, TRACE_TO_STACK, SECLABEL, 0, 0, 0, TRACE_REASON_UNKNOWN, 0);
    return CTX_ACT_OK;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/egress_policies.h" funcheader="int tail_srv6_decap (struct  __ctx_buff *ctx)" startline="455" endline="473">
int tail_srv6_decap (struct  __ctx_buff *ctx)
{
    int ret = 0;
    ret = srv6_create_state_entry (ctx);
    if (ret < 0)
        goto error_drop;
    ret = srv6_decapsulation (ctx);
    if (ret < 0)
        goto error_drop;
    send_trace_notify (ctx, TRACE_TO_STACK, SECLABEL, 0, 0, 0, TRACE_REASON_UNKNOWN, 0);
    return CTX_ACT_OK;
error_drop :
    return send_drop_notify_error (ctx, SECLABEL, ret, CTX_ACT_DROP, METRIC_EGRESS);
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/egress_policies.h" funcheader="int tail_srv6_reply (struct  __ctx_buff *ctx)" startline="476" endline="485">
int tail_srv6_reply (struct  __ctx_buff *ctx)
{
    int ret;
    ret = srv6_reply (ctx);
    if (ret < 0)
        return send_drop_notify_error (ctx, SECLABEL, ret, CTX_ACT_DROP, METRIC_EGRESS);
    return CTX_ACT_OK;
}
</source>
</doc>
