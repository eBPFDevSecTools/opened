<?xml version="1.0"?>
<doc>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/conntrack.h" funcheader="static __always_inline bool ct_entry_seen_both_syns (const struct ct_entry *entry)" startline="26" endline="32">
static __always_inline bool ct_entry_seen_both_syns (const struct ct_entry *entry)
{
    bool rx_syn = entry->rx_flags_seen & TCP_FLAG_SYN;
    bool tx_syn = entry->tx_flags_seen & TCP_FLAG_SYN;
    return rx_syn && tx_syn;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/conntrack.h" funcheader="static __always_inline __u32 __ct_update_timeout (struct ct_entry *entry, __u32 lifetime, int dir, union tcp_flags flags, __u8 report_mask)" startline="62" endline="126">
static __always_inline __u32 __ct_update_timeout (struct ct_entry *entry, __u32 lifetime, int dir, union tcp_flags flags, __u8 report_mask)
{
    __u32 now = bpf_mono_now ();
    __u8 accumulated_flags;
    __u8 seen_flags = flags.lower_bits & report_mask;
    __u32 last_report;
    WRITE_ONCE (entry->lifetime, now + lifetime);
    if (dir == CT_INGRESS) {
        accumulated_flags = READ_ONCE (entry -> rx_flags_seen);
        last_report = READ_ONCE (entry -> last_rx_report);
    }
    else {
        accumulated_flags = READ_ONCE (entry -> tx_flags_seen);
        last_report = READ_ONCE (entry -> last_tx_report);
    }
    seen_flags |= accumulated_flags;
    if (last_report + bpf_sec_to_mono (CT_REPORT_INTERVAL) < now || accumulated_flags != seen_flags) {
        if (dir == CT_INGRESS) {
            WRITE_ONCE (entry->rx_flags_seen, seen_flags);
            WRITE_ONCE (entry->last_rx_report, now);
        }
        else {
            WRITE_ONCE (entry->tx_flags_seen, seen_flags);
            WRITE_ONCE (entry->last_tx_report, now);
        }
        return TRACE_PAYLOAD_LEN;
    }
    return 0;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/conntrack.h" funcheader="static __always_inline __u32 ct_update_timeout (struct ct_entry *entry, bool tcp, int dir, union tcp_flags seen_flags)" startline="134" endline="156">
static __always_inline __u32 ct_update_timeout (struct ct_entry *entry, bool tcp, int dir, union tcp_flags seen_flags)
{
    __u32 lifetime = dir == CT_SERVICE ? bpf_sec_to_mono (CT_SERVICE_LIFETIME_NONTCP) : bpf_sec_to_mono (CT_CONNECTION_LIFETIME_NONTCP);
    bool syn = seen_flags.value & TCP_FLAG_SYN;
    if (tcp) {
        entry->seen_non_syn |= !syn;
        if (entry->seen_non_syn) {
            lifetime = dir == CT_SERVICE ? bpf_sec_to_mono (CT_SERVICE_LIFETIME_TCP) : bpf_sec_to_mono (CT_CONNECTION_LIFETIME_TCP);
        }
        else {
            lifetime = bpf_sec_to_mono (CT_SYN_TIMEOUT);
        }
    }
    return __ct_update_timeout (entry, lifetime, dir, seen_flags, CT_REPORT_FLAGS);
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/conntrack.h" funcheader="static __always_inline void ct_reset_closing (struct ct_entry *entry)" startline="158" endline="162">
static __always_inline void ct_reset_closing (struct ct_entry *entry)
{
    entry->rx_closing = 0;
    entry->tx_closing = 0;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/conntrack.h" funcheader="static __always_inline bool ct_entry_alive (const struct ct_entry *entry)" startline="164" endline="167">
static __always_inline bool ct_entry_alive (const struct ct_entry *entry)
{
    return !entry->rx_closing || !entry->tx_closing;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/conntrack.h" funcheader="static __always_inline bool ct_entry_closing (const struct ct_entry *entry)" startline="169" endline="172">
static __always_inline bool ct_entry_closing (const struct ct_entry *entry)
{
    return entry->tx_closing || entry->rx_closing;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/conntrack.h" funcheader="static __always_inline bool ct_entry_expired_rebalance (const struct ct_entry *entry)" startline="174" endline="183">
static __always_inline bool ct_entry_expired_rebalance (const struct ct_entry *entry)
{
    __u32 wait_time = bpf_sec_to_mono (CT_SERVICE_CLOSE_REBALANCE);
    return READ_ONCE (entry->last_tx_report) + wait_time <= bpf_mono_now ();
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/conntrack.h" funcheader="static __always_inline __u8 __ct_lookup (const void *map, struct  __ctx_buff *ctx, const void *tuple, int action, int dir, struct ct_state *ct_state, bool is_tcp, union tcp_flags seen_flags, __u32 *monitor)" startline="185" endline="273">
static __always_inline __u8 __ct_lookup (const void *map, struct  __ctx_buff *ctx, const void *tuple, int action, int dir, struct ct_state *ct_state, bool is_tcp, union tcp_flags seen_flags, __u32 *monitor)
{
    bool syn = seen_flags.value & TCP_FLAG_SYN;
    struct ct_entry *entry;
    int reopen;
    relax_verifier ();
    entry = map_lookup_elem (map, tuple);
    if (entry) {
        cilium_dbg (ctx, DBG_CT_MATCH, entry->lifetime, entry->rev_nat_index);

#ifdef HAVE_LARGE_INSN_LIMIT
        if (dir == CT_SERVICE && syn && ct_entry_closing (entry) && ct_entry_expired_rebalance (entry))
            goto ct_new;

#endif
        if (ct_entry_alive (entry))
            *monitor = ct_update_timeout (entry, is_tcp, dir, seen_flags);
        if (ct_state) {
            ct_state->rev_nat_index = entry->rev_nat_index;
            ct_state->loopback = entry->lb_loopback;
            ct_state->node_port = entry->node_port;
            ct_state->ifindex = entry->ifindex;
            ct_state->dsr = entry->dsr;
            ct_state->proxy_redirect = entry->proxy_redirect;
            ct_state->from_l7lb = entry->from_l7lb;
            if (dir == CT_SERVICE) {
                ct_state->backend_id = entry->backend_id;
                ct_state->syn = syn;
            }
        }

#ifdef CONNTRACK_ACCOUNTING
        if (dir == CT_INGRESS) {
            __sync_fetch_and_add (&entry->rx_packets, 1);
            __sync_fetch_and_add (&entry->rx_bytes, ctx_full_len (ctx));
        }
        else if (dir == CT_EGRESS) {
            __sync_fetch_and_add (&entry->tx_packets, 1);
            __sync_fetch_and_add (&entry->tx_bytes, ctx_full_len (ctx));
        }

#endif
        switch (action) {
        case ACTION_CREATE :
            reopen = entry->rx_closing | entry->tx_closing;
            reopen |= seen_flags.value & TCP_FLAG_SYN;
            if (unlikely (reopen == (TCP_FLAG_SYN | 0x1))) {
                ct_reset_closing (entry);
                *monitor = ct_update_timeout (entry, is_tcp, dir, seen_flags);
                return CT_REOPENED;
            }
            break;
        case ACTION_CLOSE :
            if (!ct_entry_seen_both_syns (entry) && (seen_flags.value & TCP_FLAG_RST) && dir != CT_SERVICE) {
                entry->rx_closing = 1;
                entry->tx_closing = 1;
            }
            else if (dir == CT_INGRESS) {
                entry->rx_closing = 1;
            }
            else {
                entry->tx_closing = 1;
            }
            *monitor = TRACE_PAYLOAD_LEN;
            if (ct_entry_alive (entry))
                break;
            __ct_update_timeout (entry, bpf_sec_to_mono (CT_CLOSE_TIMEOUT), dir, seen_flags, CT_REPORT_FLAGS);
            break;
        }
        return CT_ESTABLISHED;
    }
ct_new :
    __maybe_unused * monitor = TRACE_PAYLOAD_LEN;
    return CT_NEW;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/conntrack.h" funcheader="static __always_inline int ipv6_extract_tuple (struct  __ctx_buff *ctx, struct ipv6_ct_tuple *tuple, int *l4_off)" startline="275" endline="303">
static __always_inline int ipv6_extract_tuple (struct  __ctx_buff *ctx, struct ipv6_ct_tuple *tuple, int *l4_off)
{
    int ret, l3_off = ETH_HLEN;
    void *data, *data_end;
    struct ipv6hdr *ip6;
    if (!revalidate_data (ctx, &data, &data_end, &ip6))
        return DROP_INVALID;
    tuple->nexthdr = ip6->nexthdr;
    ipv6_addr_copy (&tuple->daddr, (union v6addr *) &ip6->daddr);
    ipv6_addr_copy (&tuple->saddr, (union v6addr *) &ip6->saddr);
    ret = ipv6_hdrlen (ctx, & tuple -> nexthdr);
    if (ret < 0)
        return ret;
    if (unlikely (tuple->nexthdr != IPPROTO_TCP && tuple->nexthdr != IPPROTO_UDP))
        return DROP_CT_UNKNOWN_PROTO;
    if (ret < 0)
        return ret;
    *l4_off = l3_off + ret;
    return CTX_ACT_OK;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/conntrack.h" funcheader="static __always_inline void ct_flip_tuple_dir6 (struct ipv6_ct_tuple *tuple)" startline="305" endline="311">
static __always_inline void ct_flip_tuple_dir6 (struct ipv6_ct_tuple *tuple)
{
    if (tuple->flags & TUPLE_F_IN)
        tuple->flags &= ~TUPLE_F_IN;
    else
        tuple->flags |= TUPLE_F_IN;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/conntrack.h" funcheader="static __always_inline void __ipv6_ct_tuple_reverse (struct ipv6_ct_tuple *tuple)" startline="313" endline="326">
static __always_inline void __ipv6_ct_tuple_reverse (struct ipv6_ct_tuple *tuple)
{
    union v6addr tmp_addr = {}
    ;
    __be16 tmp;
    ipv6_addr_copy (&tmp_addr, &tuple->saddr);
    ipv6_addr_copy (&tuple->saddr, &tuple->daddr);
    ipv6_addr_copy (&tuple->daddr, &tmp_addr);
    tmp = tuple->sport;
    tuple->sport = tuple->dport;
    tuple->dport = tmp;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/conntrack.h" funcheader="static __always_inline void ipv6_ct_tuple_reverse (struct ipv6_ct_tuple *tuple)" startline="328" endline="333">
static __always_inline void ipv6_ct_tuple_reverse (struct ipv6_ct_tuple *tuple)
{
    __ipv6_ct_tuple_reverse (tuple);
    ct_flip_tuple_dir6 (tuple);
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/conntrack.h" funcheader="static __always_inline int ct_lookup6 (const void *map, struct ipv6_ct_tuple *tuple, struct  __ctx_buff *ctx, int l4_off, int dir, struct ct_state *ct_state, __u32 *monitor)" startline="336" endline="459">
static __always_inline int ct_lookup6 (const void *map, struct ipv6_ct_tuple *tuple, struct  __ctx_buff *ctx, int l4_off, int dir, struct ct_state *ct_state, __u32 *monitor)
{
    int ret = CT_NEW, action = ACTION_UNSPEC;
    bool is_tcp = tuple->nexthdr == IPPROTO_TCP;
    union tcp_flags tcp_flags = {
        .value = 0}
    ;
    if (dir == CT_INGRESS)
        tuple->flags = TUPLE_F_OUT;
    else if (dir == CT_EGRESS)
        tuple->flags = TUPLE_F_IN;
    else if (dir == CT_SERVICE)
        tuple->flags = TUPLE_F_SERVICE;
    else
        return DROP_CT_INVALID_HDR;
    switch (tuple->nexthdr) {
    case IPPROTO_ICMPV6 :
        if (1) {
            __be16 identifier = 0;
            __u8 type;
            if (ctx_load_bytes (ctx, l4_off, &type, 1) < 0)
                return DROP_CT_INVALID_HDR;
            if ((type == ICMPV6_ECHO_REQUEST || type == ICMPV6_ECHO_REPLY) && ctx_load_bytes (ctx, l4_off + offsetof (struct icmp6hdr, icmp6_dataun.u_echo.identifier), &identifier, 2) < 0)
                return DROP_CT_INVALID_HDR;
            tuple->sport = 0;
            tuple->dport = 0;
            switch (type) {
            case ICMPV6_DEST_UNREACH :
            case ICMPV6_PKT_TOOBIG :
            case ICMPV6_TIME_EXCEED :
            case ICMPV6_PARAMPROB :
                tuple->flags |= TUPLE_F_RELATED;
                break;
            case ICMPV6_ECHO_REPLY :
                tuple->sport = identifier;
                break;
            case ICMPV6_ECHO_REQUEST :
                tuple->dport = identifier;
            default :
                action = ACTION_CREATE;
                break;
            }
        }
        break;
    case IPPROTO_TCP :
        if (1) {
            if (ctx_load_bytes (ctx, l4_off + 12, &tcp_flags, 2) < 0)
                return DROP_CT_INVALID_HDR;
            if (unlikely (tcp_flags.value & (TCP_FLAG_RST | TCP_FLAG_FIN)))
                action = ACTION_CLOSE;
            else
                action = ACTION_CREATE;
        }
        if (ctx_load_bytes (ctx, l4_off, &tuple->dport, 4) < 0)
            return DROP_CT_INVALID_HDR;
        break;
    case IPPROTO_UDP :
        if (ctx_load_bytes (ctx, l4_off, &tuple->dport, 4) < 0)
            return DROP_CT_INVALID_HDR;
        action = ACTION_CREATE;
        break;
    default :
        return DROP_CT_UNKNOWN_PROTO;
    }
    cilium_dbg3 (ctx, DBG_CT_LOOKUP6_1, (__u32) tuple->saddr.p4, (__u32) tuple->daddr.p4, (bpf_ntohs (tuple->sport) << 16) | bpf_ntohs (tuple->dport));
    cilium_dbg3 (ctx, DBG_CT_LOOKUP6_2, (tuple->nexthdr << 8) | tuple->flags, 0, 0);
    ret = __ct_lookup (map, ctx, tuple, action, dir, ct_state, is_tcp, tcp_flags, monitor);
    if (ret != CT_NEW) {
        if (likely (ret == CT_ESTABLISHED || ret == CT_REOPENED)) {
            if (unlikely (tuple->flags & TUPLE_F_RELATED))
                ret = CT_RELATED;
            else
                ret = CT_REPLY;
        }
        goto out;
    }
    if (dir != CT_SERVICE) {
        ipv6_ct_tuple_reverse (tuple);
        ret = __ct_lookup (map, ctx, tuple, action, dir, ct_state, is_tcp, tcp_flags, monitor);
    }
out :
    cilium_dbg (ctx, DBG_CT_VERDICT, ret < 0 ? -ret : ret, ct_state->rev_nat_index);
    return ret;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/conntrack.h" funcheader="static __always_inline int ipv4_extract_tuple (struct  __ctx_buff *ctx, struct ipv4_ct_tuple *tuple, int *l4_off)" startline="461" endline="483">
static __always_inline int ipv4_extract_tuple (struct  __ctx_buff *ctx, struct ipv4_ct_tuple *tuple, int *l4_off)
{
    int l3_off = ETH_HLEN;
    void *data, *data_end;
    struct iphdr *ip4;
    if (!revalidate_data (ctx, &data, &data_end, &ip4))
        return DROP_INVALID;
    tuple->nexthdr = ip4->protocol;
    if (unlikely (tuple->nexthdr != IPPROTO_TCP && tuple->nexthdr != IPPROTO_UDP))
        return DROP_CT_UNKNOWN_PROTO;
    tuple->daddr = ip4->daddr;
    tuple->saddr = ip4->saddr;
    *l4_off = l3_off + ipv4_hdrlen (ip4);
    return CTX_ACT_OK;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/conntrack.h" funcheader="static __always_inline void ct_flip_tuple_dir4 (struct ipv4_ct_tuple *tuple)" startline="485" endline="491">
static __always_inline void ct_flip_tuple_dir4 (struct ipv4_ct_tuple *tuple)
{
    if (tuple->flags & TUPLE_F_IN)
        tuple->flags &= ~TUPLE_F_IN;
    else
        tuple->flags |= TUPLE_F_IN;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/conntrack.h" funcheader="static __always_inline void __ipv4_ct_tuple_reverse (struct ipv4_ct_tuple *tuple)" startline="493" endline="505">
static __always_inline void __ipv4_ct_tuple_reverse (struct ipv4_ct_tuple *tuple)
{
    __be32 tmp_addr = tuple->saddr;
    __be16 tmp;
    tuple->saddr = tuple->daddr;
    tuple->daddr = tmp_addr;
    tmp = tuple->sport;
    tuple->sport = tuple->dport;
    tuple->dport = tmp;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/conntrack.h" funcheader="static __always_inline void ipv4_ct_tuple_reverse (struct ipv4_ct_tuple *tuple)" startline="507" endline="512">
static __always_inline void ipv4_ct_tuple_reverse (struct ipv4_ct_tuple *tuple)
{
    __ipv4_ct_tuple_reverse (tuple);
    ct_flip_tuple_dir4 (tuple);
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/conntrack.h" funcheader="static __always_inline int ipv4_ct_extract_l4_ports (struct  __ctx_buff *ctx, int off, enum ct_dir dir __maybe_unused, struct ipv4_ct_tuple *tuple, bool * has_l4_header __maybe_unused)" startline="514" endline="540">
static __always_inline int ipv4_ct_extract_l4_ports (struct  __ctx_buff *ctx, int off, enum ct_dir dir __maybe_unused, struct ipv4_ct_tuple *tuple, bool * has_l4_header __maybe_unused)
{

#ifdef ENABLE_IPV4_FRAGMENTS
    void *data, *data_end;
    struct iphdr *ip4;
    if (!revalidate_data (ctx, &data, &data_end, &ip4))
        return DROP_CT_INVALID_HDR;
    return ipv4_handle_fragmentation (ctx, ip4, off, dir, (struct ipv4_frag_l4ports *) &tuple->dport, has_l4_header);

#else
    if (ctx_load_bytes (ctx, off, &tuple->dport, 4) < 0)
        return DROP_CT_INVALID_HDR;

#endif
    return CTX_ACT_OK;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/conntrack.h" funcheader="static __always_inline void ct4_cilium_dbg_tuple (struct  __ctx_buff *ctx, __u8 type, const struct ipv4_ct_tuple *tuple, __u32 rev_nat_index, int dir)" startline="542" endline="549">
static __always_inline void ct4_cilium_dbg_tuple (struct  __ctx_buff *ctx, __u8 type, const struct ipv4_ct_tuple *tuple, __u32 rev_nat_index, int dir)
{
    __be32 addr = (dir == CT_INGRESS) ? tuple->saddr : tuple->daddr;
    cilium_dbg (ctx, type, addr, rev_nat_index);
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/conntrack.h" funcheader="static __always_inline int ct_extract_ports4 (struct  __ctx_buff *ctx, int off, enum ct_dir dir, struct ipv4_ct_tuple *tuple)" startline="551" endline="606">
static __always_inline int ct_extract_ports4 (struct  __ctx_buff *ctx, int off, enum ct_dir dir, struct ipv4_ct_tuple *tuple)
{
    int err;
    switch (tuple->nexthdr) {
    case IPPROTO_ICMP :
        if (1) {
            __be16 identifier = 0;
            __u8 type;
            if (ctx_load_bytes (ctx, off, &type, 1) < 0)
                return DROP_CT_INVALID_HDR;
            if ((type == ICMP_ECHO || type == ICMP_ECHOREPLY) && ctx_load_bytes (ctx, off + offsetof (struct icmphdr, un.echo.id), &identifier, 2) < 0)
                return DROP_CT_INVALID_HDR;
            tuple->sport = 0;
            tuple->dport = 0;
            switch (type) {
            case ICMP_DEST_UNREACH :
            case ICMP_TIME_EXCEEDED :
            case ICMP_PARAMETERPROB :
                tuple->flags |= TUPLE_F_RELATED;
                break;
            case ICMP_ECHOREPLY :
                tuple->sport = identifier;
                break;
            case ICMP_ECHO :
                tuple->dport = identifier;
            default :
                break;
            }
        }
        break;
    case IPPROTO_TCP :
    case IPPROTO_UDP :
        err = ipv4_ct_extract_l4_ports (ctx, off, dir, tuple, NULL);
        if (err < 0)
            return err;
        break;
    default :
        return DROP_CT_UNKNOWN_PROTO;
    }
    return 0;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/conntrack.h" funcheader="static __always_inline int ct_is_reply4 (const void *map, struct  __ctx_buff *ctx, int off, struct ipv4_ct_tuple *tuple, bool *is_reply)" startline="616" endline="631">
static __always_inline int ct_is_reply4 (const void *map, struct  __ctx_buff *ctx, int off, struct ipv4_ct_tuple *tuple, bool *is_reply)
{
    int err = 0;
    err = ct_extract_ports4 (ctx, off, CT_EGRESS, tuple);
    if (err < 0)
        return err;
    tuple->flags = TUPLE_F_IN;
    *is_reply = map_lookup_elem (map, tuple) != NULL;
    return 0;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/conntrack.h" funcheader="static __always_inline int ct_lookup4 (const void *map, struct ipv4_ct_tuple *tuple, struct  __ctx_buff *ctx, int off, enum ct_dir dir, struct ct_state *ct_state, __u32 *monitor)" startline="634" endline="757">
static __always_inline int ct_lookup4 (const void *map, struct ipv4_ct_tuple *tuple, struct  __ctx_buff *ctx, int off, enum ct_dir dir, struct ct_state *ct_state, __u32 *monitor)
{
    int err, ret = CT_NEW, action = ACTION_UNSPEC;
    bool is_tcp = tuple->nexthdr == IPPROTO_TCP, has_l4_header = true;
    union tcp_flags tcp_flags = {
        .value = 0}
    ;
    if (dir == CT_INGRESS)
        tuple->flags = TUPLE_F_OUT;
    else if (dir == CT_EGRESS)
        tuple->flags = TUPLE_F_IN;
    else if (dir == CT_SERVICE)
        tuple->flags = TUPLE_F_SERVICE;
    else
        return DROP_CT_INVALID_HDR;
    switch (tuple->nexthdr) {
    case IPPROTO_ICMP :
        if (1) {
            __be16 identifier = 0;
            __u8 type;
            if (ctx_load_bytes (ctx, off, &type, 1) < 0)
                return DROP_CT_INVALID_HDR;
            if ((type == ICMP_ECHO || type == ICMP_ECHOREPLY) && ctx_load_bytes (ctx, off + offsetof (struct icmphdr, un.echo.id), &identifier, 2) < 0)
                return DROP_CT_INVALID_HDR;
            tuple->sport = 0;
            tuple->dport = 0;
            switch (type) {
            case ICMP_DEST_UNREACH :
            case ICMP_TIME_EXCEEDED :
            case ICMP_PARAMETERPROB :
                tuple->flags |= TUPLE_F_RELATED;
                break;
            case ICMP_ECHOREPLY :
                tuple->sport = identifier;
                break;
            case ICMP_ECHO :
                tuple->dport = identifier;
            default :
                action = ACTION_CREATE;
                break;
            }
        }
        break;
    case IPPROTO_TCP :
        err = ipv4_ct_extract_l4_ports (ctx, off, dir, tuple, &has_l4_header);
        if (err < 0)
            return err;
        action = ACTION_CREATE;
        if (has_l4_header) {
            if (ctx_load_bytes (ctx, off + 12, &tcp_flags, 2) < 0)
                return DROP_CT_INVALID_HDR;
            if (unlikely (tcp_flags.value & (TCP_FLAG_RST | TCP_FLAG_FIN)))
                action = ACTION_CLOSE;
        }
        break;
    case IPPROTO_UDP :
        err = ipv4_ct_extract_l4_ports (ctx, off, dir, tuple, NULL);
        if (err < 0)
            return err;
        action = ACTION_CREATE;
        break;
    default :
        return DROP_CT_UNKNOWN_PROTO;
    }

#ifndef QUIET_CT
    cilium_dbg3 (ctx, DBG_CT_LOOKUP4_1, tuple->saddr, tuple->daddr, (bpf_ntohs (tuple->sport) << 16) | bpf_ntohs (tuple->dport));
    cilium_dbg3 (ctx, DBG_CT_LOOKUP4_2, (tuple->nexthdr << 8) | tuple->flags, 0, 0);

#endif
    ret = __ct_lookup (map, ctx, tuple, action, dir, ct_state, is_tcp, tcp_flags, monitor);
    if (ret != CT_NEW) {
        if (likely (ret == CT_ESTABLISHED || ret == CT_REOPENED)) {
            if (unlikely (tuple->flags & TUPLE_F_RELATED))
                ret = CT_RELATED;
            else
                ret = CT_REPLY;
        }
        goto out;
    }
    relax_verifier ();
    if (dir != CT_SERVICE) {
        ipv4_ct_tuple_reverse (tuple);
        ret = __ct_lookup (map, ctx, tuple, action, dir, ct_state, is_tcp, tcp_flags, monitor);
    }
out :
    cilium_dbg (ctx, DBG_CT_VERDICT, ret < 0 ? -ret : ret, ct_state->rev_nat_index);
    return ret;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/conntrack.h" funcheader="static __always_inline void ct_update6_backend_id (const void *map, const struct ipv6_ct_tuple *tuple, const struct ct_state *state)" startline="759" endline="770">
static __always_inline void ct_update6_backend_id (const void *map, const struct ipv6_ct_tuple *tuple, const struct ct_state *state)
{
    struct ct_entry *entry;
    entry = map_lookup_elem (map, tuple);
    if (!entry)
        return;
    entry->backend_id = state->backend_id;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/conntrack.h" funcheader="static __always_inline void ct_update6_rev_nat_index (const void *map, const struct ipv6_ct_tuple *tuple, const struct ct_state *state)" startline="772" endline="783">
static __always_inline void ct_update6_rev_nat_index (const void *map, const struct ipv6_ct_tuple *tuple, const struct ct_state *state)
{
    struct ct_entry *entry;
    entry = map_lookup_elem (map, tuple);
    if (!entry)
        return;
    entry->rev_nat_index = state->rev_nat_index;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/conntrack.h" funcheader="static __always_inline void ct_update6_dsr (const void *map, const struct ipv6_ct_tuple *tuple, const bool dsr)" startline="785" endline="796">
static __always_inline void ct_update6_dsr (const void *map, const struct ipv6_ct_tuple *tuple, const bool dsr)
{
    struct ct_entry *entry;
    entry = map_lookup_elem (map, tuple);
    if (!entry)
        return;
    entry->dsr = dsr;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/conntrack.h" funcheader="static __always_inline int ct_create6 (const void *map_main, const void *map_related, struct ipv6_ct_tuple *tuple, struct  __ctx_buff *ctx, const int dir, const struct ct_state *ct_state, bool proxy_redirect, bool from_l7lb)" startline="799" endline="865">
static __always_inline int ct_create6 (const void *map_main, const void *map_related, struct ipv6_ct_tuple *tuple, struct  __ctx_buff *ctx, const int dir, const struct ct_state *ct_state, bool proxy_redirect, bool from_l7lb)
{
    struct ct_entry entry = {}
    ;
    bool is_tcp = tuple->nexthdr == IPPROTO_TCP;
    union tcp_flags seen_flags = {
        .value = 0}
    ;
    entry.proxy_redirect = proxy_redirect;
    entry.from_l7lb = from_l7lb;
    if (dir == CT_SERVICE)
        entry.backend_id = ct_state->backend_id;
    entry.lb_loopback = ct_state->loopback;
    entry.node_port = ct_state->node_port;
    relax_verifier ();
    entry.dsr = ct_state->dsr;
    entry.ifindex = ct_state->ifindex;
    entry.rev_nat_index = ct_state->rev_nat_index;
    seen_flags.value |= is_tcp ? TCP_FLAG_SYN : 0;
    ct_update_timeout (&entry, is_tcp, dir, seen_flags);
    if (dir == CT_INGRESS) {
        entry.rx_packets = 1;
        entry.rx_bytes = ctx_full_len (ctx);
    }
    else if (dir == CT_EGRESS) {
        entry.tx_packets = 1;
        entry.tx_bytes = ctx_full_len (ctx);
    }
    cilium_dbg3 (ctx, DBG_CT_CREATED6, entry.rev_nat_index, ct_state->src_sec_id, 0);
    entry.src_sec_id = ct_state->src_sec_id;
    if (map_update_elem (map_main, tuple, &entry, 0) < 0) {
        send_signal_ct_fill_up (ctx, SIGNAL_PROTO_V6);
        return DROP_CT_CREATE_FAILED;
    }
    if (map_related != NULL) {
        struct ipv6_ct_tuple icmp_tuple = {
            .nexthdr = IPPROTO_ICMPV6,
            .sport = 0,
            .dport = 0,
            .flags = tuple->flags | TUPLE_F_RELATED,}
        ;
        entry.seen_non_syn = true;
        ipv6_addr_copy (&icmp_tuple.daddr, &tuple->daddr);
        ipv6_addr_copy (&icmp_tuple.saddr, &tuple->saddr);
        if (map_update_elem (map_related, &icmp_tuple, &entry, 0) < 0) {
            send_signal_ct_fill_up (ctx, SIGNAL_PROTO_V6);
            return DROP_CT_CREATE_FAILED;
        }
    }
    return 0;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/conntrack.h" funcheader="static __always_inline void ct_update4_backend_id (const void *map, const struct ipv4_ct_tuple *tuple, const struct ct_state *state)" startline="867" endline="878">
static __always_inline void ct_update4_backend_id (const void *map, const struct ipv4_ct_tuple *tuple, const struct ct_state *state)
{
    struct ct_entry *entry;
    entry = map_lookup_elem (map, tuple);
    if (!entry)
        return;
    entry->backend_id = state->backend_id;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/conntrack.h" funcheader="static __always_inline void ct_update4_rev_nat_index (const void *map, const struct ipv4_ct_tuple *tuple, const struct ct_state *state)" startline="880" endline="891">
static __always_inline void ct_update4_rev_nat_index (const void *map, const struct ipv4_ct_tuple *tuple, const struct ct_state *state)
{
    struct ct_entry *entry;
    entry = map_lookup_elem (map, tuple);
    if (!entry)
        return;
    entry->rev_nat_index = state->rev_nat_index;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/conntrack.h" funcheader="static __always_inline void ct_update4_dsr (const void *map, const struct ipv4_ct_tuple *tuple, const bool dsr)" startline="893" endline="904">
static __always_inline void ct_update4_dsr (const void *map, const struct ipv4_ct_tuple *tuple, const bool dsr)
{
    struct ct_entry *entry;
    entry = map_lookup_elem (map, tuple);
    if (!entry)
        return;
    entry->dsr = dsr;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/conntrack.h" funcheader="static __always_inline int ct_create4 (const void *map_main, const void *map_related, struct ipv4_ct_tuple *tuple, struct  __ctx_buff *ctx, const int dir, const struct ct_state *ct_state, bool proxy_redirect, bool from_l7lb)" startline="906" endline="1006">
static __always_inline int ct_create4 (const void *map_main, const void *map_related, struct ipv4_ct_tuple *tuple, struct  __ctx_buff *ctx, const int dir, const struct ct_state *ct_state, bool proxy_redirect, bool from_l7lb)
{
    struct ct_entry entry = {}
    ;
    bool is_tcp = tuple->nexthdr == IPPROTO_TCP;
    union tcp_flags seen_flags = {
        .value = 0}
    ;
    entry.proxy_redirect = proxy_redirect;
    entry.from_l7lb = from_l7lb;
    entry.lb_loopback = ct_state->loopback;
    entry.node_port = ct_state->node_port;
    relax_verifier ();
    entry.dsr = ct_state->dsr;
    entry.ifindex = ct_state->ifindex;
    if (dir == CT_SERVICE)
        entry.backend_id = ct_state->backend_id;
    entry.rev_nat_index = ct_state->rev_nat_index;
    seen_flags.value |= is_tcp ? TCP_FLAG_SYN : 0;
    ct_update_timeout (&entry, is_tcp, dir, seen_flags);
    if (dir == CT_INGRESS) {
        entry.rx_packets = 1;
        entry.rx_bytes = ctx_full_len (ctx);
    }
    else if (dir == CT_EGRESS) {
        entry.tx_packets = 1;
        entry.tx_bytes = ctx_full_len (ctx);
    }
    cilium_dbg3 (ctx, DBG_CT_CREATED4, entry.rev_nat_index, ct_state->src_sec_id, ct_state->addr);
    entry.src_sec_id = ct_state->src_sec_id;
    if (map_update_elem (map_main, tuple, &entry, 0) < 0) {
        send_signal_ct_fill_up (ctx, SIGNAL_PROTO_V4);
        return DROP_CT_CREATE_FAILED;
    }
    if (ct_state->addr && ct_state->loopback) {
        __u8 flags = tuple->flags;
        __be32 saddr, daddr;
        saddr = tuple->saddr;
        daddr = tuple->daddr;
        tuple->flags = TUPLE_F_IN;
        if (dir == CT_INGRESS) {
            tuple->saddr = ct_state->addr;
            tuple->daddr = ct_state->svc_addr;
        }
        else {
            tuple->saddr = ct_state->svc_addr;
            tuple->daddr = ct_state->addr;
        }
        if (map_update_elem (map_main, tuple, &entry, 0) < 0) {
            send_signal_ct_fill_up (ctx, SIGNAL_PROTO_V4);
            return DROP_CT_CREATE_FAILED;
        }
        tuple->saddr = saddr;
        tuple->daddr = daddr;
        tuple->flags = flags;
    }
    if (map_related != NULL) {
        struct ipv4_ct_tuple icmp_tuple = {
            .daddr = tuple->daddr,
            .saddr = tuple->saddr,
            .nexthdr = IPPROTO_ICMP,
            .sport = 0,
            .dport = 0,
            .flags = tuple->flags | TUPLE_F_RELATED,}
        ;
        entry.seen_non_syn = true;
        if (map_update_elem (map_related, &icmp_tuple, &entry, 0) < 0) {
            send_signal_ct_fill_up (ctx, SIGNAL_PROTO_V4);
            return DROP_CT_CREATE_FAILED;
        }
    }
    return 0;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/conntrack.h" funcheader="static __always_inline bool ct_has_nodeport_egress_entry4 (const void *map, struct ipv4_ct_tuple *ingress_tuple)" startline="1017" endline="1032">
static __always_inline bool ct_has_nodeport_egress_entry4 (const void *map, struct ipv4_ct_tuple *ingress_tuple)
{
    __u8 prev_flags = ingress_tuple->flags;
    struct ct_entry *entry;
    ingress_tuple->flags = TUPLE_F_OUT;
    entry = map_lookup_elem (map, ingress_tuple);
    ingress_tuple->flags = prev_flags;
    if (entry)
        return entry->node_port;
    return 0;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/conntrack.h" funcheader="static __always_inline bool ct_has_nodeport_egress_entry6 (const void *map, struct ipv6_ct_tuple *ingress_tuple)" startline="1034" endline="1049">
static __always_inline bool ct_has_nodeport_egress_entry6 (const void *map, struct ipv6_ct_tuple *ingress_tuple)
{
    __u8 prev_flags = ingress_tuple->flags;
    struct ct_entry *entry;
    ingress_tuple->flags = TUPLE_F_OUT;
    entry = map_lookup_elem (map, ingress_tuple);
    ingress_tuple->flags = prev_flags;
    if (entry)
        return entry->node_port;
    return 0;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/conntrack.h" funcheader="static __always_inline void ct_update_nodeport (const void *map, const void *tuple, const bool node_port)" startline="1051" endline="1061">
static __always_inline void ct_update_nodeport (const void *map, const void *tuple, const bool node_port)
{
    struct ct_entry *entry;
    entry = map_lookup_elem (map, tuple);
    if (!entry)
        return;
    entry->node_port = node_port;
}
</source>
</doc>
