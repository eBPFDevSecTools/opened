<?xml version="1.0"?>
<doc>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/host_firewall.h" funcheader="static __always_inline int ipv6_host_policy_egress (struct  __ctx_buff *ctx, __u32 src_id, struct trace_ctx *trace)" startline="17" endline="100">
static __always_inline int ipv6_host_policy_egress (struct  __ctx_buff *ctx, __u32 src_id, struct trace_ctx *trace)
{
    int ret, verdict, l3_off = ETH_HLEN, l4_off, hdrlen;
    struct ct_state ct_state_new = {}, ct_state = {};
    __u8 policy_match_type = POLICY_MATCH_NONE;
    __u8 audited = 0;
    struct remote_endpoint_info *info;
    struct ipv6_ct_tuple tuple = {}
    ;
    __u32 dst_id = 0;
    union v6addr orig_dip;
    void *data, *data_end;
    struct ipv6hdr *ip6;
    if (src_id != HOST_ID)
        return CTX_ACT_OK;
    if (!revalidate_data (ctx, &data, &data_end, &ip6))
        return DROP_INVALID;
    tuple.nexthdr = ip6->nexthdr;
    ipv6_addr_copy (&tuple.saddr, (union v6addr *) &ip6->saddr);
    ipv6_addr_copy (&tuple.daddr, (union v6addr *) &ip6->daddr);
    ipv6_addr_copy (&orig_dip, (union v6addr *) &ip6->daddr);
    hdrlen = ipv6_hdrlen (ctx, & tuple.nexthdr);
    if (hdrlen < 0)
        return hdrlen;
    l4_off = l3_off + hdrlen;
    ret = ct_lookup6 (get_ct_map6 (& tuple), & tuple, ctx, l4_off, CT_EGRESS, & ct_state, & trace -> monitor);
    if (ret < 0)
        return ret;
    trace->reason = (enum trace_reason) ret;
    info = lookup_ip6_remote_endpoint (& orig_dip);
    if (info && info->sec_label)
        dst_id = info->sec_label;
    cilium_dbg (ctx, info ? DBG_IP_ID_MAP_SUCCEED6 : DBG_IP_ID_MAP_FAILED6, orig_dip.p4, dst_id);
    verdict = policy_can_egress6 (ctx, & tuple, src_id, dst_id, & policy_match_type, & audited);
    if (ret != CT_REPLY && ret != CT_RELATED && verdict < 0) {
        send_policy_verdict_notify (ctx, dst_id, tuple.dport, tuple.nexthdr, POLICY_EGRESS, 1, verdict, policy_match_type, audited);
        return verdict;
    }
    switch (ret) {
    case CT_NEW :
        send_policy_verdict_notify (ctx, dst_id, tuple.dport, tuple.nexthdr, POLICY_EGRESS, 1, verdict, policy_match_type, audited);
        ct_state_new.src_sec_id = HOST_ID;
        ret = ct_create6 (get_ct_map6 (& tuple), & CT_MAP_ANY6, & tuple, ctx, CT_EGRESS, & ct_state_new, verdict > 0, false);
        if (IS_ERR (ret))
            return ret;
        break;
    case CT_REOPENED :
        send_policy_verdict_notify (ctx, dst_id, tuple.dport, tuple.nexthdr, POLICY_EGRESS, 1, verdict, policy_match_type, audited);
    case CT_ESTABLISHED :
    case CT_RELATED :
    case CT_REPLY :
        break;
    default :
        return DROP_UNKNOWN_CT;
    }
    return CTX_ACT_OK;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/host_firewall.h" funcheader="static __always_inline int ipv6_host_policy_ingress (struct  __ctx_buff *ctx, __u32 *src_id, struct trace_ctx *trace)" startline="102" endline="199">
static __always_inline int ipv6_host_policy_ingress (struct  __ctx_buff *ctx, __u32 *src_id, struct trace_ctx *trace)
{
    struct ct_state ct_state_new = {}, ct_state = {};
    __u8 policy_match_type = POLICY_MATCH_NONE;
    __u8 audited = 0;
    __u32 dst_id = WORLD_ID;
    struct remote_endpoint_info *info;
    int ret, verdict, l4_off, hdrlen;
    struct ipv6_ct_tuple tuple = {}
    ;
    union v6addr orig_sip;
    void *data, *data_end;
    struct ipv6hdr *ip6;
    if (!revalidate_data (ctx, &data, &data_end, &ip6))
        return DROP_INVALID;
    ipv6_addr_copy (&tuple.daddr, (union v6addr *) &ip6->daddr);
    info = lookup_ip6_remote_endpoint (& tuple.daddr);
    if (info && info->sec_label)
        dst_id = info->sec_label;
    cilium_dbg (ctx, info ? DBG_IP_ID_MAP_SUCCEED6 : DBG_IP_ID_MAP_FAILED6, tuple.daddr.p4, dst_id);
    if (dst_id != HOST_ID)
        return CTX_ACT_OK;
    tuple.nexthdr = ip6->nexthdr;
    ipv6_addr_copy (&tuple.saddr, (union v6addr *) &ip6->saddr);
    ipv6_addr_copy (&orig_sip, (union v6addr *) &ip6->saddr);
    hdrlen = ipv6_hdrlen (ctx, & tuple.nexthdr);
    if (hdrlen < 0)
        return hdrlen;
    l4_off = ETH_HLEN + hdrlen;
    ret = ct_lookup6 (get_ct_map6 (& tuple), & tuple, ctx, l4_off, CT_INGRESS, & ct_state, & trace -> monitor);
    if (ret < 0)
        return ret;
    trace->reason = (enum trace_reason) ret;
    info = lookup_ip6_remote_endpoint (& orig_sip);
    if (info && info->sec_label)
        *src_id = info->sec_label;
    cilium_dbg (ctx, info ? DBG_IP_ID_MAP_SUCCEED6 : DBG_IP_ID_MAP_FAILED6, orig_sip.p4, *src_id);
    verdict = policy_can_access_ingress (ctx, * src_id, dst_id, tuple.dport, tuple.nexthdr, false, & policy_match_type, & audited);
    if (ret != CT_REPLY && ret != CT_RELATED && verdict < 0) {
        send_policy_verdict_notify (ctx, *src_id, tuple.dport, tuple.nexthdr, POLICY_INGRESS, 1, verdict, policy_match_type, audited);
        return verdict;
    }
    switch (ret) {
    case CT_NEW :
        send_policy_verdict_notify (ctx, *src_id, tuple.dport, tuple.nexthdr, POLICY_INGRESS, 1, verdict, policy_match_type, audited);
        ct_state_new.src_sec_id = *src_id;
        ct_state_new.node_port = ct_state.node_port;
        ret = ct_create6 (get_ct_map6 (& tuple), & CT_MAP_ANY6, & tuple, ctx, CT_INGRESS, & ct_state_new, verdict > 0, false);
        if (IS_ERR (ret))
            return ret;
    case CT_REOPENED :
        send_policy_verdict_notify (ctx, *src_id, tuple.dport, tuple.nexthdr, POLICY_INGRESS, 1, verdict, policy_match_type, audited);
    case CT_ESTABLISHED :
    case CT_RELATED :
    case CT_REPLY :
        break;
    default :
        return DROP_UNKNOWN_CT;
    }
    ctx_change_type (ctx, PACKET_HOST);
    return CTX_ACT_OK;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/host_firewall.h" funcheader="static __always_inline int whitelist_snated_egress_connections (struct  __ctx_buff *ctx, __u32 ipcache_srcid, struct trace_ctx *trace)" startline="204" endline="249">
static __always_inline int whitelist_snated_egress_connections (struct  __ctx_buff *ctx, __u32 ipcache_srcid, struct trace_ctx *trace)
{
    struct ct_state ct_state_new = {}, ct_state = {};
    struct ipv4_ct_tuple tuple = {}
    ;
    void *data, *data_end;
    struct iphdr *ip4;
    int ret, l4_off;
    if (ipcache_srcid == HOST_ID) {
        if (!revalidate_data (ctx, &data, &data_end, &ip4))
            return DROP_INVALID;
        tuple.nexthdr = ip4->protocol;
        tuple.daddr = ip4->daddr;
        tuple.saddr = ip4->saddr;
        l4_off = ETH_HLEN + ipv4_hdrlen (ip4);
        ret = ct_lookup4 (get_ct_map4 (& tuple), & tuple, ctx, l4_off, CT_EGRESS, & ct_state, & trace -> monitor);
        if (ret < 0)
            return ret;
        trace->reason = (enum trace_reason) ret;
        if (ret == CT_NEW) {
            ret = ct_create4 (get_ct_map4 (& tuple), & CT_MAP_ANY4, & tuple, ctx, CT_EGRESS, & ct_state_new, false, false);
            if (IS_ERR (ret))
                return ret;
        }
    }
    return CTX_ACT_OK;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/host_firewall.h" funcheader="static __always_inline int ipv4_host_policy_egress (struct  __ctx_buff *ctx, __u32 src_id, __u32 ipcache_srcid __maybe_unused, struct trace_ctx *trace)" startline="252" endline="337">
static __always_inline int ipv4_host_policy_egress (struct  __ctx_buff *ctx, __u32 src_id, __u32 ipcache_srcid __maybe_unused, struct trace_ctx *trace)
{
    struct ct_state ct_state_new = {}, ct_state = {};
    int ret, verdict, l4_off, l3_off = ETH_HLEN;
    __u8 policy_match_type = POLICY_MATCH_NONE;
    __u8 audited = 0;
    struct remote_endpoint_info *info;
    struct ipv4_ct_tuple tuple = {}
    ;
    __u32 dst_id = 0;
    void *data, *data_end;
    struct iphdr *ip4;
    if (src_id != HOST_ID) {

#  ifndef ENABLE_MASQUERADE
        return whitelist_snated_egress_connections (ctx, ipcache_srcid, trace);

#  else
        return CTX_ACT_OK;

#  endif
    }
    if (!revalidate_data (ctx, &data, &data_end, &ip4))
        return DROP_INVALID;
    tuple.nexthdr = ip4->protocol;
    tuple.daddr = ip4->daddr;
    tuple.saddr = ip4->saddr;
    l4_off = l3_off + ipv4_hdrlen (ip4);
    ret = ct_lookup4 (get_ct_map4 (& tuple), & tuple, ctx, l4_off, CT_EGRESS, & ct_state, & trace -> monitor);
    if (ret < 0)
        return ret;
    trace->reason = (enum trace_reason) ret;
    info = lookup_ip4_remote_endpoint (ip4 -> daddr);
    if (info && info->sec_label)
        dst_id = info->sec_label;
    cilium_dbg (ctx, info ? DBG_IP_ID_MAP_SUCCEED4 : DBG_IP_ID_MAP_FAILED4, ip4->daddr, dst_id);
    verdict = policy_can_egress4 (ctx, & tuple, src_id, dst_id, & policy_match_type, & audited);
    if (ret != CT_REPLY && ret != CT_RELATED && verdict < 0) {
        send_policy_verdict_notify (ctx, dst_id, tuple.dport, tuple.nexthdr, POLICY_EGRESS, 0, verdict, policy_match_type, audited);
        return verdict;
    }
    switch (ret) {
    case CT_NEW :
        send_policy_verdict_notify (ctx, dst_id, tuple.dport, tuple.nexthdr, POLICY_EGRESS, 0, verdict, policy_match_type, audited);
        ct_state_new.src_sec_id = HOST_ID;
        ret = ct_create4 (get_ct_map4 (& tuple), & CT_MAP_ANY4, & tuple, ctx, CT_EGRESS, & ct_state_new, verdict > 0, false);
        if (IS_ERR (ret))
            return ret;
        break;
    case CT_REOPENED :
        send_policy_verdict_notify (ctx, dst_id, tuple.dport, tuple.nexthdr, POLICY_EGRESS, 0, verdict, policy_match_type, audited);
    case CT_ESTABLISHED :
    case CT_RELATED :
    case CT_REPLY :
        break;
    default :
        return DROP_UNKNOWN_CT;
    }
    return CTX_ACT_OK;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/lib/host_firewall.h" funcheader="static __always_inline int ipv4_host_policy_ingress (struct  __ctx_buff *ctx, __u32 *src_id, struct trace_ctx *trace)" startline="339" endline="439">
static __always_inline int ipv4_host_policy_ingress (struct  __ctx_buff *ctx, __u32 *src_id, struct trace_ctx *trace)
{
    struct ct_state ct_state_new = {}, ct_state = {};
    int ret, verdict, l4_off, l3_off = ETH_HLEN;
    __u8 policy_match_type = POLICY_MATCH_NONE;
    __u8 audited = 0;
    __u32 dst_id = WORLD_ID;
    struct remote_endpoint_info *info;
    struct ipv4_ct_tuple tuple = {}
    ;
    bool is_untracked_fragment = false;
    void *data, *data_end;
    struct iphdr *ip4;
    if (!revalidate_data (ctx, &data, &data_end, &ip4))
        return DROP_INVALID;
    info = lookup_ip4_remote_endpoint (ip4 -> daddr);
    if (info && info->sec_label)
        dst_id = info->sec_label;
    cilium_dbg (ctx, info ? DBG_IP_ID_MAP_SUCCEED4 : DBG_IP_ID_MAP_FAILED4, ip4->daddr, dst_id);
    if (dst_id != HOST_ID)
        return CTX_ACT_OK;
    tuple.nexthdr = ip4->protocol;
    tuple.daddr = ip4->daddr;
    tuple.saddr = ip4->saddr;
    l4_off = l3_off + ipv4_hdrlen (ip4);

#  ifndef ENABLE_IPV4_FRAGMENTS
    is_untracked_fragment = ipv4_is_fragment (ip4);

#  endif
    ret = ct_lookup4 (get_ct_map4 (& tuple), & tuple, ctx, l4_off, CT_INGRESS, & ct_state, & trace -> monitor);
    if (ret < 0)
        return ret;
    trace->reason = (enum trace_reason) ret;
    info = lookup_ip4_remote_endpoint (ip4 -> saddr);
    if (info && info->sec_label)
        *src_id = info->sec_label;
    cilium_dbg (ctx, info ? DBG_IP_ID_MAP_SUCCEED4 : DBG_IP_ID_MAP_FAILED4, ip4->saddr, *src_id);
    verdict = policy_can_access_ingress (ctx, * src_id, dst_id, tuple.dport, tuple.nexthdr, is_untracked_fragment, & policy_match_type, & audited);
    if (ret != CT_REPLY && ret != CT_RELATED && verdict < 0) {
        send_policy_verdict_notify (ctx, *src_id, tuple.dport, tuple.nexthdr, POLICY_INGRESS, 0, verdict, policy_match_type, audited);
        return verdict;
    }
    switch (ret) {
    case CT_NEW :
        send_policy_verdict_notify (ctx, *src_id, tuple.dport, tuple.nexthdr, POLICY_INGRESS, 0, verdict, policy_match_type, audited);
        ct_state_new.src_sec_id = *src_id;
        ct_state_new.node_port = ct_state.node_port;
        ret = ct_create4 (get_ct_map4 (& tuple), & CT_MAP_ANY4, & tuple, ctx, CT_INGRESS, & ct_state_new, verdict > 0, false);
        if (IS_ERR (ret))
            return ret;
    case CT_REOPENED :
        send_policy_verdict_notify (ctx, *src_id, tuple.dport, tuple.nexthdr, POLICY_INGRESS, 0, verdict, policy_match_type, audited);
    case CT_ESTABLISHED :
    case CT_RELATED :
    case CT_REPLY :
        break;
    default :
        return DROP_UNKNOWN_CT;
    }
    ctx_change_type (ctx, PACKET_HOST);
    return CTX_ACT_OK;
}
</source>
</doc>
