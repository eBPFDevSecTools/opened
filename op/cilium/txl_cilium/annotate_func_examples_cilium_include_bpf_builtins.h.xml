<?xml version="1.0"?>
<doc>
<source file="/home/palani/github/opened_extraction/examples/cilium/include/bpf/builtins.h" funcheader="static __always_inline __maybe_unused void __bpf_memset_builtin (void *d, __u8 c, __u64 len)" startline="38" endline="45">
static __always_inline __maybe_unused void __bpf_memset_builtin (void *d, __u8 c, __u64 len)
{
    __builtin_memset (d, c, len);
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/include/bpf/builtins.h" funcheader="static __always_inline void __bpf_memzero (void *d, __u64 len)" startline="47" endline="126">
static __always_inline void __bpf_memzero (void *d, __u64 len)
{

#if __clang_major__ >= 10
    if (!__builtin_constant_p (len))
        __throw_build_bug ();
    d += len;
    switch (len) {
    case 96 :
        __it_set (d, 64);
    case 88 :
    jmp_88 :
        __it_set (d, 64);
    case 80 :
    jmp_80 :
        __it_set (d, 64);
    case 72 :
    jmp_72 :
        __it_set (d, 64);
    case 64 :
    jmp_64 :
        __it_set (d, 64);
    case 56 :
    jmp_56 :
        __it_set (d, 64);
    case 48 :
    jmp_48 :
        __it_set (d, 64);
    case 40 :
    jmp_40 :
        __it_set (d, 64);
    case 32 :
    jmp_32 :
        __it_set (d, 64);
    case 24 :
    jmp_24 :
        __it_set (d, 64);
    case 16 :
    jmp_16 :
        __it_set (d, 64);
    case 8 :
    jmp_8 :
        __it_set (d, 64);
        break;
    case 94 :
        __it_set (d, 16);
        __it_set (d, 32);
        goto jmp_88;
    case 86 :
        __it_set (d, 16);
        __it_set (d, 32);
        goto jmp_80;
    case 78 :
        __it_set (d, 16);
        __it_set (d, 32);
        goto jmp_72;
    case 70 :
        __it_set (d, 16);
        __it_set (d, 32);
        goto jmp_64;
    case 62 :
        __it_set (d, 16);
        __it_set (d, 32);
        goto jmp_56;
    case 54 :
        __it_set (d, 16);
        __it_set (d, 32);
        goto jmp_48;
    case 46 :
        __it_set (d, 16);
        __it_set (d, 32);
        goto jmp_40;
    case 38 :
        __it_set (d, 16);
        __it_set (d, 32);
        goto jmp_32;
    case 30 :
        __it_set (d, 16);
        __it_set (d, 32);
        goto jmp_24;
    case 22 :
        __it_set (d, 16);
        __it_set (d, 32);
        goto jmp_16;
    case 14 :
        __it_set (d, 16);
        __it_set (d, 32);
        goto jmp_8;
    case 6 :
        __it_set (d, 16);
        __it_set (d, 32);
        break;
    case 92 :
        __it_set (d, 32);
        goto jmp_88;
    case 84 :
        __it_set (d, 32);
        goto jmp_80;
    case 76 :
        __it_set (d, 32);
        goto jmp_72;
    case 68 :
        __it_set (d, 32);
        goto jmp_64;
    case 60 :
        __it_set (d, 32);
        goto jmp_56;
    case 52 :
        __it_set (d, 32);
        goto jmp_48;
    case 44 :
        __it_set (d, 32);
        goto jmp_40;
    case 36 :
        __it_set (d, 32);
        goto jmp_32;
    case 28 :
        __it_set (d, 32);
        goto jmp_24;
    case 20 :
        __it_set (d, 32);
        goto jmp_16;
    case 12 :
        __it_set (d, 32);
        goto jmp_8;
    case 4 :
        __it_set (d, 32);
        break;
    case 90 :
        __it_set (d, 16);
        goto jmp_88;
    case 82 :
        __it_set (d, 16);
        goto jmp_80;
    case 74 :
        __it_set (d, 16);
        goto jmp_72;
    case 66 :
        __it_set (d, 16);
        goto jmp_64;
    case 58 :
        __it_set (d, 16);
        goto jmp_56;
    case 50 :
        __it_set (d, 16);
        goto jmp_48;
    case 42 :
        __it_set (d, 16);
        goto jmp_40;
    case 34 :
        __it_set (d, 16);
        goto jmp_32;
    case 26 :
        __it_set (d, 16);
        goto jmp_24;
    case 18 :
        __it_set (d, 16);
        goto jmp_16;
    case 10 :
        __it_set (d, 16);
        goto jmp_8;
    case 2 :
        __it_set (d, 16);
        break;
    case 1 :
        __it_set (d, 8);
        break;
    default :
        __throw_build_bug ();
    }

#else
    __bpf_memset_builtin (d, 0, len);

#endif
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/include/bpf/builtins.h" funcheader="static __always_inline __maybe_unused void __bpf_no_builtin_memset (void * d __maybe_unused, __u8 c __maybe_unused, __u64 len __maybe_unused)" startline="128" endline="133">
static __always_inline __maybe_unused void __bpf_no_builtin_memset (void * d __maybe_unused, __u8 c __maybe_unused, __u64 len __maybe_unused)
{
    __throw_build_bug ();
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/include/bpf/builtins.h" funcheader="static __always_inline  __nobuiltin (\"memset\") void memset (void *d, int c, __u64 len)" startline="138" endline="145">
static __always_inline  __nobuiltin ("memset") void memset (void *d, int c, __u64 len)
{
    if (__builtin_constant_p (len) && __builtin_constant_p (c) && c == 0)
        __bpf_memzero (d, len);
    else
        __bpf_memset_builtin (d, (__u8) c, len);
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/include/bpf/builtins.h" funcheader="static __always_inline __maybe_unused void __bpf_memcpy_builtin (void *d, const void *s, __u64 len)" startline="147" endline="152">
static __always_inline __maybe_unused void __bpf_memcpy_builtin (void *d, const void *s, __u64 len)
{
    __builtin_memcpy (d, s, len);
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/include/bpf/builtins.h" funcheader="static __always_inline void __bpf_memcpy (void *d, const void *s, __u64 len)" startline="154" endline="239">
static __always_inline void __bpf_memcpy (void *d, const void *s, __u64 len)
{

#if __clang_major__ >= 10
    if (!__builtin_constant_p (len))
        __throw_build_bug ();
    d += len;
    s += len;
    if (len > 1 && len % 2 == 1) {
        __it_mob (d, s, 8);
        len -= 1;
    }
    switch (len) {
    case 96 :
        __it_mob (d, s, 64);
    case 88 :
    jmp_88 :
        __it_mob (d, s, 64);
    case 80 :
    jmp_80 :
        __it_mob (d, s, 64);
    case 72 :
    jmp_72 :
        __it_mob (d, s, 64);
    case 64 :
    jmp_64 :
        __it_mob (d, s, 64);
    case 56 :
    jmp_56 :
        __it_mob (d, s, 64);
    case 48 :
    jmp_48 :
        __it_mob (d, s, 64);
    case 40 :
    jmp_40 :
        __it_mob (d, s, 64);
    case 32 :
    jmp_32 :
        __it_mob (d, s, 64);
    case 24 :
    jmp_24 :
        __it_mob (d, s, 64);
    case 16 :
    jmp_16 :
        __it_mob (d, s, 64);
    case 8 :
    jmp_8 :
        __it_mob (d, s, 64);
        break;
    case 94 :
        __it_mob (d, s, 16);
        __it_mob (d, s, 32);
        goto jmp_88;
    case 86 :
        __it_mob (d, s, 16);
        __it_mob (d, s, 32);
        goto jmp_80;
    case 78 :
        __it_mob (d, s, 16);
        __it_mob (d, s, 32);
        goto jmp_72;
    case 70 :
        __it_mob (d, s, 16);
        __it_mob (d, s, 32);
        goto jmp_64;
    case 62 :
        __it_mob (d, s, 16);
        __it_mob (d, s, 32);
        goto jmp_56;
    case 54 :
        __it_mob (d, s, 16);
        __it_mob (d, s, 32);
        goto jmp_48;
    case 46 :
        __it_mob (d, s, 16);
        __it_mob (d, s, 32);
        goto jmp_40;
    case 38 :
        __it_mob (d, s, 16);
        __it_mob (d, s, 32);
        goto jmp_32;
    case 30 :
        __it_mob (d, s, 16);
        __it_mob (d, s, 32);
        goto jmp_24;
    case 22 :
        __it_mob (d, s, 16);
        __it_mob (d, s, 32);
        goto jmp_16;
    case 14 :
        __it_mob (d, s, 16);
        __it_mob (d, s, 32);
        goto jmp_8;
    case 6 :
        __it_mob (d, s, 16);
        __it_mob (d, s, 32);
        break;
    case 92 :
        __it_mob (d, s, 32);
        goto jmp_88;
    case 84 :
        __it_mob (d, s, 32);
        goto jmp_80;
    case 76 :
        __it_mob (d, s, 32);
        goto jmp_72;
    case 68 :
        __it_mob (d, s, 32);
        goto jmp_64;
    case 60 :
        __it_mob (d, s, 32);
        goto jmp_56;
    case 52 :
        __it_mob (d, s, 32);
        goto jmp_48;
    case 44 :
        __it_mob (d, s, 32);
        goto jmp_40;
    case 36 :
        __it_mob (d, s, 32);
        goto jmp_32;
    case 28 :
        __it_mob (d, s, 32);
        goto jmp_24;
    case 20 :
        __it_mob (d, s, 32);
        goto jmp_16;
    case 12 :
        __it_mob (d, s, 32);
        goto jmp_8;
    case 4 :
        __it_mob (d, s, 32);
        break;
    case 90 :
        __it_mob (d, s, 16);
        goto jmp_88;
    case 82 :
        __it_mob (d, s, 16);
        goto jmp_80;
    case 74 :
        __it_mob (d, s, 16);
        goto jmp_72;
    case 66 :
        __it_mob (d, s, 16);
        goto jmp_64;
    case 58 :
        __it_mob (d, s, 16);
        goto jmp_56;
    case 50 :
        __it_mob (d, s, 16);
        goto jmp_48;
    case 42 :
        __it_mob (d, s, 16);
        goto jmp_40;
    case 34 :
        __it_mob (d, s, 16);
        goto jmp_32;
    case 26 :
        __it_mob (d, s, 16);
        goto jmp_24;
    case 18 :
        __it_mob (d, s, 16);
        goto jmp_16;
    case 10 :
        __it_mob (d, s, 16);
        goto jmp_8;
    case 2 :
        __it_mob (d, s, 16);
        break;
    case 1 :
        __it_mob (d, s, 8);
        break;
    default :
        __throw_build_bug ();
    }

#else
    __bpf_memcpy_builtin (d, s, len);

#endif
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/include/bpf/builtins.h" funcheader="static __always_inline __maybe_unused void __bpf_no_builtin_memcpy (void * d __maybe_unused, const void * s __maybe_unused, __u64 len __maybe_unused)" startline="241" endline="246">
static __always_inline __maybe_unused void __bpf_no_builtin_memcpy (void * d __maybe_unused, const void * s __maybe_unused, __u64 len __maybe_unused)
{
    __throw_build_bug ();
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/include/bpf/builtins.h" funcheader="static __always_inline  __nobuiltin (\"memcpy\") void memcpy (void *d, const void *s, __u64 len)" startline="251" endline="255">
static __always_inline  __nobuiltin ("memcpy") void memcpy (void *d, const void *s, __u64 len)
{
    return __bpf_memcpy (d, s, len);
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/include/bpf/builtins.h" funcheader="static __always_inline __maybe_unused __u64 __bpf_memcmp_builtin (const void *x, const void *y, __u64 len)" startline="257" endline="270">
static __always_inline __maybe_unused __u64 __bpf_memcmp_builtin (const void *x, const void *y, __u64 len)
{
    return __builtin_bcmp (x, y, len);
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/include/bpf/builtins.h" funcheader="static __always_inline __u64 __bpf_memcmp (const void *x, const void *y, __u64 len)" startline="272" endline="345">
static __always_inline __u64 __bpf_memcmp (const void *x, const void *y, __u64 len)
{

#if __clang_major__ >= 10
    __u64 r = 0;
    if (!__builtin_constant_p (len))
        __throw_build_bug ();
    x += len;
    y += len;
    if (len > 1 && len % 2 == 1) {
        __it_xor (x, y, r, 8);
        len -= 1;
    }
    switch (len) {
    case 72 :
        __it_xor (x, y, r, 64);
    case 64 :
    jmp_64 :
        __it_xor (x, y, r, 64);
    case 56 :
    jmp_56 :
        __it_xor (x, y, r, 64);
    case 48 :
    jmp_48 :
        __it_xor (x, y, r, 64);
    case 40 :
    jmp_40 :
        __it_xor (x, y, r, 64);
    case 32 :
    jmp_32 :
        __it_xor (x, y, r, 64);
    case 24 :
    jmp_24 :
        __it_xor (x, y, r, 64);
    case 16 :
    jmp_16 :
        __it_xor (x, y, r, 64);
    case 8 :
    jmp_8 :
        __it_xor (x, y, r, 64);
        break;
    case 70 :
        __it_xor (x, y, r, 16);
        __it_xor (x, y, r, 32);
        goto jmp_64;
    case 62 :
        __it_xor (x, y, r, 16);
        __it_xor (x, y, r, 32);
        goto jmp_56;
    case 54 :
        __it_xor (x, y, r, 16);
        __it_xor (x, y, r, 32);
        goto jmp_48;
    case 46 :
        __it_xor (x, y, r, 16);
        __it_xor (x, y, r, 32);
        goto jmp_40;
    case 38 :
        __it_xor (x, y, r, 16);
        __it_xor (x, y, r, 32);
        goto jmp_32;
    case 30 :
        __it_xor (x, y, r, 16);
        __it_xor (x, y, r, 32);
        goto jmp_24;
    case 22 :
        __it_xor (x, y, r, 16);
        __it_xor (x, y, r, 32);
        goto jmp_16;
    case 14 :
        __it_xor (x, y, r, 16);
        __it_xor (x, y, r, 32);
        goto jmp_8;
    case 6 :
        __it_xor (x, y, r, 16);
        __it_xor (x, y, r, 32);
        break;
    case 68 :
        __it_xor (x, y, r, 32);
        goto jmp_64;
    case 60 :
        __it_xor (x, y, r, 32);
        goto jmp_56;
    case 52 :
        __it_xor (x, y, r, 32);
        goto jmp_48;
    case 44 :
        __it_xor (x, y, r, 32);
        goto jmp_40;
    case 36 :
        __it_xor (x, y, r, 32);
        goto jmp_32;
    case 28 :
        __it_xor (x, y, r, 32);
        goto jmp_24;
    case 20 :
        __it_xor (x, y, r, 32);
        goto jmp_16;
    case 12 :
        __it_xor (x, y, r, 32);
        goto jmp_8;
    case 4 :
        __it_xor (x, y, r, 32);
        break;
    case 66 :
        __it_xor (x, y, r, 16);
        goto jmp_64;
    case 58 :
        __it_xor (x, y, r, 16);
        goto jmp_56;
    case 50 :
        __it_xor (x, y, r, 16);
        goto jmp_48;
    case 42 :
        __it_xor (x, y, r, 16);
        goto jmp_40;
    case 34 :
        __it_xor (x, y, r, 16);
        goto jmp_32;
    case 26 :
        __it_xor (x, y, r, 16);
        goto jmp_24;
    case 18 :
        __it_xor (x, y, r, 16);
        goto jmp_16;
    case 10 :
        __it_xor (x, y, r, 16);
        goto jmp_8;
    case 2 :
        __it_xor (x, y, r, 16);
        break;
    case 1 :
        __it_xor (x, y, r, 8);
        break;
    default :
        __throw_build_bug ();
    }
    return r;

#else
    return __bpf_memcmp_builtin (x, y, len);

#endif
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/include/bpf/builtins.h" funcheader="static __always_inline __maybe_unused __u64 __bpf_no_builtin_memcmp (const void * x __maybe_unused, const void * y __maybe_unused, __u64 len __maybe_unused)" startline="347" endline="353">
static __always_inline __maybe_unused __u64 __bpf_no_builtin_memcmp (const void * x __maybe_unused, const void * y __maybe_unused, __u64 len __maybe_unused)
{
    __throw_build_bug ();
    return 0;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/include/bpf/builtins.h" funcheader="static __always_inline  __nobuiltin (\"memcmp\") __u64 memcmp (const void *x, const void *y, __u64 len)" startline="361" endline="366">
static __always_inline  __nobuiltin ("memcmp") __u64 memcmp (const void *x, const void *y, __u64 len)
{
    return __bpf_memcmp (x, y, len);
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/include/bpf/builtins.h" funcheader="static __always_inline __maybe_unused void __bpf_memmove_builtin (void *d, const void *s, __u64 len)" startline="368" endline="373">
static __always_inline __maybe_unused void __bpf_memmove_builtin (void *d, const void *s, __u64 len)
{
    __builtin_memmove (d, s, len);
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/include/bpf/builtins.h" funcheader="static __always_inline void __bpf_memmove_bwd (void *d, const void *s, __u64 len)" startline="375" endline="379">
static __always_inline void __bpf_memmove_bwd (void *d, const void *s, __u64 len)
{
    __bpf_memcpy (d, s, len);
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/include/bpf/builtins.h" funcheader="static __always_inline void __bpf_memmove_fwd (void *d, const void *s, __u64 len)" startline="381" endline="458">
static __always_inline void __bpf_memmove_fwd (void *d, const void *s, __u64 len)
{

#if __clang_major__ >= 10
    if (!__builtin_constant_p (len))
        __throw_build_bug ();
    switch (len) {
    case 96 :
        __it_mof (d, s, 64);
    case 88 :
    jmp_88 :
        __it_mof (d, s, 64);
    case 80 :
    jmp_80 :
        __it_mof (d, s, 64);
    case 72 :
    jmp_72 :
        __it_mof (d, s, 64);
    case 64 :
    jmp_64 :
        __it_mof (d, s, 64);
    case 56 :
    jmp_56 :
        __it_mof (d, s, 64);
    case 48 :
    jmp_48 :
        __it_mof (d, s, 64);
    case 40 :
    jmp_40 :
        __it_mof (d, s, 64);
    case 32 :
    jmp_32 :
        __it_mof (d, s, 64);
    case 24 :
    jmp_24 :
        __it_mof (d, s, 64);
    case 16 :
    jmp_16 :
        __it_mof (d, s, 64);
    case 8 :
    jmp_8 :
        __it_mof (d, s, 64);
        break;
    case 94 :
        __it_mof (d, s, 16);
        __it_mof (d, s, 32);
        goto jmp_88;
    case 86 :
        __it_mof (d, s, 16);
        __it_mof (d, s, 32);
        goto jmp_80;
    case 78 :
        __it_mof (d, s, 16);
        __it_mof (d, s, 32);
        goto jmp_72;
    case 70 :
        __it_mof (d, s, 16);
        __it_mof (d, s, 32);
        goto jmp_64;
    case 62 :
        __it_mof (d, s, 16);
        __it_mof (d, s, 32);
        goto jmp_56;
    case 54 :
        __it_mof (d, s, 16);
        __it_mof (d, s, 32);
        goto jmp_48;
    case 46 :
        __it_mof (d, s, 16);
        __it_mof (d, s, 32);
        goto jmp_40;
    case 38 :
        __it_mof (d, s, 16);
        __it_mof (d, s, 32);
        goto jmp_32;
    case 30 :
        __it_mof (d, s, 16);
        __it_mof (d, s, 32);
        goto jmp_24;
    case 22 :
        __it_mof (d, s, 16);
        __it_mof (d, s, 32);
        goto jmp_16;
    case 14 :
        __it_mof (d, s, 16);
        __it_mof (d, s, 32);
        goto jmp_8;
    case 6 :
        __it_mof (d, s, 16);
        __it_mof (d, s, 32);
        break;
    case 92 :
        __it_mof (d, s, 32);
        goto jmp_88;
    case 84 :
        __it_mof (d, s, 32);
        goto jmp_80;
    case 76 :
        __it_mof (d, s, 32);
        goto jmp_72;
    case 68 :
        __it_mof (d, s, 32);
        goto jmp_64;
    case 60 :
        __it_mof (d, s, 32);
        goto jmp_56;
    case 52 :
        __it_mof (d, s, 32);
        goto jmp_48;
    case 44 :
        __it_mof (d, s, 32);
        goto jmp_40;
    case 36 :
        __it_mof (d, s, 32);
        goto jmp_32;
    case 28 :
        __it_mof (d, s, 32);
        goto jmp_24;
    case 20 :
        __it_mof (d, s, 32);
        goto jmp_16;
    case 12 :
        __it_mof (d, s, 32);
        goto jmp_8;
    case 4 :
        __it_mof (d, s, 32);
        break;
    case 90 :
        __it_mof (d, s, 16);
        goto jmp_88;
    case 82 :
        __it_mof (d, s, 16);
        goto jmp_80;
    case 74 :
        __it_mof (d, s, 16);
        goto jmp_72;
    case 66 :
        __it_mof (d, s, 16);
        goto jmp_64;
    case 58 :
        __it_mof (d, s, 16);
        goto jmp_56;
    case 50 :
        __it_mof (d, s, 16);
        goto jmp_48;
    case 42 :
        __it_mof (d, s, 16);
        goto jmp_40;
    case 34 :
        __it_mof (d, s, 16);
        goto jmp_32;
    case 26 :
        __it_mof (d, s, 16);
        goto jmp_24;
    case 18 :
        __it_mof (d, s, 16);
        goto jmp_16;
    case 10 :
        __it_mof (d, s, 16);
        goto jmp_8;
    case 2 :
        __it_mof (d, s, 16);
        break;
    case 1 :
        __it_mof (d, s, 8);
        break;
    default :
        __throw_build_bug ();
    }

#else
    __bpf_memmove_builtin (d, s, len);

#endif
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/include/bpf/builtins.h" funcheader="static __always_inline __maybe_unused void __bpf_no_builtin_memmove (void * d __maybe_unused, const void * s __maybe_unused, __u64 len __maybe_unused)" startline="460" endline="465">
static __always_inline __maybe_unused void __bpf_no_builtin_memmove (void * d __maybe_unused, const void * s __maybe_unused, __u64 len __maybe_unused)
{
    __throw_build_bug ();
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/include/bpf/builtins.h" funcheader="static __always_inline void __bpf_memmove (void *d, const void *s, __u64 len)" startline="470" endline="485">
static __always_inline void __bpf_memmove (void *d, const void *s, __u64 len)
{
    if (d <= s)
        return __bpf_memmove_fwd (d, s, len);
    else
        return __bpf_memmove_bwd (d, s, len);
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/include/bpf/builtins.h" funcheader="static __always_inline  __nobuiltin (\"memmove\") void memmove (void *d, const void *s, __u64 len)" startline="487" endline="492">
static __always_inline  __nobuiltin ("memmove") void memmove (void *d, const void *s, __u64 len)
{
    return __bpf_memmove (d, s, len);
}
</source>
</doc>
