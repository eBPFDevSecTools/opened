<?xml version="1.0"?>
<doc>
<source file="/home/palani/github/opened_extraction/examples/cilium/bpf_overlay.c" funcheader="static __always_inline int handle_ipv6 (struct  __ctx_buff *ctx, __u32 *identity)" startline="46" endline="180">
static __always_inline int handle_ipv6 (struct  __ctx_buff *ctx, __u32 *identity)
{
    int ret, l3_off = ETH_HLEN, hdrlen;
    void *data_end, *data;
    struct ipv6hdr *ip6;
    struct bpf_tunnel_key key = {}
    ;
    struct endpoint_info *ep;
    bool decrypted;
    if (!revalidate_data_pull (ctx, &data, &data_end, &ip6))
        return DROP_INVALID;

#ifdef ENABLE_NODEPORT
    if (!bpf_skip_nodeport (ctx)) {
        ret = nodeport_lb6 (ctx, * identity);
        if (ret < 0)
            return ret;
    }

#endif
    ret = encap_remap_v6_host_address (ctx, false);
    if (unlikely (ret < 0))
        return ret;
    if (!revalidate_data (ctx, &data, &data_end, &ip6))
        return DROP_INVALID;
    decrypted = ((ctx->mark & MARK_MAGIC_HOST_MASK) == MARK_MAGIC_DECRYPT);
    if (decrypted) {
        *identity = key.tunnel_id = get_identity (ctx);
    }
    else {
        if (unlikely (ctx_get_tunnel_key (ctx, &key, sizeof (key), 0) < 0))
            return DROP_NO_TUNNEL_KEY;
        *identity = key.tunnel_id;
        if (*identity == HOST_ID)
            return DROP_INVALID_IDENTITY;
        if (identity_is_remote_node (*identity)) {
            struct remote_endpoint_info *info;
            info = ipcache_lookup6 (& IPCACHE_MAP, (union v6addr *) & ip6 -> saddr, V6_CACHE_KEY_LEN);
            if (info)
                *identity = info->sec_label;
        }
    }
    cilium_dbg (ctx, DBG_DECAP, key.tunnel_id, key.tunnel_label);

#ifdef ENABLE_IPSEC
    if (!decrypted) {
        if (ip6->nexthdr != IPPROTO_ESP) {
            update_metrics (ctx_full_len (ctx), METRIC_INGRESS, REASON_PLAINTEXT);
            goto not_esp;
        }
        ctx->mark = MARK_MAGIC_DECRYPT;
        set_identity_mark (ctx, *identity);
        ctx_change_type (ctx, PACKET_HOST);
        send_trace_notify (ctx, TRACE_TO_STACK, 0, 0, 0, ctx->ingress_ifindex, TRACE_REASON_ENCRYPTED, TRACE_PAYLOAD_LEN);
        return CTX_ACT_OK;
    }
    ctx->mark = 0;
not_esp :

#endif
    ep = lookup_ip6_endpoint (ip6);
    if (ep) {
        __u8 nexthdr;
        if (ep->flags & ENDPOINT_F_HOST)
            goto to_host;
        nexthdr = ip6->nexthdr;
        hdrlen = ipv6_hdrlen (ctx, & nexthdr);
        if (hdrlen < 0)
            return hdrlen;
        return ipv6_local_delivery (ctx, l3_off, *identity, ep, METRIC_INGRESS, false);
    }
to_host :

#ifdef HOST_IFINDEX
    if (1) {
        union macaddr host_mac = HOST_IFINDEX_MAC;
        union macaddr router_mac = NODE_MAC;
        ret = ipv6_l3 (ctx, ETH_HLEN, (__u8 *) & router_mac.addr, (__u8 *) & host_mac.addr, METRIC_INGRESS);
        if (ret != CTX_ACT_OK)
            return ret;
        cilium_dbg_capture (ctx, DBG_CAPTURE_DELIVERY, HOST_IFINDEX);
        return ctx_redirect (ctx, HOST_IFINDEX, 0);
    }

#else
    return CTX_ACT_OK;

#endif
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/bpf_overlay.c" funcheader="int tail_handle_ipv6 (struct  __ctx_buff *ctx)" startline="183" endline="192">
int tail_handle_ipv6 (struct  __ctx_buff *ctx)
{
    __u32 src_identity = 0;
    int ret = handle_ipv6 (ctx, & src_identity);
    if (IS_ERR (ret))
        return send_drop_notify_error (ctx, src_identity, ret, CTX_ACT_DROP, METRIC_INGRESS);
    return ret;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/bpf_overlay.c" funcheader="static __always_inline int handle_ipv4 (struct  __ctx_buff *ctx, __u32 *identity)" startline="196" endline="333">
static __always_inline int handle_ipv4 (struct  __ctx_buff *ctx, __u32 *identity)
{
    void *data_end, *data;
    struct iphdr *ip4;
    struct endpoint_info *ep;
    struct bpf_tunnel_key key = {}
    ;
    bool decrypted;
    if (!revalidate_data_pull (ctx, &data, &data_end, &ip4))
        return DROP_INVALID;

#ifndef ENABLE_IPV4_FRAGMENTS
    if (ipv4_is_fragment (ip4))
        return DROP_FRAG_NOSUPPORT;

#endif

#ifdef ENABLE_NODEPORT
    if (!bpf_skip_nodeport (ctx)) {
        int ret = nodeport_lb4 (ctx, * identity);
        if (ret < 0)
            return ret;
    }

#endif
    if (!revalidate_data (ctx, &data, &data_end, &ip4))
        return DROP_INVALID;
    decrypted = ((ctx->mark & MARK_MAGIC_HOST_MASK) == MARK_MAGIC_DECRYPT);
    if (decrypted) {
        *identity = key.tunnel_id = get_identity (ctx);
    }
    else {
        if (unlikely (ctx_get_tunnel_key (ctx, &key, sizeof (key), 0) < 0))
            return DROP_NO_TUNNEL_KEY;
        *identity = key.tunnel_id;
        if (*identity == HOST_ID)
            return DROP_INVALID_IDENTITY;

#ifdef ENABLE_VTEP
        {
            struct vtep_key vkey = {}
            ;
            struct vtep_value *info;
            vkey.vtep_ip = ip4->saddr & VTEP_MASK;
            info = map_lookup_elem (& VTEP_MAP, & vkey);
            if (!info)
                goto skip_vtep;
            if (info->tunnel_endpoint) {
                if (*identity != WORLD_ID)
                    return DROP_INVALID_VNI;
            }
        }
    skip_vtep :

#endif
        if (identity_is_remote_node (*identity)) {
            struct remote_endpoint_info *info;
            info = ipcache_lookup4 (& IPCACHE_MAP, ip4 -> saddr, V4_CACHE_KEY_LEN);
            if (info)
                *identity = info->sec_label;
        }
    }
    cilium_dbg (ctx, DBG_DECAP, key.tunnel_id, key.tunnel_label);

#ifdef ENABLE_IPSEC
    if (!decrypted) {
        if (ip4->protocol != IPPROTO_ESP) {
            update_metrics (ctx_full_len (ctx), METRIC_INGRESS, REASON_PLAINTEXT);
            goto not_esp;
        }
        ctx->mark = MARK_MAGIC_DECRYPT;
        set_identity_mark (ctx, *identity);
        ctx_change_type (ctx, PACKET_HOST);
        send_trace_notify (ctx, TRACE_TO_STACK, 0, 0, 0, ctx->ingress_ifindex, TRACE_REASON_ENCRYPTED, TRACE_PAYLOAD_LEN);
        return CTX_ACT_OK;
    }
    ctx->mark = 0;
not_esp :

#endif
    ep = lookup_ip4_endpoint (ip4);
    if (ep) {
        if (ep->flags & ENDPOINT_F_HOST)
            goto to_host;
        return ipv4_local_delivery (ctx, ETH_HLEN, *identity, ip4, ep, METRIC_INGRESS, false);
    }
to_host :

#ifdef HOST_IFINDEX
    if (1) {
        union macaddr host_mac = HOST_IFINDEX_MAC;
        union macaddr router_mac = NODE_MAC;
        int ret;
        ret = ipv4_l3 (ctx, ETH_HLEN, (__u8 *) & router_mac.addr, (__u8 *) & host_mac.addr, ip4);
        if (ret != CTX_ACT_OK)
            return ret;
        cilium_dbg_capture (ctx, DBG_CAPTURE_DELIVERY, HOST_IFINDEX);
        return ctx_redirect (ctx, HOST_IFINDEX, 0);
    }

#else
    return CTX_ACT_OK;

#endif
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/bpf_overlay.c" funcheader="int tail_handle_ipv4 (struct  __ctx_buff *ctx)" startline="336" endline="345">
int tail_handle_ipv4 (struct  __ctx_buff *ctx)
{
    __u32 src_identity = 0;
    int ret = handle_ipv4 (ctx, & src_identity);
    if (IS_ERR (ret))
        return send_drop_notify_error (ctx, src_identity, ret, CTX_ACT_DROP, METRIC_INGRESS);
    return ret;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/bpf_overlay.c" funcheader="int tail_handle_arp (struct  __ctx_buff *ctx)" startline="353" endline="395">
int tail_handle_arp (struct  __ctx_buff *ctx)
{
    union macaddr mac = NODE_MAC;
    union macaddr smac;
    struct trace_ctx trace = {
        .reason = TRACE_REASON_CT_REPLY,
        .monitor = TRACE_PAYLOAD_LEN,}
    ;
    __be32 sip;
    __be32 tip;
    int ret;
    struct bpf_tunnel_key key = {}
    ;
    struct vtep_key vkey = {}
    ;
    struct vtep_value *info;
    if (unlikely (ctx_get_tunnel_key (ctx, &key, sizeof (key), 0) < 0))
        return send_drop_notify_error (ctx, 0, DROP_NO_TUNNEL_KEY, CTX_ACT_DROP, METRIC_INGRESS);
    if (!arp_validate (ctx, &mac, &smac, &sip, &tip) || !__lookup_ip4_endpoint (tip))
        goto pass_to_stack;
    vkey.vtep_ip = sip & VTEP_MASK;
    info = map_lookup_elem (& VTEP_MAP, & vkey);
    if (!info)
        goto pass_to_stack;
    ret = arp_prepare_response (ctx, & mac, tip, & smac, sip);
    if (unlikely (ret != 0))
        return send_drop_notify_error (ctx, 0, ret, CTX_ACT_DROP, METRIC_EGRESS);
    if (info->tunnel_endpoint)
        return __encap_and_redirect_with_nodeid (ctx, info->tunnel_endpoint, SECLABEL, WORLD_ID, &trace);
    return send_drop_notify_error (ctx, 0, DROP_UNKNOWN_L3, CTX_ACT_DROP, METRIC_EGRESS);
pass_to_stack :
    send_trace_notify (ctx, TRACE_TO_STACK, 0, 0, 0, ctx->ingress_ifindex, trace.reason, trace.monitor);
    return CTX_ACT_OK;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/bpf_overlay.c" funcheader="static __always_inline bool is_esp (struct  __ctx_buff *ctx, __u16 proto)" startline="401" endline="428">
static __always_inline bool is_esp (struct  __ctx_buff *ctx, __u16 proto)
{
    void *data, *data_end;
    __u8 protocol = 0;
    struct ipv6hdr * ip6 __maybe_unused;
    struct iphdr * ip4 __maybe_unused;
    switch (proto) {

#ifdef ENABLE_IPV6
    case bpf_htons (ETH_P_IPV6) :
        if (!revalidate_data_pull (ctx, &data, &data_end, &ip6))
            return false;
        protocol = ip6->nexthdr;
        break;

#endif

#ifdef ENABLE_IPV4
    case bpf_htons (ETH_P_IP) :
        if (!revalidate_data_pull (ctx, &data, &data_end, &ip4))
            return false;
        protocol = ip4->protocol;
        break;

#endif
    default :
        return false;
    }
    return protocol == IPPROTO_ESP;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/bpf_overlay.c" funcheader="int from_overlay (struct  __ctx_buff *ctx)" startline="435" endline="527">
int from_overlay (struct  __ctx_buff *ctx)
{
    __u16 proto;
    int ret;
    bpf_clear_meta (ctx);
    bpf_skip_nodeport_clear (ctx);
    if (!validate_ethertype (ctx, &proto)) {
        ret = CTX_ACT_OK;
        goto out;
    }

#ifdef ENABLE_IPSEC
    if (is_esp (ctx, proto))
        send_trace_notify (ctx, TRACE_FROM_OVERLAY, 0, 0, 0, ctx->ingress_ifindex, TRACE_REASON_ENCRYPTED, TRACE_PAYLOAD_LEN);
    else

#endif
        {
            __u32 identity = 0;
            enum trace_point obs_point = TRACE_FROM_OVERLAY;
            if ((ctx->mark & MARK_MAGIC_HOST_MASK) == MARK_MAGIC_DECRYPT) {
                identity = get_identity (ctx);
                obs_point = TRACE_FROM_STACK;
            }
            send_trace_notify (ctx, obs_point, identity, 0, 0, ctx->ingress_ifindex, TRACE_REASON_UNKNOWN, TRACE_PAYLOAD_LEN);
        }
    switch (proto) {
    case bpf_htons (ETH_P_IPV6) :

#ifdef ENABLE_IPV6
        ep_tail_call (ctx, CILIUM_CALL_IPV6_FROM_OVERLAY);
        ret = DROP_MISSED_TAIL_CALL;

#else
        ret = DROP_UNKNOWN_L3;

#endif
        break;
    case bpf_htons (ETH_P_IP) :

#ifdef ENABLE_IPV4
        ep_tail_call (ctx, CILIUM_CALL_IPV4_FROM_OVERLAY);
        ret = DROP_MISSED_TAIL_CALL;

#else
        ret = DROP_UNKNOWN_L3;

#endif
        break;

#ifdef ENABLE_VTEP
    case bpf_htons (ETH_P_ARP) :
        ep_tail_call (ctx, CILIUM_CALL_ARP);
        ret = DROP_MISSED_TAIL_CALL;
        break;

#endif
    default :
        ret = CTX_ACT_OK;
    }
out :
    if (IS_ERR (ret))
        return send_drop_notify_error (ctx, 0, ret, CTX_ACT_DROP, METRIC_INGRESS);
    return ret;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/bpf_overlay.c" funcheader="int to_overlay (struct  __ctx_buff *ctx)" startline="533" endline="568">
int to_overlay (struct  __ctx_buff *ctx)
{
    int ret;
    ret = encap_remap_v6_host_address (ctx, true);
    if (unlikely (ret < 0))
        goto out;

#ifdef ENABLE_BANDWIDTH_MANAGER
    ret = edt_sched_departure (ctx);
    if (ret == CTX_ACT_DROP) {
        update_metrics (ctx_full_len (ctx), METRIC_EGRESS, -DROP_EDT_HORIZON);
        return CTX_ACT_DROP;
    }

#endif

#ifdef ENABLE_NODEPORT
    if ((ctx->mark & MARK_MAGIC_SNAT_DONE) == MARK_MAGIC_SNAT_DONE) {
        ret = CTX_ACT_OK;
        goto out;
    }
    ret = handle_nat_fwd (ctx);

#endif
out :
    if (IS_ERR (ret))
        return send_drop_notify_error (ctx, 0, ret, CTX_ACT_DROP, METRIC_EGRESS);
    return ret;
}
</source>
</doc>
