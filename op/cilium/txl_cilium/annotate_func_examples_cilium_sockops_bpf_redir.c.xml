<?xml version="1.0"?>
<doc>
<source file="/home/sayandes/opened_extraction/examples/cilium/sockops/bpf_redir.c" funcheader="static __always_inline void sk_msg_extract4_key (const struct sk_msg_md *msg, struct sock_key *key)" startline="25" endline="39">
static __always_inline void sk_msg_extract4_key (const struct sk_msg_md *msg, struct sock_key *key)
{
    key->dip4 = msg->remote_ip4;
    key->sip4 = msg->local_ip4;
    key->family = ENDPOINT_KEY_IPV4;
    key->sport = (bpf_ntohl (msg->local_port) >> 16);
    key->dport = READ_ONCE (msg->remote_port) >> 16;
}
</source>
<source file="/home/sayandes/opened_extraction/examples/cilium/sockops/bpf_redir.c" funcheader="int bpf_redir_proxy (struct sk_msg_md *msg)" startline="42" endline="67">
int bpf_redir_proxy (struct sk_msg_md *msg)
{
    struct remote_endpoint_info *info;
    __u64 flags = BPF_F_INGRESS;
    struct sock_key key = {}
    ;
    __u32 dst_id = 0;
    int verdict;
    sk_msg_extract4_key (msg, &key);
    info = lookup_ip4_remote_endpoint (key.dip4);
    if (info != NULL && info->sec_label)
        dst_id = info->sec_label;
    else
        dst_id = WORLD_ID;
    verdict = policy_sk_egress (dst_id, key.sip4, (__u16) key.dport);
    if (verdict >= 0)
        msg_redirect_hash (msg, &SOCK_OPS_MAP, &key, flags);
    return SK_PASS;
}
</source>
</doc>
