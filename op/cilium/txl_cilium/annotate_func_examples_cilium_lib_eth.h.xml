<?xml version="1.0"?>
<doc>
<source file="/home/sayandes/opened_extraction/examples/cilium/lib/eth.h" funcheader="static __always_inline int eth_addrcmp (const union macaddr *a, const union macaddr *b)" startline="25" endline="35">
static __always_inline int eth_addrcmp (const union macaddr *a, const union macaddr *b)
{
    int tmp;
    tmp = a->p1 - b->p1;
    if (!tmp)
        tmp = a->p2 - b->p2;
    return tmp;
}
</source>
<source file="/home/sayandes/opened_extraction/examples/cilium/lib/eth.h" funcheader="static __always_inline int eth_is_bcast (const union macaddr *a)" startline="37" endline="48">
static __always_inline int eth_is_bcast (const union macaddr *a)
{
    union macaddr bcast;
    bcast.p1 = 0xffffffff;
    bcast.p2 = 0xffff;
    if (!eth_addrcmp (a, &bcast))
        return 1;
    else
        return 0;
}
</source>
<source file="/home/sayandes/opened_extraction/examples/cilium/lib/eth.h" funcheader="static __always_inline int eth_load_saddr (struct  __ctx_buff *ctx, __u8 *mac, int off)" startline="50" endline="54">
static __always_inline int eth_load_saddr (struct  __ctx_buff *ctx, __u8 *mac, int off)
{
    return ctx_load_bytes (ctx, off + ETH_ALEN, mac, ETH_ALEN);
}
</source>
<source file="/home/sayandes/opened_extraction/examples/cilium/lib/eth.h" funcheader="static __always_inline int eth_store_saddr_aligned (struct  __ctx_buff *ctx, const __u8 *mac, int off)" startline="56" endline="60">
static __always_inline int eth_store_saddr_aligned (struct  __ctx_buff *ctx, const __u8 *mac, int off)
{
    return ctx_store_bytes (ctx, off + ETH_ALEN, mac, ETH_ALEN, 0);
}
</source>
<source file="/home/sayandes/opened_extraction/examples/cilium/lib/eth.h" funcheader="static __always_inline int eth_store_saddr (struct  __ctx_buff *ctx, const __u8 *mac, int off)" startline="62" endline="79">
static __always_inline int eth_store_saddr (struct  __ctx_buff *ctx, const __u8 *mac, int off)
{

#if !CTX_DIRECT_WRITE_OK
    return eth_store_saddr_aligned (ctx, mac, off);

#else
    void *data_end = ctx_data_end (ctx);
    void *data = ctx_data (ctx);
    if (ctx_no_room (data + off + ETH_ALEN * 2, data_end))
        return -EFAULT;
    __bpf_memcpy_builtin (data + off + ETH_ALEN, mac, ETH_ALEN);
    return 0;

#endif
}
</source>
<source file="/home/sayandes/opened_extraction/examples/cilium/lib/eth.h" funcheader="static __always_inline int eth_load_daddr (struct  __ctx_buff *ctx, __u8 *mac, int off)" startline="81" endline="85">
static __always_inline int eth_load_daddr (struct  __ctx_buff *ctx, __u8 *mac, int off)
{
    return ctx_load_bytes (ctx, off, mac, ETH_ALEN);
}
</source>
<source file="/home/sayandes/opened_extraction/examples/cilium/lib/eth.h" funcheader="static __always_inline int eth_store_daddr_aligned (struct  __ctx_buff *ctx, const __u8 *mac, int off)" startline="87" endline="91">
static __always_inline int eth_store_daddr_aligned (struct  __ctx_buff *ctx, const __u8 *mac, int off)
{
    return ctx_store_bytes (ctx, off, mac, ETH_ALEN, 0);
}
</source>
<source file="/home/sayandes/opened_extraction/examples/cilium/lib/eth.h" funcheader="static __always_inline int eth_store_daddr (struct  __ctx_buff *ctx, const __u8 *mac, int off)" startline="93" endline="110">
static __always_inline int eth_store_daddr (struct  __ctx_buff *ctx, const __u8 *mac, int off)
{

#if !CTX_DIRECT_WRITE_OK
    return eth_store_daddr_aligned (ctx, mac, off);

#else
    void *data_end = ctx_data_end (ctx);
    void *data = ctx_data (ctx);
    if (ctx_no_room (data + off + ETH_ALEN, data_end))
        return -EFAULT;
    __bpf_memcpy_builtin (data + off, mac, ETH_ALEN);
    return 0;

#endif
}
</source>
<source file="/home/sayandes/opened_extraction/examples/cilium/lib/eth.h" funcheader="static __always_inline int eth_store_proto (struct  __ctx_buff *ctx, const __u16 proto, int off)" startline="112" endline="117">
static __always_inline int eth_store_proto (struct  __ctx_buff *ctx, const __u16 proto, int off)
{
    return ctx_store_bytes (ctx, off + ETH_ALEN + ETH_ALEN, &proto, sizeof (proto), 0);
}
</source>
</doc>
