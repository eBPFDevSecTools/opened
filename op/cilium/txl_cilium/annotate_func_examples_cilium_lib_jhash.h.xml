<?xml version="1.0"?>
<doc>
<source file="/home/sayandes/opened_extraction/examples/cilium/lib/jhash.h" funcheader="static __always_inline __u32 rol32 (__u32 word, __u32 shift)" startline="14" endline="17">
static __always_inline __u32 rol32 (__u32 word, __u32 shift)
{
    return (word << shift) | (word >> ((-shift) & 31));
}
</source>
<source file="/home/sayandes/opened_extraction/examples/cilium/lib/jhash.h" funcheader="static __always_inline __u32 jhash (const void *key, __u32 length, __u32 initval)" startline="40" endline="81">
static __always_inline __u32 jhash (const void *key, __u32 length, __u32 initval)
{
    const unsigned char *k = key;
    __u32 a, b, c;
    if (!__builtin_constant_p (length))
        __throw_build_bug ();
    a = b = c = JHASH_INITVAL + length + initval;
    while (length > 12) {
        a += *(__u32*) (k);
        b += *(__u32*) (k + 4);
        c += *(__u32*) (k + 8);
        __jhash_mix (a, b, c);
        length -= 12;
        k += 12;
    }
    switch (length) {
    case 12 :
        c += (__u32) k[11] << 24;
    case 11 :
        c += (__u32) k[10] << 16;
    case 10 :
        c += (__u32) k[9] << 8;
    case 9 :
        c += (__u32) k[8];
    case 8 :
        b += (__u32) k[7] << 24;
    case 7 :
        b += (__u32) k[6] << 16;
    case 6 :
        b += (__u32) k[5] << 8;
    case 5 :
        b += (__u32) k[4];
    case 4 :
        a += (__u32) k[3] << 24;
    case 3 :
        a += (__u32) k[2] << 16;
    case 2 :
        a += (__u32) k[1] << 8;
    case 1 :
        a += (__u32) k[0];
        __jhash_final (a, b, c);
    case 0 :
        break;
    }
    return c;
}
</source>
<source file="/home/sayandes/opened_extraction/examples/cilium/lib/jhash.h" funcheader="static __always_inline __u32 __jhash_nwords (__u32 a, __u32 b, __u32 c, __u32 initval)" startline="83" endline="91">
static __always_inline __u32 __jhash_nwords (__u32 a, __u32 b, __u32 c, __u32 initval)
{
    a += initval;
    b += initval;
    c += initval;
    __jhash_final (a, b, c);
    return c;
}
</source>
<source file="/home/sayandes/opened_extraction/examples/cilium/lib/jhash.h" funcheader="static __always_inline __u32 jhash_3words (__u32 a, __u32 b, __u32 c, __u32 initval)" startline="93" endline="97">
static __always_inline __u32 jhash_3words (__u32 a, __u32 b, __u32 c, __u32 initval)
{
    return __jhash_nwords (a, b, c, initval + JHASH_INITVAL + (3 << 2));
}
</source>
<source file="/home/sayandes/opened_extraction/examples/cilium/lib/jhash.h" funcheader="static __always_inline __u32 jhash_2words (__u32 a, __u32 b, __u32 initval)" startline="99" endline="102">
static __always_inline __u32 jhash_2words (__u32 a, __u32 b, __u32 initval)
{
    return __jhash_nwords (a, b, 0, initval + JHASH_INITVAL + (2 << 2));
}
</source>
<source file="/home/sayandes/opened_extraction/examples/cilium/lib/jhash.h" funcheader="static __always_inline __u32 jhash_1word (__u32 a, __u32 initval)" startline="104" endline="107">
static __always_inline __u32 jhash_1word (__u32 a, __u32 initval)
{
    return __jhash_nwords (a, 0, 0, initval + JHASH_INITVAL + (1 << 2));
}
</source>
</doc>
