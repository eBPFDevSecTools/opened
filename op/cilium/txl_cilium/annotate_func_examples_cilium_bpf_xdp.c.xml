<?xml version="1.0"?>
<doc>
<source file="/home/palani/github/opened_extraction/examples/cilium/bpf_xdp.c" funcheader="static __always_inline __maybe_unused int bpf_xdp_exit (struct  __ctx_buff *ctx, const int verdict)" startline="96" endline="117">
static __always_inline __maybe_unused int bpf_xdp_exit (struct  __ctx_buff *ctx, const int verdict)
{
    if (verdict == CTX_ACT_OK) {
        __u32 meta_xfer = ctx_load_meta (ctx, XFER_MARKER);
        if (meta_xfer) {
            if (!ctx_adjust_meta (ctx, -(int) sizeof (meta_xfer))) {
                __u32 *data_meta = ctx_data_meta (ctx);
                __u32 *data = ctx_data (ctx);
                if (!ctx_no_room (data_meta + 1, data))
                    data_meta[0] = meta_xfer;
            }
        }
    }
    return verdict;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/bpf_xdp.c" funcheader="int tail_lb_ipv4 (struct  __ctx_buff *ctx)" startline="122" endline="140">
int tail_lb_ipv4 (struct  __ctx_buff *ctx)
{
    int ret = CTX_ACT_OK;
    if (!bpf_skip_nodeport (ctx)) {
        ret = nodeport_lb4 (ctx, 0);
        if (ret == NAT_46X64_RECIRC) {
            ep_tail_call (ctx, CILIUM_CALL_IPV6_FROM_NETDEV);
            return send_drop_notify_error (ctx, 0, DROP_MISSED_TAIL_CALL, CTX_ACT_DROP, METRIC_INGRESS);
        }
        else if (IS_ERR (ret)) {
            return send_drop_notify_error (ctx, 0, ret, CTX_ACT_DROP, METRIC_INGRESS);
        }
    }
    return bpf_xdp_exit (ctx, ret);
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/bpf_xdp.c" funcheader="static __always_inline int check_v4_lb (struct  __ctx_buff *ctx)" startline="142" endline="147">
static __always_inline int check_v4_lb (struct  __ctx_buff *ctx)
{
    ep_tail_call (ctx, CILIUM_CALL_IPV4_FROM_NETDEV);
    return send_drop_notify_error (ctx, 0, DROP_MISSED_TAIL_CALL, CTX_ACT_DROP, METRIC_INGRESS);
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/bpf_xdp.c" funcheader="static __always_inline int check_v4_lb (struct  __ctx_buff * ctx __maybe_unused)" startline="149" endline="152">
static __always_inline int check_v4_lb (struct  __ctx_buff * ctx __maybe_unused)
{
    return CTX_ACT_OK;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/bpf_xdp.c" funcheader="static __always_inline int check_v4 (struct  __ctx_buff *ctx)" startline="156" endline="179">
static __always_inline int check_v4 (struct  __ctx_buff *ctx)
{
    void *data_end = ctx_data_end (ctx);
    void *data = ctx_data (ctx);
    struct iphdr *ipv4_hdr = data + sizeof (struct ethhdr);
    struct lpm_v4_key pfx __maybe_unused;
    if (ctx_no_room (ipv4_hdr + 1, data_end))
        return CTX_ACT_DROP;

#ifdef CIDR4_FILTER
    memcpy (pfx.lpm.data, &ipv4_hdr->saddr, sizeof (pfx.addr));
    pfx.lpm.prefixlen = 32;

#ifdef CIDR4_LPM_PREFILTER
    if (map_lookup_elem (&CIDR4_LMAP_NAME, &pfx))
        return CTX_ACT_DROP;

#endif /* CIDR4_LPM_PREFILTER */
    return map_lookup_elem (&CIDR4_HMAP_NAME, &pfx) ? CTX_ACT_DROP : check_v4_lb (ctx);

#else
    return check_v4_lb (ctx);

#endif /* CIDR4_FILTER */
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/bpf_xdp.c" funcheader="static __always_inline int check_v4 (struct  __ctx_buff *ctx)" startline="181" endline="184">
static __always_inline int check_v4 (struct  __ctx_buff *ctx)
{
    return check_v4_lb (ctx);
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/bpf_xdp.c" funcheader="int tail_lb_ipv6 (struct  __ctx_buff *ctx)" startline="191" endline="203">
int tail_lb_ipv6 (struct  __ctx_buff *ctx)
{
    int ret = CTX_ACT_OK;
    if (!bpf_skip_nodeport (ctx)) {
        ret = nodeport_lb6 (ctx, 0);
        if (IS_ERR (ret))
            return send_drop_notify_error (ctx, 0, ret, CTX_ACT_DROP, METRIC_INGRESS);
    }
    return bpf_xdp_exit (ctx, ret);
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/bpf_xdp.c" funcheader="static __always_inline int check_v6_lb (struct  __ctx_buff *ctx)" startline="205" endline="210">
static __always_inline int check_v6_lb (struct  __ctx_buff *ctx)
{
    ep_tail_call (ctx, CILIUM_CALL_IPV6_FROM_NETDEV);
    return send_drop_notify_error (ctx, 0, DROP_MISSED_TAIL_CALL, CTX_ACT_DROP, METRIC_INGRESS);
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/bpf_xdp.c" funcheader="static __always_inline int check_v6_lb (struct  __ctx_buff * ctx __maybe_unused)" startline="212" endline="215">
static __always_inline int check_v6_lb (struct  __ctx_buff * ctx __maybe_unused)
{
    return CTX_ACT_OK;
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/bpf_xdp.c" funcheader="static __always_inline int check_v6 (struct  __ctx_buff *ctx)" startline="219" endline="242">
static __always_inline int check_v6 (struct  __ctx_buff *ctx)
{
    void *data_end = ctx_data_end (ctx);
    void *data = ctx_data (ctx);
    struct ipv6hdr *ipv6_hdr = data + sizeof (struct ethhdr);
    struct lpm_v6_key pfx __maybe_unused;
    if (ctx_no_room (ipv6_hdr + 1, data_end))
        return CTX_ACT_DROP;

#ifdef CIDR6_FILTER
    __bpf_memcpy_builtin (pfx.lpm.data, &ipv6_hdr->saddr, sizeof (pfx.addr));
    pfx.lpm.prefixlen = 128;

#ifdef CIDR6_LPM_PREFILTER
    if (map_lookup_elem (&CIDR6_LMAP_NAME, &pfx))
        return CTX_ACT_DROP;

#endif /* CIDR6_LPM_PREFILTER */
    return map_lookup_elem (&CIDR6_HMAP_NAME, &pfx) ? CTX_ACT_DROP : check_v6_lb (ctx);

#else
    return check_v6_lb (ctx);

#endif /* CIDR6_FILTER */
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/bpf_xdp.c" funcheader="static __always_inline int check_v6 (struct  __ctx_buff *ctx)" startline="244" endline="247">
static __always_inline int check_v6 (struct  __ctx_buff *ctx)
{
    return check_v6_lb (ctx);
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/bpf_xdp.c" funcheader="static __always_inline int check_filters (struct  __ctx_buff *ctx)" startline="251" endline="278">
static __always_inline int check_filters (struct  __ctx_buff *ctx)
{
    int ret = CTX_ACT_OK;
    __u16 proto;
    if (!validate_ethertype (ctx, &proto))
        return CTX_ACT_OK;
    ctx_store_meta (ctx, XFER_MARKER, 0);
    bpf_skip_nodeport_clear (ctx);
    switch (proto) {

#ifdef ENABLE_IPV4
    case bpf_htons (ETH_P_IP) :
        ret = check_v4 (ctx);
        break;

#endif /* ENABLE_IPV4 */

#ifdef ENABLE_IPV6
    case bpf_htons (ETH_P_IPV6) :
        ret = check_v6 (ctx);
        break;

#endif /* ENABLE_IPV6 */
    default :
        break;
    }
    return bpf_xdp_exit (ctx, ret);
}
</source>
<source file="/home/palani/github/opened_extraction/examples/cilium/bpf_xdp.c" funcheader="int bpf_xdp_entry (struct  __ctx_buff *ctx)" startline="281" endline="284">
int bpf_xdp_entry (struct  __ctx_buff *ctx)
{
    return check_filters (ctx);
}
</source>
</doc>
