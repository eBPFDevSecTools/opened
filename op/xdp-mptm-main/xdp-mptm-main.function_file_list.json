{
    "mptm_encap": [
        {
            "fileName": "/home/sayandes/opened_extraction/examples/xdp-mptm-main/src/kernel/mptm.c",
            "startLine": "52",
            "endLine": "99",
            "capability": {
                "capabilities": [
                    {
                        "capability": "map_read",
                        "map_read": [
                            {
                                "Project": "libbpf",
                                "Return Type": "void*",
                                "Description": "Perform a lookup in <[ map ]>(IP: 0) for an entry associated to key. ",
                                "Return": " Map value associated to key, or NULL if no entry was found.",
                                "Function Name": "bpf_map_lookup_elem",
                                "Input Params": [
                                    "{Type: struct bpf_map ,Var: *map}",
                                    "{Type:  const void ,Var: *key}"
                                ]
                            }
                        ]
                    }
                ],
                "helperCallParams": {
                    "bpf_map_lookup_elem": [
                        {
                            "opVar": "    tn ",
                            "inpVar": [
                                " &mptm_tnl_info_map",
                                " &key"
                            ]
                        }
                    ],
                    "redirect": [
                        {
                            "opVar": "NA",
                            "inpVar": [
                                "        if likelytn-> "
                            ]
                        }
                    ],
                    "bpf_redirect": [
                        {
                            "opVar": "         action ",
                            "inpVar": [
                                " _map&mptm_tnl_redirect_devmap",
                                " tn->veth_iface",
                                " flags"
                            ]
                        }
                    ]
                }
            },
            "called_function_list": [
                "parse_pkt_headers",
                "mptm_print",
                "encap_vlan",
                "encap_geneve",
                "bpf_debug",
                "likely",
                "xdp_stats_record_action"
            ],
            "call_depth": -1
        }
    ],
    "mptm_decap": [
        {
            "fileName": "/home/sayandes/opened_extraction/examples/xdp-mptm-main/src/kernel/mptm.c",
            "startLine": "102",
            "endLine": "167",
            "capability": {
                "capabilities": [
                    {
                        "capability": "update_pkt",
                        "update_pkt": [
                            {
                                "Project": "libbpf",
                                "Return Type": "int",
                                "Description": "Adjust (move) xdp_md->data by <[ delta ]>(IP: 1) bytes. Note that it is possible to use a negative value for delta. This helper can be used to prepare the packet for pushing or popping headers. A call to this helper is susceptible to change the underlying packet buffer. Therefore , at load time , all checks on pointers previously done by the verifier are invalidated and must be performed again , if the helper is used in combination with direct packet access. ",
                                "Return": " 0 on success, or a negative error in case of failure.",
                                "Function Name": "bpf_xdp_adjust_head",
                                "Input Params": [
                                    "{Type: struct xdp_buff ,Var: *xdp_md}",
                                    "{Type:  int ,Var: delta}"
                                ]
                            }
                        ]
                    },
                    {
                        "capability": "map_read",
                        "map_read": [
                            {
                                "Project": "libbpf",
                                "Return Type": "void*",
                                "Description": "Perform a lookup in <[ map ]>(IP: 0) for an entry associated to key. ",
                                "Return": " Map value associated to key, or NULL if no entry was found.",
                                "Function Name": "bpf_map_lookup_elem",
                                "Input Params": [
                                    "{Type: struct bpf_map ,Var: *map}",
                                    "{Type:  const void ,Var: *key}"
                                ]
                            }
                        ]
                    }
                ],
                "helperCallParams": {
                    "bpf_xdp_adjust_head": [
                        {
                            "opVar": "        long ret ",
                            "inpVar": [
                                " ctx",
                                " outer_hdr_size"
                            ]
                        }
                    ],
                    "bpf_map_lookup_elem": [
                        {
                            "opVar": "        tn ",
                            "inpVar": [
                                " &mptm_tnl_info_map",
                                " &key"
                            ]
                        }
                    ],
                    "bpf_redirect": [
                        {
                            "opVar": "                action ",
                            "inpVar": [
                                " _map&mptm_tnl_redirect_devmap",
                                " tn->eth0_iface",
                                " flags"
                            ]
                        }
                    ]
                }
            },
            "called_function_list": [
                "parse_pkt_headers",
                "mptm_print",
                "parse_pkt_headers",
                "mptm_print",
                "unlikely",
                "mptm_print",
                "xdp_stats_record_action"
            ],
            "call_depth": -1
        }
    ],
    "mptm_redirect": [
        {
            "fileName": "/home/sayandes/opened_extraction/examples/xdp-mptm-main/src/kernel/mptm_extras.c",
            "startLine": "24",
            "endLine": "29",
            "capability": {
                "capabilities": [],
                "helperCallParams": {
                    "bpf_redirect": [
                        {
                            "opVar": "NA",
                            "inpVar": [
                                "    return _map&mptm_extras_redirect_devmap",
                                " key",
                                " flags"
                            ]
                        }
                    ]
                }
            },
            "called_function_list": [],
            "call_depth": 0
        }
    ],
    "mptm_pass": [
        {
            "fileName": "/home/sayandes/opened_extraction/examples/xdp-mptm-main/src/kernel/mptm_extras.c",
            "startLine": "32",
            "endLine": "34",
            "capability": {
                "capabilities": [],
                "helperCallParams": {}
            },
            "called_function_list": [],
            "call_depth": 0
        }
    ],
    "parse_pkt_headers": [
        {
            "fileName": "/home/sayandes/opened_extraction/examples/xdp-mptm-main/src/kernel/lib/pkt-parse.h",
            "startLine": "41",
            "endLine": "97",
            "capability": {
                "capabilities": [],
                "helperCallParams": {}
            },
            "called_function_list": [
                "parse_ethhdr",
                "parse_iphdr",
                "parse_udphdr"
            ],
            "call_depth": -1
        }
    ],
    "set_dst_mac": [
        {
            "fileName": "/home/sayandes/opened_extraction/examples/xdp-mptm-main/src/kernel/lib/pkt-encap.h",
            "startLine": "38",
            "endLine": "46",
            "capability": {
                "capabilities": [],
                "helperCallParams": {}
            },
            "called_function_list": [],
            "call_depth": 0
        }
    ],
    "set_src_mac": [
        {
            "fileName": "/home/sayandes/opened_extraction/examples/xdp-mptm-main/src/kernel/lib/pkt-encap.h",
            "startLine": "48",
            "endLine": "56",
            "capability": {
                "capabilities": [],
                "helperCallParams": {}
            },
            "called_function_list": [],
            "call_depth": 0
        }
    ],
    "csum_fold_helper": [
        {
            "fileName": "/home/sayandes/opened_extraction/examples/xdp-mptm-main/src/kernel/lib/pkt-encap.h",
            "startLine": "58",
            "endLine": "67",
            "capability": {
                "capabilities": [],
                "helperCallParams": {}
            },
            "called_function_list": [],
            "call_depth": 0
        }
    ],
    "ipv4_csum_inline": [
        {
            "fileName": "/home/sayandes/opened_extraction/examples/xdp-mptm-main/src/kernel/lib/pkt-encap.h",
            "startLine": "69",
            "endLine": "77",
            "capability": {
                "capabilities": [],
                "helperCallParams": {}
            },
            "called_function_list": [
                "unroll",
                "csum_fold_helper"
            ],
            "call_depth": -1
        }
    ],
    "__encap_geneve": [
        {
            "fileName": "/home/sayandes/opened_extraction/examples/xdp-mptm-main/src/kernel/lib/pkt-encap.h",
            "startLine": "82",
            "endLine": "192",
            "capability": {
                "capabilities": [
                    {
                        "capability": "update_pkt",
                        "update_pkt": [
                            {
                                "Project": "libbpf",
                                "Return Type": "int",
                                "Description": "Adjust (move) xdp_md->data by <[ delta ]>(IP: 1) bytes. Note that it is possible to use a negative value for delta. This helper can be used to prepare the packet for pushing or popping headers. A call to this helper is susceptible to change the underlying packet buffer. Therefore , at load time , all checks on pointers previously done by the verifier are invalidated and must be performed again , if the helper is used in combination with direct packet access. ",
                                "Return": " 0 on success, or a negative error in case of failure.",
                                "Function Name": "bpf_xdp_adjust_head",
                                "Input Params": [
                                    "{Type: struct xdp_buff ,Var: *xdp_md}",
                                    "{Type:  int ,Var: delta}"
                                ]
                            }
                        ]
                    }
                ],
                "helperCallParams": {
                    "bpf_xdp_adjust_head": [
                        {
                            "opVar": "    long ret ",
                            "inpVar": [
                                " ctx",
                                " 0-outer_hdr_size"
                            ]
                        }
                    ]
                }
            },
            "called_function_list": [
                "mptm_print",
                "set_dst_mac",
                "mptm_print",
                "mptm_print",
                "mptm_print",
                "mptm_print",
                "mptm_print",
                "set_dst_mac",
                "set_src_mac",
                "bpf_htons",
                "ipv4_csum_inline",
                "bpf_htons",
                "__builtin_memset",
                "bpf_htons"
            ],
            "call_depth": -1
        }
    ],
    "encap_geneve": [
        {
            "fileName": "/home/sayandes/opened_extraction/examples/xdp-mptm-main/src/kernel/lib/pkt-encap.h",
            "startLine": "194",
            "endLine": "200",
            "capability": {
                "capabilities": [],
                "helperCallParams": {}
            },
            "called_function_list": [
                "__encap_geneve"
            ],
            "call_depth": -1
        }
    ],
    "encap_vlan": [
        {
            "fileName": "/home/sayandes/opened_extraction/examples/xdp-mptm-main/src/kernel/lib/pkt-encap.h",
            "startLine": "203",
            "endLine": "214",
            "capability": {
                "capabilities": [],
                "helperCallParams": {}
            },
            "called_function_list": [
                "vlan_tag_push",
                "mptm_print"
            ],
            "call_depth": -1
        }
    ]
}