{"_default": {"1": {"author": "BU Course Project", "authorEmail": "course@bu.edu", "date": "2023-01-19", " File": " /home/sayandes/codequery/cilium/sockops/bpf_redir.c", " Startline": " 25", " Endline": " 39 ", " Funcname": " sk_msg_extract4_key ", " Input": " (const struct sk_msg_md *msg, struct sock_key *key) ", " Output": " void ", " Helpers": " [] ", " Read_maps": " [msg] ", " Update_maps": " [key] ", " Func Description": " set the sport and dport of the input key with 32 bits local port and remote port (ip4) "}, "2": {"author": "BU Course Project", "authorEmail": "course@bu.edu", "date": "2023-01-19", " File": " /home/sayandes/codequery/cilium/sockops/bpf_redir.c", " Startline": " 41", " Endline": " 67 ", " Funcname": " bpf_redir_proxy ", " Input": " (struct sk_msg_md *msg) ", " Output": " int ", " Helpers": " [sk_msg_extract4_key,lookup_ip4_remote_endpoint,policy_sk_egress,msg_redirect_hash] ", " Read_maps": " [msg] ", " Update_maps": " [key] ", " Func Description": " Store infomations about destination id, dport and sport ip4 into message, flag set to be BPF_F_INGRESS"}, "3": {"author": "BU Course Project", "authorEmail": "course@bu.edu", "date": "2023-01-19", " File": " /home/sayandes/codequery/cilium/bpf_lxc.c", " Startline": " 157", " Endline": " 162 ", " Funcname": " redirect_to_proxy ", " Input": " (int verdict, enum ct_status status) ", " Output": " bool ", " Helpers": " [] ", " Read_maps": " [] ", " Update_maps": " [] ", " Func Description": " check if the proxy is able to be redirected, and redirect the proxy, store in status. Return true if successful."}, "4": {"author": "BU Course Project", "authorEmail": "course@bu.edu", "date": "2023-01-19", " File": " /home/sayandes/codequery/cilium/bpf_lxc.c", " Startline": " 174", " Endline": " 189 ", " Funcname": " encode_custom_prog_meta ", " Input": " (struct __ctx_buff *ctx, int ret, __u32 identity) ", " Output": " int ", " Helpers": " [] ", " Read_maps": " [] ", " Update_maps": " [] ", " Func Description": " encode meta data (return value and identity), and store it into ctx buffer"}, "5": {"author": "BU Course Project", "authorEmail": "course@bu.edu", "date": "2023-01-19", " File": " /home/sayandes/codequery/cilium/bpf_lxc.c", " Startline": " 214", " Endline": " 581 ", " Funcname": " handle_ipv6_from_lxc ", " Input": " (struct __ctx_buff *ctx, __u32 *dst_id) ", " Output": " int ", " Helpers": " [] ", " Read_maps": " [] ", " Update_maps": " [] ", " Func Description": " Handling egress ipv6 traffic by "}, "6": {"author": "BU Course Project", "authorEmail": "course@bu.edu", "date": "2023-01-19", " File": " /home/sayandes/codequery/cilium/bpf_lxc.c", " Startline": " 583", " Endline": " 603 ", " Funcname": " tail_handle_ipv6_cont ", " Input": " (struct __ctx_buff *ctx) ", " Output": " int ", " Helpers": " [] ", " Read_maps": " [] ", " Update_maps": " [] ", " Func Description": " Count ipv6 tail calls"}, "7": {"author": "BU Course Project", "authorEmail": "course@bu.edu", "date": "2023-01-19", " File": " /home/sayandes/codequery/cilium/bpf_lxc.c", " Startline": " 605", " Endline": " 694 ", " Funcname": " __tail_handle_ipv6 ", " Input": " (struct __ctx_buff *ctx) ", " Output": " int ", " Helpers": " [] ", " Read_maps": " [] ", " Update_maps": " [] ", " Func Description": " Handle tail messages. Check if it is not special ICMPv6 messages such as echo requests,"}, "8": {"author": "BU Course Project", "authorEmail": "course@bu.edu", "date": "2023-01-19", " File": " /home/sayandes/codequery/cilium/bpf_lxc.c", " Startline": " 696", " Endline": " 705 ", " Funcname": " tail_handle_ipv6 ", " Input": " (struct __ctx_buff *ctx) ", " Output": " int ", " Helpers": " [] ", " Read_maps": " [] ", " Update_maps": " [] ", " Func Description": " Handle egress IPv6 traffic from a container after service translation has been done"}, "9": {"author": "BU Course Project", "authorEmail": "course@bu.edu", "date": "2023-01-19", " File": " /home/sayandes/codequery/cilium/bpf_lxc.c", " Startline": " 728", " Endline": " 1157 ", " Funcname": " handle_ipv4_from_lxc ", " Input": " (struct __ctx_buff *ctx, __u32 *dst_id) ", " Output": " int ", " Helpers": " [] ", " Read_maps": " [] ", " Update_maps": " [] ", " Func Description": " Handling egress ipv4 traffic. Mark the traffic if it has a remote endpoint destination."}, "10": {"author": "BU Course Project", "authorEmail": "course@bu.edu", "date": "2023-01-19", " File": " /home/sayandes/codequery/cilium/bpf_lxc.c", " Startline": " 1159", " Endline": " 1179 ", " Funcname": " tail_handle_ipv4_cont ", " Input": " (struct __ctx_buff *ctx) ", " Output": " int ", " Helpers": " [] ", " Read_maps": " [] ", " Update_maps": " [] ", " Func Description": " Count ipv4 tail call. Helper function for handling ipv4 traffic"}, "11": {"author": "BU Course Project", "authorEmail": "course@bu.edu", "date": "2023-01-19", " File": " /home/sayandes/codequery/cilium/bpf_lxc.c", " Startline": " 1181", " Endline": " 1256 ", " Funcname": " __tail_handle_ipv4 ", " Input": " (struct __ctx_buff *ctx) ", " Output": " int ", " Helpers": " [] ", " Read_maps": " [] ", " Update_maps": " [] ", " Func Description": " helper function to handle ipv4 tail call"}, "12": {"author": "BU Course Project", "authorEmail": "course@bu.edu", "date": "2023-01-19", " File": " /home/sayandes/codequery/cilium/bpf_lxc.c", " Startline": " 1258", " Endline": " 1267 ", " Funcname": " tail_handle_ipv4 ", " Input": " (struct __ctx_buff *ctx) ", " Output": " int ", " Helpers": " [] ", " Read_maps": " [] ", " Update_maps": " [] ", " Func Description": " handle ipv4 tail call."}, "13": {"author": "BU Course Project", "authorEmail": "course@bu.edu", "date": "2023-01-19", " File": " /home/sayandes/codequery/cilium/bpf_lxc.c", " Startline": " 1274", " Endline": " 1300 ", " Funcname": " tail_handle_arp ", " Input": " (struct __ctx_buff *ctx) ", " Output": " int ", " Helpers": " [] ", " Read_maps": " [] ", " Update_maps": " [] ", " Func Description": " Validate ARP requests. Send unknown and LXC endpoint ARP requests to linux kernel stack. "}, "14": {"author": "BU Course Project", "authorEmail": "course@bu.edu", "date": "2023-01-19", " File": " /home/sayandes/codequery/cilium/bpf_lxc.c", " Startline": " 1307", " Endline": " 1358 ", " Funcname": " handle_xgress ", " Input": " (struct __ctx_buff *ctx) ", " Output": " int ", " Helpers": " [] ", " Read_maps": " [] ", " Update_maps": " [] ", " Func Description": " Use previous exgress ipv6/v4 traffic handler to handle exgress traffic."}, "15": {"author": "BU Course Project", "authorEmail": "course@bu.edu", "date": "2023-01-19", " File": " /home/sayandes/codequery/cilium/bpf_lxc.c", " Startline": " 1361", " Endline": " 1536 ", " Funcname": " ipv6_policy ", " Input": " (struct __ctx_buff *ctx, int ifindex, __u32 src_label, enum ct_status *ct_status, struct ipv6_ct_tuple *tuple_out, __u16 *proxy_port, bool from_host __maybe_unused) ", " Output": " int ", " Helpers": " [] ", " Read_maps": " [] ", " Update_maps": " [] ", " Func Description": " Check if the packet is ingress or exgress traffic, redirect the traffic if necessary."}, "16": {"author": "BU Course Project", "authorEmail": "course@bu.edu", "date": "2023-01-19", " File": " /home/sayandes/codequery/cilium/bpf_lxc.c", " Startline": " 1538", " Endline": " 1581 ", " Funcname": " tail_ipv6_policy ", " Input": " (struct __ctx_buff *ctx) ", " Output": " int ", " Helpers": " [] ", " Read_maps": " [] ", " Update_maps": " [] ", " Func Description": " Identify ipv6 tail call, store data to ctx. Skip tail call when packet is being redirected to a L7 proxy."}, "17": {"author": "BU Course Project", "authorEmail": "course@bu.edu", "date": "2023-01-19", " File": " /home/sayandes/codequery/cilium/bpf_lxc.c", " Startline": " 1583", " Endline": " 1659 ", " Funcname": " tail_ipv6_to_endpoint ", " Input": " (struct __ctx_buff *ctx) ", " Output": " int ", " Helpers": " [] ", " Read_maps": " [] ", " Update_maps": " [] ", " Func Description": " delivery ipv6 tail call to endpoint, skip if it is send to L7 proxy"}, "18": {"author": "BU Course Project", "authorEmail": "course@bu.edu", "date": "2023-01-19", " File": " /home/sayandes/codequery/cilium/bpf_lxc.c", " Startline": " 1671", " Endline": " 1879 ", " Funcname": " ipv4_policy ", " Input": " (struct __ctx_buff *ctx, int ifindex, __u32 src_label, enum ct_status *ct_status, struct ipv4_ct_tuple *tuple_out, __u16 *proxy_port, bool from_host __maybe_unused) ", " Output": " int ", " Helpers": " [] ", " Read_maps": " [] ", " Update_maps": " [] ", " Func Description": " Identify ipv4 message and store its meta data to ctx."}, "19": {"author": "BU Course Project", "authorEmail": "course@bu.edu", "date": "2023-01-19", " File": " /home/sayandes/codequery/cilium/bpf_lxc.c", " Startline": " 1881", " Endline": " 1924 ", " Funcname": " tail_ipv4_policy ", " Input": " (struct __ctx_buff *ctx) ", " Output": " int ", " Helpers": " [] ", " Read_maps": " [] ", " Update_maps": " [] ", " Func Description": " Redirect ipv4 tail call, skip tail calls when packet is being redirected to L7 proxy."}, "20": {"author": "BU Course Project", "authorEmail": "course@bu.edu", "date": "2023-01-19", " File": " /home/sayandes/codequery/cilium/bpf_lxc.c", " Startline": " 1926", " Endline": " 2001 ", " Funcname": " tail_ipv4_to_endpoint ", " Input": " (struct __ctx_buff *ctx) ", " Output": " int ", " Helpers": " [] ", " Read_maps": " [] ", " Update_maps": " [] ", " Func Description": " Send ipv4 tail call to its enpoint."}, "21": {"author": "BU Course Project", "authorEmail": "course@bu.edu", "date": "2023-01-19", " File": " /home/sayandes/codequery/cilium/bpf_lxc.c", " Startline": " 2023", " Endline": " 2061 ", " Funcname": " handle_policy ", " Input": " (struct __ctx_buff *ctx) ", " Output": " int ", " Helpers": " [] ", " Read_maps": " [] ", " Update_maps": " [] ", " Func Description": " Identify if the traffic is ipv6/v4, handle policy using previous helper function."}, "22": {"author": "BU Course Project", "authorEmail": "course@bu.edu", "date": "2023-01-19", " File": " /home/sayandes/codequery/cilium/bpf_lxc.c", " Startline": " 2071", " Endline": " 2113 ", " Funcname": " handle_policy_egress ", " Input": " (struct __ctx_buff *ctx) ", " Output": " int ", " Helpers": " [] ", " Read_maps": " [] ", " Update_maps": " [] ", " Func Description": " Handle egress traffic "}, "23": {"author": "BU Course Project", "authorEmail": "course@bu.edu", "date": "2023-01-19", " File": " /home/sayandes/codequery/cilium/bpf_lxc.c", " Startline": " 2119", " Endline": " 2195 ", " Funcname": " handle_to_container ", " Input": " (struct __ctx_buff *ctx) ", " Output": " int ", " Helpers": " [] ", " Read_maps": " [] ", " Update_maps": " [] ", " Func Description": " handle ingress policy by checking it's source and destination stored in ctx buffer."}, "24": {"author": "BU Course Project", "authorEmail": "course@bu.edu", "date": "2023-01-19", " File": " /home/sayandes/codequery/cilium/bpf_overlay.c", " Startline": " 46", " Endline": " 180 ", " Funcname": " handle_ipv6 ", " Input": " (struct __ctx_buff *ctx, __u32 *identity) ", " Output": " int ", " Helpers": " [revalidate_data_pull bpf_skip_nodeport nodeport_lb6 encap_remap_v6_host_address get_identity ctx_get_tunnel_key identity_is_remote_node ipcache_lookup6 ", " Read_maps": " [] ", " Update_maps": " [] ", " Func Description": " The main goal of handle_ipv6 is to check the different condition including ", "not_esp": "", "to_host": ""}, "25": {"author": "BU Course Project", "authorEmail": "course@bu.edu", "date": "2023-01-19", " File": " /home/sayandes/codequery/cilium/bpf_overlay.c", " Startline": " 182", " Endline": " 192 ", " Funcname": " tail_handle_ipv6 ", " Input": " (struct __ctx_buff *ctx) ", " Output": " int ", " Helpers": " [] ", " Read_maps": " [] ", " Update_maps": " [] ", " Func Description": " This function is to handle the tail of a protocol and check it it has any error for ipv6"}, "26": {"author": "BU Course Project", "authorEmail": "course@bu.edu", "date": "2023-01-19", " File": " /home/sayandes/codequery/cilium/bpf_overlay.c", " Startline": " 196", " Endline": " 333 ", " Funcname": " handle_ipv4 ", " Input": " (struct __ctx_buff *ctx, __u32 *identity) ", " Output": " int ", " Helpers": " [revalidate_data_pull ipv4_is_fragment nodeport_lb4  get_identity ctx_get_tunnel_key identity_is_remote_node ipcache_lookup4 ", " Read_maps": " [] ", " Update_maps": " [] ", " Func Description": " This function is similar to handle_ipv6 to handle ipv4 packet. The main goal of it is to check the different condition including "}, "27": {"author": "BU Course Project", "authorEmail": "course@bu.edu", "date": "2023-01-19", " File": " /home/sayandes/codequery/cilium/bpf_overlay.c", " Startline": " 335", " Endline": " 345 ", " Funcname": " tail_handle_ipv4 ", " Input": " (struct __ctx_buff *ctx) ", " Output": " int ", " Helpers": " [handle_ipv4 IS_ERR send_drop_notify_error] ", " Read_maps": " [] ", " Update_maps": " [] ", " Func Description": " check if there is error about the tail of ipv4 packet."}, "28": {"author": "BU Course Project", "authorEmail": "course@bu.edu", "date": "2023-01-19", " File": " /home/sayandes/codequery/cilium/bpf_overlay.c", " Startline": " 352", " Endline": " 395 ", " Funcname": " tail_handle_arp ", " Input": " (struct __ctx_buff *ctx) ", " Output": " int ", " Helpers": " [] ", " Read_maps": " [] ", " Update_maps": " [] ", " Func Description": " Handle the tail for ARP requests from VTEP. Check different occasions including tunnel_key geting, arp validating, and if endpoint of tunnel is reached."}, "29": {"author": "BU Course Project", "authorEmail": "course@bu.edu", "date": "2023-01-19", " File": " /home/sayandes/codequery/cilium/bpf_overlay.c", " Startline": " 401", " Endline": " 428 ", " Funcname": " is_esp ", " Input": " (struct __ctx_buff *ctx, __u16 proto) ", " Output": " bool ", " Helpers": " [bpf_htons revalidate_data_pull] ", " Read_maps": " [] ", " Update_maps": " [] ", " Func Description": " The built in function to check if esp protocol is used and if pulling data have error."}, "30": {"author": "BU Course Project", "authorEmail": "course@bu.edu", "date": "2023-01-19", " File": " /home/sayandes/codequery/cilium/bpf_overlay.c", " Startline": " 434", " Endline": " 527 ", " Funcname": " from_overlay ", " Input": " (struct __ctx_buff *ctx) ", " Output": " int ", " Helpers": " [bpf_clear_meta bpf_skip_nodeport_clear validate_ethertype send_trace_notify bpf_htons ep_tail_call] ", " Read_maps": " [] ", " Update_maps": " [] ", " Func Description": " handle different possible packets come to the program. First check if it is esp protocol,"}, "31": {"author": "BU Course Project", "authorEmail": "course@bu.edu", "date": "2023-01-19", " File": " /home/sayandes/codequery/cilium/bpf_overlay.c", " Startline": " 532", " Endline": " 568 ", " Funcname": " to_overlay ", " Input": " (struct __ctx_buff *ctx) ", " Output": " int ", " Helpers": " [] ", " Read_maps": " [] ", " Update_maps": " [] ", " Func Description": " TO BE ADDED "}, "32": {"author": "BU Course Project", "authorEmail": "course@bu.edu", "date": "2023-01-19", " File": " /home/sayandes/codequery/cilium/sockops/bpf_sockops.c", " Startline": " 26", " Endline": " 40 ", " Funcname": " sk_extract4_key ", " Input": " (const struct bpf_sock_ops *ops, struct sock_key *key) ", " Output": " void ", " Helpers": " [] ", " Read_maps": " [msg] ", " Update_maps": " [key] ", " Func Description": " set the sport and dport of the input key with 32 bits local port and remote port (ip4) "}, "33": {"author": "BU Course Project", "authorEmail": "course@bu.edu", "date": "2023-01-19", " File": " /home/sayandes/codequery/cilium/sockops/bpf_sockops.c", " Startline": " 42", " Endline": " 48 ", " Funcname": " sk_lb4_key ", " Input": " (struct lb4_key *lb4, const struct sock_key *key) ", " Output": " void ", " Helpers": " [] ", " Read_maps": " [key] ", " Update_maps": " [lb4] ", " Func Description": " copy address and dport of lb4 from socket key"}, "34": {"author": "BU Course Project", "authorEmail": "course@bu.edu", "date": "2023-01-19", " File": " /home/sayandes/codequery/cilium/sockops/bpf_sockops.c", " Startline": " 50", " Endline": " 53 ", " Funcname": " redirect_to_proxy ", " Input": " (int verdict) ", " Output": " bool ", " Helpers": " [] ", " Read_maps": " [] ", " Update_maps": " [] ", " Func Description": " check if verdict is larger than 0 "}, "35": {"author": "BU Course Project", "authorEmail": "course@bu.edu", "date": "2023-01-19", " File": " /home/sayandes/codequery/cilium/sockops/bpf_sockops.c", " Startline": " 55", " Endline": " 118 ", " Funcname": " bpf_sock_ops_ipv4 ", " Input": " (struct bpf_sock_ops *skops) ", " Output": " void ", " Helpers": " [sk_extract4_key,sk_lb4_key,lb4_lookup_service,lookup_ip4_remote_endpoint", " Read_maps": " [] ", " Update_maps": " [skops] ", " Func Description": " update the destination and source port, ip to the skops with respect to whther "}, "36": {"author": "BU Course Project", "authorEmail": "course@bu.edu", "date": "2023-01-19", " File": " /home/sayandes/codequery/cilium/sockops/bpf_sockops.c", " Startline": " 122", " Endline": " 126 ", " Funcname": " bpf_sock_ops_ipv6 ", " Input": " (struct bpf_sock_ops *skops) ", " Output": " void ", " Helpers": " [bpf_sock_ops_ipv4] ", " Read_maps": " [] ", " Update_maps": " [skops] ", " Func Description": " update the destination and source port, ip to the skops with respect to whther "}, "37": {"author": "BU Course Project", "authorEmail": "course@bu.edu", "date": "2023-01-19", " File": " /home/sayandes/codequery/cilium/sockops/bpf_sockops.c", " Startline": " 129", " Endline": " 154 ", " Funcname": " bpf_sockmap ", " Input": " (struct bpf_sock_ops *skops) ", " Output": " int ", " Helpers": " [bpf_sock_ops_ipv6, bpf_sock_ops_ipv4] ", " Read_maps": " [] ", " Update_maps": " [skops] ", " Func Description": " calling bpf_sock_ops_ipv4 or bpf_sock_ops_ipv6 according"}, "38": {"author": "BU Course Project", "authorEmail": "course@bu.edu", "date": "2023-01-19", " File": " /home/sayandes/codequery/cilium/bpf_network.c", " Startline": " 14", " Endline": " 88 ", " Funcname": " from_network ", " Input": " (struct __ctx_buff *ctx) ", " Output": " int ", " Helpers": " [bpf_clear_meta,validate_ethertype] ", " Read_maps": " [] ", " Update_maps": " [ctx] ", " Func Description": " Initialize the ctx buffer, passing protocols to the stack according"}, "39": {"author": "BU Course Project", "authorEmail": "course@bu.edu", "date": "2023-01-19", " File": " /home/sayandes/codequery/cilium/cilium-probe-kernel-hz.c", " Startline": " 30", " Endline": " 38 ", " Funcname": " pin_to_cpu ", " Input": " (int cpu) ", " Output": " int ", " Helpers": " [] ", " Read_maps": " [] ", " Update_maps": " [set] ", " Func Description": " clear CPU and reset a specific CPU in the set, then sets the CPU affinity mask of the thread"}, "40": {"author": "BU Course Project", "authorEmail": "course@bu.edu", "date": "2023-01-19", " File": " /home/sayandes/codequery/cilium/cilium-probe-kernel-hz.c", " Startline": " 40", " Endline": " 47 ", " Funcname": " fix_priority ", " Input": " (void) ", " Output": " int ", " Helpers": " [] ", " Read_maps": " [] ", " Update_maps": " [sp] ", " Func Description": " reset the maxmium for the scheduling policy specified by policy "}, "41": {"author": "BU Course Project", "authorEmail": "course@bu.edu", "date": "2023-01-19", " File": " /home/sayandes/codequery/cilium/cilium-probe-kernel-hz.c", " Startline": " 49", " Endline": " 52 ", " Funcname": " *timer_list_open ", " Input": " (void) ", " Output": " FILE ", " Helpers": " [] ", " Read_maps": " [] ", " Update_maps": " [] ", " Func Description": " read the timer_list file"}, "42": {"author": "BU Course Project", "authorEmail": "course@bu.edu", "date": "2023-01-19", " File": " /home/sayandes/codequery/cilium/cilium-probe-kernel-hz.c", " Startline": " 54", " Endline": " 57 ", " Funcname": " timer_list_close ", " Input": " (FILE *fp) ", " Output": " void ", " Helpers": " [] ", " Read_maps": " [] ", " Update_maps": " [] ", " Func Description": " close file"}, "43": {"author": "BU Course Project", "authorEmail": "course@bu.edu", "date": "2023-01-19", " File": " /home/sayandes/codequery/cilium/cilium-probe-kernel-hz.c", " Startline": " 59", " Endline": " 92 ", " Funcname": " prep_kern_jiffies ", " Input": " (struct cpu_jiffies *before, struct cpu_jiffies *after) ", " Output": " int ", " Helpers": " [] ", " Read_maps": " [] ", " Update_maps": " [] ", " Func Description": " allocate the CPU jiffies with error check (*)"}, "44": {"author": "BU Course Project", "authorEmail": "course@bu.edu", "date": "2023-01-19", " File": " /home/sayandes/codequery/cilium/cilium-probe-kernel-hz.c", " Startline": " 94", " Endline": " 113 ", " Funcname": " fetch_kern_jiffies ", " Input": " (const struct cpu_jiffies *curr) ", " Output": " int ", " Helpers": " [] ", " Read_maps": " [] ", " Update_maps": " [] ", " Func Description": " fetch the CPU jiffies to fit the cpus set in current cpu parameter"}, "45": {"author": "BU Course Project", "authorEmail": "course@bu.edu", "date": "2023-01-19", " File": " /home/sayandes/codequery/cilium/cilium-probe-kernel-hz.c", " Startline": " 115", " Endline": " 150 ", " Funcname": " dump_kern_jiffies ", " Input": " (const struct cpu_jiffies *fixed, const struct cpu_jiffies *result, bool macro) ", " Output": " int ", " Helpers": " [] ", " Read_maps": " [] ", " Update_maps": " [] ", " Func Description": " decrease the fixed jiffies from the result jiffies, reset fixed jiffies to the closest kernel_hz"}, "46": {"author": "BU Course Project", "authorEmail": "course@bu.edu", "date": "2023-01-19", " File": " /home/sayandes/codequery/cilium/cilium-probe-kernel-hz.c", " Startline": " 152", " Endline": " 194 ", " Funcname": " main ", " Input": " (int argc, char **argv) ", " Output": " int ", " Helpers": " [] ", " Read_maps": " [] ", " Update_maps": " [] ", " Func Description": " Main function of above functions, initialize the cpu and deal with the "}, "47": {"author": "BU Course Project", "authorEmail": "course@bu.edu", "date": "2023-01-19", " File": " /home/sayandes/codequery/cilium/bpf_alignchecker.c", " Startline": " 44", " Endline": " 99 ", " Funcname": " main ", " Input": " (void) ", " Output": " int ", " Helpers": " None", " Read_maps": " None", " Update_maps": " None", " Func Description": " Print and debug all the existing variables (especially fast path "}}}