{"_default": {"1": {"capabilities": [], "helperCallParams": {}, "startLine": 76, "endLine": 86, "File": "/home/palani/github/opened_extraction/examples/bpf-filter-master/ebpf/drop.c", "funcName": "compare_mac", "developer_inline_comments": [], "updateMaps": [], "readMaps": [], "input": ["__u8 *mac1", " __u8 *mac2"], "output": "static__inlineint", "helper": [], "compatibleHookpoints": ["raw_tracepoint_writable", "cgroup_sock_addr", "lwt_in", "kprobe", "raw_tracepoint", "cgroup_sock", "flow_dissector", "tracepoint", "perf_event", "sched_cls", "lwt_seg6local", "sock_ops", "sk_reuseport", "cgroup_device", "socket_filter", "sk_msg", "sched_act", "cgroup_skb", "lwt_xmit", "xdp", "cgroup_sysctl", "lwt_out", "sk_skb"], "source": ["static __inline int compare_mac (__u8 *mac1, __u8 *mac2)\n", "{\n", "    if (mac1[0] == mac2[0] && mac1[1] == mac2[1] && mac1[2] == mac2[2] && mac1[3] == mac2[3] && mac1[4] == mac2[4] && mac1[5] == mac2[5]) {\n", "        return 1;\n", "    }\n", "    return 0;\n", "}\n"], "called_function_list": [], "call_depth": 0, "humanFuncDescription": [[{"description": "This function compares mac addresses represented by two unsigned char arrays of length 6 mac1 and mac2 passed as arguments, returns 1 if true else 0", "author": "Dushyant Behl", "authorEmail": "dushyantbehl@in.ibm.com", "date": "2023-02-22"}]], "AI_func_description": [{"description": "", "author": "", "authorEmail": "", "date": "", "invocationParameters": ""}]}, "2": {"capabilities": [], "helperCallParams": {}, "startLine": 88, "endLine": 98, "File": "/home/palani/github/opened_extraction/examples/bpf-filter-master/ebpf/drop.c", "funcName": "is_broadcast_mac", "developer_inline_comments": [], "updateMaps": [], "readMaps": [], "input": ["__u8 *m"], "output": "static__inlineint", "helper": [], "compatibleHookpoints": ["raw_tracepoint_writable", "cgroup_sock_addr", "lwt_in", "kprobe", "raw_tracepoint", "cgroup_sock", "flow_dissector", "tracepoint", "perf_event", "sched_cls", "lwt_seg6local", "sock_ops", "sk_reuseport", "cgroup_device", "socket_filter", "sk_msg", "sched_act", "cgroup_skb", "lwt_xmit", "xdp", "cgroup_sysctl", "lwt_out", "sk_skb"], "source": ["static __inline int is_broadcast_mac (__u8 *m)\n", "{\n", "    if (m[0] == (__u8) '0xff' && m[1] == (__u8) '0xff' && m[2] == (__u8) '0xff' && m[3] == (__u8) '0xff' && m[4] == (__u8) '0xff' && m[5] == (__u8) '0xff') {\n", "        return 1;\n", "    }\n", "    return 0;\n", "}\n"], "called_function_list": [], "call_depth": 0, "humanFuncDescription": [[{"description": "This function returns if the mac addressed m passed as an unsigned char array of length 6 equals 0xffffffffffff which is the broadcast mac, returns 1 if equal else 0", "author": "Dushyant Behl", "authorEmail": "dushyantbehl@in.ibm.com", "date": "2023-02-20"}]], "AI_func_description": [{"description": "", "author": "", "authorEmail": "", "date": "", "invocationParameters": ""}]}, "3": {"capabilities": [{"capability": "pkt_stop_processing_drop_packet", "pkt_stop_processing_drop_packet": [{"Project": "libbpf", "Return Type": "int", "Input Params": [], "Function Name": "TC_ACT_SHOT", "Return": 2, "Description": "instructs the kernel to drop the packet, meaning, upper layers of the networking stack will never see the skb on ingress and similarly the packet will never be submitted for transmission on egress. TC_ACT_SHOT and TC_ACT_STOLEN are both similar in nature with few differences: TC_ACT_SHOT will indicate to the kernel that the skb was released through kfree_skb() and return NET_XMIT_DROP to the callers for immediate feedback, whereas TC_ACT_STOLEN will release the skb through consume_skb() and pretend to upper layers that the transmission was successful through NET_XMIT_SUCCESS. The perf\u2019s drop monitor which records traces of kfree_skb() will therefore also not see any drop indications from TC_ACT_STOLEN since its semantics are such that the skb has been \u201cconsumed\u201d or queued but certainly not \"dropped\".", "compatible_hookpoints": ["sched_cls", "sched_act"], "capabilities": ["pkt_stop_processing_drop_packet"]}]}, {"capability": "pkt_go_to_next_module", "pkt_go_to_next_module": [{"Project": "libbpf", "Return Type": "int", "Input Params": [], "Function Name": "TC_ACT_OK", "Return": 0, "Description": "will terminate the packet processing pipeline and allows the packet to proceed. Pass the skb onwards either to upper layers of the stack on ingress or down to the networking device driver for transmission on egress, respectively. TC_ACT_OK sets skb->tc_index based on the classid the tc BPF program set. The latter is set out of the tc BPF program itself through skb->tc_classid from the BPF context.", "compatible_hookpoints": ["sched_cls", "sched_act"], "capabilities": ["pkt_go_to_next_module"]}]}, {"capability": "map_read", "map_read": [{"Project": "libbpf", "Return Type": "void*", "Description": "Perform a lookup in <[ map ]>(IP: 0) for an entry associated to key. ", "Return": " Map value associated to key, or NULL if no entry was found.", "Function Name": "bpf_map_lookup_elem", "Input Params": ["{Type: struct bpf_map ,Var: *map}", "{Type:  const void ,Var: *key}"], "compatible_hookpoints": ["socket_filter", "kprobe", "sched_cls", "sched_act", "tracepoint", "xdp", "perf_event", "cgroup_skb", "cgroup_sock", "lwt_in", "lwt_out", "lwt_xmit", "sock_ops", "sk_skb", "cgroup_device", "sk_msg", "raw_tracepoint", "cgroup_sock_addr", "lwt_seg6local", "sk_reuseport", "flow_dissector", "cgroup_sysctl", "raw_tracepoint_writable"], "capabilities": ["map_read"]}]}], "helperCallParams": {}, "startLine": 117, "endLine": 227, "File": "/home/palani/github/opened_extraction/examples/bpf-filter-master/ebpf/drop.c", "funcName": "filter", "developer_inline_comments": [{"start_line": 112, "end_line": 116, "text": "/*\n    This filter attaches on veth (interface in root namespace) and not\n    vpeer (interface in the pod namespace) so INGRESS means data coming from pod\n    EGRESS means data going towards the pod.\n*/"}, {"start_line": 148, "end_line": 148, "text": "/* ETH_P_IP in Little Endian Format */"}, {"start_line": 160, "end_line": 160, "text": "// haven't found the stat-entry, unexpected behavior, let packet go through."}, {"start_line": 165, "end_line": 165, "text": "// Mac address lookup"}, {"start_line": 168, "end_line": 168, "text": "/* Unable to get iface MAC. Let the packet through */"}, {"start_line": 174, "end_line": 174, "text": "// IP addresss lookup"}, {"start_line": 177, "end_line": 177, "text": "/* Unable to get iface IP. Let the packet through */"}, {"start_line": 183, "end_line": 183, "text": "// check broadcast messages"}, {"start_line": 184, "end_line": 184, "text": "// Broadcast address should be allowed"}, {"start_line": 191, "end_line": 191, "text": "/* check is packet is coming from pod or going towards pod. */"}, {"start_line": 193, "end_line": 193, "text": "// Packet is going towards the pod. Let is pass"}, {"start_line": 197, "end_line": 197, "text": "// Packet has come from the pod. Check the mac address."}, {"start_line": 213, "end_line": 213, "text": "// MAC Address matches. Now check IP address"}, {"start_line": 216, "end_line": 216, "text": "// If IP addresss do not match"}, {"start_line": 223, "end_line": 223, "text": "// IP address matches"}], "updateMaps": [], "readMaps": ["  iface_ip_map", "  iface_map", "  iface_stat_map"], "input": ["struct  __sk_buff *skb"], "output": "static__inlineint", "helper": ["TC_ACT_SHOT", "TC_ACT_OK", "bpf_trace_printk", "bpf_map_lookup_elem"], "compatibleHookpoints": ["sched_cls", "sched_act"], "source": ["static __inline int filter (struct  __sk_buff *skb)\n", "{\n", "    char pkt_fmt [] = \"MAC_FILTER: pkt skb contain mac: %x%x\\n\";\n", "    char src_fmt [] = \"MAC_FILTER: expected source mac: %x%x\\n\";\n", "    char broadcast [] = \"MAC_FILTER: BROADCAST MESSAGE DETECTED\\n\";\n", "    char mac_matched [] = \"MAC_FILTER: MAC MATCHED\\n\";\n", "    char mac_unmatched [] = \"MAC_FILTER: MAC DID NOT MATCH\\n\";\n", "    char map_error [] = \"MAC_FILTER: Unable to get iface %s from map\\n\";\n", "    char ip_matched [] = \"IP_FILTER: IP iface:%x == pkt:%x MATCHED\\n\";\n", "    char ip_unmatched [] = \"IP_FILTER: IP iface:%x != pkt:%x DID NOT MATCH\\n\";\n", "    char ipstr [] = \"ip\";\n", "    char macstr [] = \"mac\";\n", "    char statsstr [] = \"stats\";\n", "    uint32_t *bytes;\n", "    pkt_count *inf;\n", "    void *data = (void *) (long) skb->data;\n", "    void *data_end = (void *) (long) skb->data_end;\n", "    struct ethhdr *eth = data;\n", "    uint32_t idx = skb->ifindex;\n", "    struct iphdr *ip;\n", "    __u8 iface_mac [ETH_ALEN];\n", "    __be32 iface_ip;\n", "    __u64 l3_offset = sizeof (struct ethhdr);\n", "    if (data_end < (void *) eth + l3_offset)\n", "        return TC_ACT_SHOT;\n", "    if (eth->h_proto != 0x0008) {\n", "        return TC_ACT_OK;\n", "    }\n", "    ip = data + l3_offset;\n", "    if ((void *) (ip + 1) > data_end) {\n", "        return TC_ACT_OK;\n", "    }\n", "    inf = bpf_map_lookup_elem (& iface_stat_map, & (idx));\n", "    if (!inf) {\n", "        bpf_trace_printk (map_error, sizeof (map_error), statsstr);\n", "        return TC_ACT_OK;\n", "    }\n", "    bytes = bpf_map_lookup_elem (& iface_map, & (idx));\n", "    if (bytes == NULL) {\n", "        bpf_trace_printk (map_error, sizeof (map_error), macstr);\n", "        return TC_ACT_OK;\n", "    }\n", "    bpf_memcpy (iface_mac, bytes, ETH_ALEN);\n", "    bytes = bpf_map_lookup_elem (& iface_ip_map, & (idx));\n", "    if (bytes == NULL) {\n", "        bpf_trace_printk (map_error, sizeof (map_error), ipstr);\n", "        return TC_ACT_OK;\n", "    }\n", "    bpf_memcpy (&iface_ip, bytes, sizeof (__be32));\n", "    if ((is_broadcast_mac (eth->h_source) == 1) || (is_broadcast_mac (eth->h_dest) == 1)) {\n", "        bpf_trace_printk (broadcast, sizeof (broadcast));\n", "        return TC_ACT_OK;\n", "    }\n", "    if (compare_mac (eth->h_dest, iface_mac) == 1) {\n", "        return TC_ACT_OK;\n", "    }\n", "    __u8 *pkt_mac = (__u8 *) eth->h_source;\n", "    __be32 pkt_ip = ip->saddr;\n", "    if (compare_mac (pkt_mac, iface_mac) == 0) {\n", "        bpf_trace_printk (mac_unmatched, sizeof (mac_unmatched));\n", "        bpf_trace_printk (src_fmt, sizeof (src_fmt), (iface_mac[0] << 16 | iface_mac[1] << 8 | iface_mac[2]), (iface_mac[3] << 16 | iface_mac[4] << 8 | iface_mac[5]));\n", "        bpf_trace_printk (pkt_fmt, sizeof (pkt_fmt), (pkt_mac[0] << 16 | pkt_mac[1] << 8 | pkt_mac[2]), (pkt_mac[3] << 16 | pkt_mac[4] << 8 | pkt_mac[5]));\n", "        ADD_DROP_STAT (idx, inf);\n", "        return TC_ACT_SHOT;\n", "    }\n", "    bpf_trace_printk (mac_matched, sizeof (mac_matched));\n", "    if (iface_ip != pkt_ip) {\n", "        bpf_trace_printk (ip_unmatched, sizeof (ip_unmatched), iface_ip, pkt_ip);\n", "        ADD_DROP_STAT (idx, inf);\n", "        return TC_ACT_SHOT;\n", "    }\n", "    bpf_trace_printk (ip_matched, sizeof (ip_matched), iface_ip, pkt_ip);\n", "    ADD_PASS_STAT (idx, inf);\n", "    return TC_ACT_OK;\n", "}\n"], "called_function_list": ["is_broadcast_mac", "compare_mac"], "call_depth": 1, "humanFuncDescription": [[{"description": "This function performs the action of a filter which allows packets only with certain mac and ip address to pass through.The filter described below is to be attached on the root interface of a pod's veth pair at TC layer and filters the outgoing traffic from pod. It takes in a packet in sk_buff form as argument. It first checks if the packet is well formed. If it is, it will reads a map called iface_stat_map using the packet ingress interface as the key, this map stores the counter of passed or dropped packets. Then, the filter reads maps called iface_map and iface_ip_map also with ingress interface of the packet as the key. First map returns the mac address which is allowed to pass through the interface and second contains the ip address which is allowed.  The filter applied is of this form, allow packets coming from the pod only in these cases, 1) if the source or dest mac are broadcast addresses then allow,  2) if the packet source mac address matches that of the pod then allow, 3) if the packet source ip matches that of the pod then allow.Filter doesn't stop the traffic going towards the pod.Note that all the above filters are applied to the packet and traffic is allowed only in the cases mentioned aboveIt also prints the matching/unmatching mac or ip addresses.Returns TC_ACT_OK if filter passes else TC_ACT_SHOT. The filter also records the PASS or SHOT statistics in the map iface_stat_map", "author": "Dushyant Behl", "authorEmail": "dushyantbehl@in.ibm.com", "date": "2023-02-20"}]], "AI_func_description": [{"description": "", "author": "", "authorEmail": "", "date": "", "invocationParameters": ""}]}, "4": {"capabilities": [], "helperCallParams": {}, "startLine": 229, "endLine": 232, "File": "/home/palani/github/opened_extraction/examples/bpf-filter-master/ebpf/drop.c", "funcName": "bpf_filter", "developer_inline_comments": [], "updateMaps": [], "readMaps": [], "input": ["struct  __sk_buff *skb"], "output": "int", "helper": [], "compatibleHookpoints": ["raw_tracepoint_writable", "cgroup_sock_addr", "lwt_in", "kprobe", "raw_tracepoint", "cgroup_sock", "flow_dissector", "tracepoint", "perf_event", "sched_cls", "lwt_seg6local", "sock_ops", "sk_reuseport", "cgroup_device", "socket_filter", "sk_msg", "sched_act", "cgroup_skb", "lwt_xmit", "xdp", "cgroup_sysctl", "lwt_out", "sk_skb"], "source": ["int bpf_filter (struct  __sk_buff *skb)\n", "{\n", "    return filter (skb);\n", "}\n"], "called_function_list": ["filter"], "call_depth": 2, "humanFuncDescription": [[{"description": "This is a wrapper function which calls the base function filter with the same arument passed to it and returns its value", "author": "Dushyant Behl", "authorEmail": "dushyantbehl@in.ibm.com", "date": "2023-02-20"}, {}]], "AI_func_description": [{"description": "", "author": "", "authorEmail": "", "date": "", "invocationParameters": ""}]}}}