#ifndef __BALANCER_MAPS_H
#define __BALANCER_MAPS_H
#include "bpf.h"
#include "bpf_helpers.h"
#include "balancer_consts.h"
#include "balancer_structs.h"

<struct>
struct {
    __uint (type, BPF_MAP_TYPE_HASH);
    __type (key, struct vip_definition);
    __type (value, struct vip_meta);
    __uint (max_entries, MAX_VIPS);
    __uint (map_flags, NO_FLAGS);
} vip_map SEC (".maps");
</struct>

<struct>
struct {
    __uint (type, BPF_MAP_TYPE_LRU_HASH);
    __type (key, struct flow_key);
    __type (value, struct real_pos_lru);
    __uint (max_entries, DEFAULT_LRU_SIZE);
    __uint (map_flags, NO_FLAGS);
} fallback_cache SEC (".maps");
</struct>

<struct>
struct {
    __uint (type, BPF_MAP_TYPE_ARRAY);
    __type (key, __u32);
    __type (value, __u32);
    __uint (max_entries, CH_RINGS_SIZE);
    __uint (map_flags, NO_FLAGS);
} ch_rings SEC (".maps");
</struct>

<struct>
struct {
    __uint (type, BPF_MAP_TYPE_ARRAY);
    __type (key, __u32);
    __type (value, struct real_definition);
    __uint (max_entries, MAX_REALS);
    __uint (map_flags, NO_FLAGS);
} reals SEC (".maps");
</struct>

<struct>
struct {
    __uint (type, BPF_MAP_TYPE_PERCPU_ARRAY);
    __type (key, __u32);
    __type (value, struct lb_stats);
    __uint (max_entries, MAX_REALS);
    __uint (map_flags, NO_FLAGS);
} reals_stats SEC (".maps");
</struct>

<struct>
struct {
    __uint (type, BPF_MAP_TYPE_PERCPU_ARRAY);
    __type (key, __u32);
    __type (value, struct lb_stats);
    __uint (max_entries, STATS_MAP_SIZE);
    __uint (map_flags, NO_FLAGS);
} stats SEC (".maps");
</struct>

<struct>
struct {
    __uint (type, BPF_MAP_TYPE_ARRAY);
    __type (key, __u32);
    __type (value, __u32);
    __uint (max_entries, MAX_QUIC_REALS);
    __uint (map_flags, NO_FLAGS);
} server_id_map SEC (".maps");
</struct>
#ifdef LPM_SRC_LOOKUP

<struct>
struct {
    __uint (type, BPF_MAP_TYPE_LPM_TRIE);
    __type (key, struct v4_lpm_key);
    __type (value, __u32);
    __uint (max_entries, MAX_LPM_SRC);
    __uint (map_flags, BPF_F_NO_PREALLOC);
} lpm_src_v4 SEC (".maps");
</struct>

<struct>
struct {
    __uint (type, BPF_MAP_TYPE_LPM_TRIE);
    __type (key, struct v6_lpm_key);
    __type (value, __u32);
    __uint (max_entries, MAX_LPM_SRC);
    __uint (map_flags, BPF_F_NO_PREALLOC);
} lpm_src_v6 SEC (".maps");
</struct>
#endif // of LPM_SRC_LOOKUP
#ifdef GLOBAL_LRU_LOOKUP

<struct>
struct {
    __uint (type, BPF_MAP_TYPE_ARRAY_OF_MAPS);
    __uint (key_size, sizeof (__u32));
    __uint (value_size, sizeof (__u32));
    __uint (max_entries, MAX_SUPPORTED_CPUS);
    __uint (map_flags, NO_FLAGS);
} global_lru_maps SEC (".maps");
</struct>

<struct>
struct {
    __uint (type, BPF_MAP_TYPE_LRU_HASH);
    __type (key, struct flow_key);
    __type (value, __u32);
    __uint (max_entries, DEFAULT_GLOBAL_LRU_SIZE);
    __uint (map_flags, NO_FLAGS);
} fallback_glru SEC (".maps");
</struct>
#endif // of GLOBAL_LRU_LOOKUP
#endif // of _BALANCER_MAPS
